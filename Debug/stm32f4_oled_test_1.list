
stm32f4_oled_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b33c  0800b33c  000204d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b344  0800b344  000204d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d4  20000000  0800b34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052ac  200004d4  0800b820  000204d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005780  0800b820  00025780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e6f0  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c52  00000000  00000000  0004ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021c8  00000000  00000000  00054848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  00056a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a52  00000000  00000000  00058938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022b95  00000000  00000000  0008038a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3840  00000000  00000000  000a2f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018675f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009070  00000000  00000000  001867dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004d4 	.word	0x200004d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b254 	.word	0x0800b254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004d8 	.word	0x200004d8
 80001cc:	0800b254 	.word	0x0800b254

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0x9c>)
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <MX_ADC1_Init+0xa0>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_ADC1_Init+0x9c>)
 800058a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_ADC1_Init+0x9c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0x9c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_ADC1_Init+0x9c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0x9c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_ADC1_Init+0x9c>)
 80005ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_ADC1_Init+0x9c>)
 80005b4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC1_Init+0x9c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_ADC1_Init+0x9c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_ADC1_Init+0x9c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC1_Init+0x9c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_ADC1_Init+0x9c>)
 80005d6:	f001 fbd3 	bl	8001d80 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005e0:	f000 fd8c 	bl	80010fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0x9c>)
 80005f6:	f001 fe2d 	bl	8002254 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000600:	f000 fd7c 	bl	80010fc <Error_Handler>
  }

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20004e10 	.word	0x20004e10
 8000610:	40012000 	.word	0x40012000

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <HAL_ADC_MspInit+0x8c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d12f      	bne.n	8000696 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_ADC_MspInit+0x90>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <HAL_ADC_MspInit+0x94>)
 8000682:	f002 f913 	bl	80028ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2012      	movs	r0, #18
 800068c:	f002 f8c2 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000690:	2012      	movs	r0, #18
 8000692:	f002 f8db 	bl	800284c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012000 	.word	0x40012000
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000

080006ac <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	4b76      	ldr	r3, [pc, #472]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a75      	ldr	r2, [pc, #468]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b73      	ldr	r3, [pc, #460]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	4b6f      	ldr	r3, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a6e      	ldr	r2, [pc, #440]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b6c      	ldr	r3, [pc, #432]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b68      	ldr	r3, [pc, #416]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a67      	ldr	r2, [pc, #412]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b65      	ldr	r3, [pc, #404]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b61      	ldr	r3, [pc, #388]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a60      	ldr	r2, [pc, #384]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b5e      	ldr	r3, [pc, #376]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a59      	ldr	r2, [pc, #356]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a52      	ldr	r2, [pc, #328]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <MX_GPIO_Init+0x1f4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f640 0138 	movw	r1, #2104	; 0x838
 8000770:	484c      	ldr	r0, [pc, #304]	; (80008a4 <MX_GPIO_Init+0x1f8>)
 8000772:	f002 fa35 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	484b      	ldr	r0, [pc, #300]	; (80008a8 <MX_GPIO_Init+0x1fc>)
 800077c:	f002 fa30 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000780:	2200      	movs	r2, #0
 8000782:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000786:	4849      	ldr	r0, [pc, #292]	; (80008ac <MX_GPIO_Init+0x200>)
 8000788:	f002 fa2a 	bl	8002be0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 PE11 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 800078c:	f640 0338 	movw	r3, #2104	; 0x838
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	483f      	ldr	r0, [pc, #252]	; (80008a4 <MX_GPIO_Init+0x1f8>)
 80007a6:	f002 f881 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x1fc>)
 80007c2:	f002 f873 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d6:	2305      	movs	r3, #5
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4831      	ldr	r0, [pc, #196]	; (80008a8 <MX_GPIO_Init+0x1fc>)
 80007e2:	f002 f863 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <MX_GPIO_Init+0x204>)
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	482e      	ldr	r0, [pc, #184]	; (80008b4 <MX_GPIO_Init+0x208>)
 80007fa:	f002 f857 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007fe:	2304      	movs	r3, #4
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4829      	ldr	r0, [pc, #164]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000812:	f002 f84b 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000828:	2305      	movs	r3, #5
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4821      	ldr	r0, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000834:	f002 f83a 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000838:	f24f 0310 	movw	r3, #61456	; 0xf010
 800083c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <MX_GPIO_Init+0x200>)
 8000852:	f002 f82b 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0x200>)
 800086a:	f002 f81f 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x210>)
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <MX_GPIO_Init+0x1f8>)
 8000882:	f002 f813 	bl	80028ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2105      	movs	r1, #5
 800088a:	2006      	movs	r0, #6
 800088c:	f001 ffc2 	bl	8002814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000890:	2006      	movs	r0, #6
 8000892:	f001 ffdb 	bl	800284c <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	10110000 	.word	0x10110000
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40020400 	.word	0x40020400
 80008bc:	10120000 	.word	0x10120000

080008c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C1_Init+0x50>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_I2C1_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C1_Init+0x50>)
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_I2C1_Init+0x58>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_I2C1_Init+0x50>)
 80008de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_I2C1_Init+0x50>)
 80008fe:	f003 fb2f 	bl	8003f60 <HAL_I2C_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000908:	f000 fbf8 	bl	80010fc <Error_Handler>
  }

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20004e58 	.word	0x20004e58
 8000914:	40005400 	.word	0x40005400
 8000918:	000186a0 	.word	0x000186a0

0800091c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <HAL_I2C_MspInit+0x8c>)
 8000978:	f001 ff98 	bl	80028ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <MX_I2S3_Init+0x58>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <MX_I2S3_Init+0x5c>)
 80009d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_I2S3_Init+0x54>)
 80009ec:	f003 fbf0 	bl	80041d0 <HAL_I2S_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009f6:	f000 fb81 	bl	80010fc <Error_Handler>
  }

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20004eac 	.word	0x20004eac
 8000a04:	40003c00 	.word	0x40003c00
 8000a08:	00017700 	.word	0x00017700

08000a0c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <HAL_I2S_MspInit+0xc0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d14a      	bne.n	8000ac4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_I2S_MspInit+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a82:	2310      	movs	r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a92:	2306      	movs	r3, #6
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <HAL_I2S_MspInit+0xc8>)
 8000a9e:	f001 ff05 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_I2S_MspInit+0xcc>)
 8000ac0:	f001 fef4 	bl	80028ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]

//	static int prescaler = 0;

	 if(GPIO_Pin == GPIO_PIN_0)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d110      	bne.n	8000b0e <HAL_GPIO_EXTI_Callback+0x32>
	 {
	//	 osTimerStart(debounce_timer, 50U);

		 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]

		     if( xTimerStartFromISR( debounce_timer,  &xHigherPriorityTaskWoken ) != pdPASS )
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	f008 fe08 	bl	8009708 <xTaskGetTickCountFromISR>
 8000af8:	4601      	mov	r1, r0
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	2300      	movs	r3, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4613      	mov	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	2106      	movs	r1, #6
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f009 fae7 	bl	800a0dc <xTimerGenericCommand>
	 }

  /* Prevent unused argument(s) compilation warning */
  ///UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,the HAL_GPIO_EXTI_Callback could be implemented in the user file */
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20004f00 	.word	0x20004f00

08000b1c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	MSGQUEUE_OBJ_t g_data;

	uint16_t adc_value = hadc->Instance->DR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	87fb      	strh	r3, [r7, #62]	; 0x3e

	g_data.item = GRAPH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	g_data.graph_value = adc_value;
 8000b32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    osMessageQueuePut(mid_MsgQueue, &g_data, 0U, 0U);
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f107 010c 	add.w	r1, r7, #12
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2200      	movs	r2, #0
 8000b42:	f006 ff87 	bl	8007a54 <osMessageQueuePut>

    return;
 8000b46:	bf00      	nop
//	if(adci >= 1024) adci = 0;
  /* Prevent unused argument(s) compilation warning */
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000b48:	3740      	adds	r7, #64	; 0x40
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20004ef8 	.word	0x20004ef8

08000b54 <debounce_timer_Callback>:

static void debounce_timer_Callback (void *argument) {
 8000b54:	b480      	push	{r7}
 8000b56:	b091      	sub	sp, #68	; 0x44
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  int32_t arg = (int32_t)argument; // cast back argument '0'
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  // do something, i.e. set thread/event flags

     static int prescaler = 0;

	 if(prescaler == 0) {
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <debounce_timer_Callback+0x1a>
		 TIM8->PSC = 84;	//100Hz
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <debounce_timer_Callback+0x6c>)
 8000b6a:	2254      	movs	r2, #84	; 0x54
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 if(prescaler == 1) {
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <debounce_timer_Callback+0x28>
		 TIM8->PSC = 84*2;	//50Hz
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <debounce_timer_Callback+0x6c>)
 8000b78:	22a8      	movs	r2, #168	; 0xa8
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 if(prescaler == 2) {
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d102      	bne.n	8000b8a <debounce_timer_Callback+0x36>
		 TIM8->PSC = 84*3; //30Hz
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <debounce_timer_Callback+0x6c>)
 8000b86:	22fc      	movs	r2, #252	; 0xfc
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 if(prescaler == 3) {
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d103      	bne.n	8000b9a <debounce_timer_Callback+0x46>
		 TIM8->PSC = 84*4; //25Hz
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <debounce_timer_Callback+0x6c>)
 8000b94:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
	 }

	 prescaler++;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000ba2:	6013      	str	r3, [r2, #0]
	 if(prescaler >= 4) prescaler = 0;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	dd02      	ble.n	8000bb2 <debounce_timer_Callback+0x5e>
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <debounce_timer_Callback+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
	tx_data.item = SIGNAL;
		tx_data.signal = signal++;
	    osMessageQueuePut(mid_MsgQueue, &tx_data, 0U, 0U);
	    if(signal > 5) signal = 0;

}
 8000bb2:	3744      	adds	r7, #68	; 0x44
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	200004f0 	.word	0x200004f0
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <StartOledTask>:



void StartOledTask(void *argument)
{
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	b0c2      	sub	sp, #264	; 0x108
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	6078      	str	r0, [r7, #4]
  char* lines[5];
  char bat[5];
  char signal[5];


  HAL_TIM_Base_Start(&htim8);
 8000bcc:	48c7      	ldr	r0, [pc, #796]	; (8000eec <StartOledTask+0x328>)
 8000bce:	f004 ffe0 	bl	8005b92 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000bd2:	48c7      	ldr	r0, [pc, #796]	; (8000ef0 <StartOledTask+0x32c>)
 8000bd4:	f001 f918 	bl	8001e08 <HAL_ADC_Start_IT>


  memset(bat, 0,  sizeof(bat));
 8000bd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bdc:	2205      	movs	r2, #5
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 ff4d 	bl	800aa80 <memset>
  memset(signal, 0, sizeof(signal));
 8000be6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bea:	2205      	movs	r2, #5
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f009 ff46 	bl	800aa80 <memset>



  for( int i = 0; i < 5; i++ ) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000bfa:	e01d      	b.n	8000c38 <StartOledTask+0x74>
	  lines[i] = pvPortMalloc(32);
 8000bfc:	2020      	movs	r0, #32
 8000bfe:	f007 f843 	bl	8007c88 <pvPortMalloc>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000c0e:	440b      	add	r3, r1
 8000c10:	f843 2c34 	str.w	r2, [r3, #-52]
	  memset(lines[i], 0, 32);
 8000c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000c1e:	4413      	add	r3, r2
 8000c20:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000c24:	2220      	movs	r2, #32
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 ff29 	bl	800aa80 <memset>
  for( int i = 0; i < 5; i++ ) {
 8000c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c32:	3301      	adds	r3, #1
 8000c34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	dddd      	ble.n	8000bfc <StartOledTask+0x38>
  }



  osTimerStart(debounce_timer, 400U);
 8000c40:	4bac      	ldr	r3, [pc, #688]	; (8000ef4 <StartOledTask+0x330>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f006 fe3d 	bl	80078c8 <osTimerStart>

  uint8_t graph[128];
  memset(graph, 0, 128);
 8000c4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f009 ff12 	bl	800aa80 <memset>
  //////////////
  while(1)
  {
	MSGQUEUE_OBJ_t data;

	if (osMessageQueueGet(mid_MsgQueue, &data, NULL, 1000U) == osOK) {
 8000c5c:	4ba6      	ldr	r3, [pc, #664]	; (8000ef8 <StartOledTask+0x334>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f006 ff67 	bl	8007b3c <osMessageQueueGet>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f3      	bne.n	8000c5c <StartOledTask+0x98>

		if(data.item == TERMINAL) {
 8000c74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d171      	bne.n	8000d60 <StartOledTask+0x19c>
			for( int i = 0; i < 5; i++ ) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000c82:	e017      	b.n	8000cb4 <StartOledTask+0xf0>
				print_string(lines[i], 1, 9*2 + i*9, 0);
 8000c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000c8e:	4413      	add	r3, r2
 8000c90:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000c94:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f103 0212 	add.w	r2, r3, #18
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	f000 fb37 	bl	8001318 <print_string>
			for( int i = 0; i < 5; i++ ) {
 8000caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	dde3      	ble.n	8000c84 <StartOledTask+0xc0>
			}

			for(int i  = 0; i < 4; i++ ) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000cc2:	e019      	b.n	8000cf8 <StartOledTask+0x134>
				memcpy(lines[i], lines[i + 1], 32);
 8000cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000cce:	4413      	add	r3, r2
 8000cd0:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cd8:	3301      	adds	r3, #1
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f009 fea5 	bl	800aa38 <memcpy>
			for(int i  = 0; i < 4; i++ ) {
 8000cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	dde1      	ble.n	8000cc4 <StartOledTask+0x100>
			}
			memcpy(lines[4], data.Buf, 32);
 8000d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d04:	461d      	mov	r5, r3
 8000d06:	f107 040c 	add.w	r4, r7, #12
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	6028      	str	r0, [r5, #0]
 8000d0e:	6069      	str	r1, [r5, #4]
 8000d10:	60aa      	str	r2, [r5, #8]
 8000d12:	60eb      	str	r3, [r5, #12]
 8000d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d16:	6128      	str	r0, [r5, #16]
 8000d18:	6169      	str	r1, [r5, #20]
 8000d1a:	61aa      	str	r2, [r5, #24]
 8000d1c:	61eb      	str	r3, [r5, #28]

			for( int i = 0; i < 5; i++ ) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000d24:	e017      	b.n	8000d56 <StartOledTask+0x192>
				print_string(lines[i], 1, 9*2 + i*9, 1);
 8000d26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000d30:	4413      	add	r3, r2
 8000d32:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000d36:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4413      	add	r3, r2
 8000d40:	f103 0212 	add.w	r2, r3, #18
 8000d44:	2301      	movs	r3, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	f000 fae6 	bl	8001318 <print_string>
			for( int i = 0; i < 5; i++ ) {
 8000d4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d50:	3301      	adds	r3, #1
 8000d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000d56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	dde3      	ble.n	8000d26 <StartOledTask+0x162>
 8000d5e:	e0c1      	b.n	8000ee4 <StartOledTask+0x320>
			}
		}

		else if( data.item == BATTERY ) {
 8000d60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d115      	bne.n	8000d94 <StartOledTask+0x1d0>
			print_string(bat, 1, 1 , 0);
 8000d68:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	f000 fad1 	bl	8001318 <print_string>
			sprintf(bat, "%d%%", data.battery);
 8000d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d7c:	495f      	ldr	r1, [pc, #380]	; (8000efc <StartOledTask+0x338>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f009 ff3e 	bl	800ac00 <siprintf>
			print_string(bat, 1, 1 , 1);
 8000d84:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f000 fac3 	bl	8001318 <print_string>
 8000d92:	e0a7      	b.n	8000ee4 <StartOledTask+0x320>
		}

		else if( data.item == GRAPH ) {
 8000d94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	f040 808a 	bne.w	8000eb2 <StartOledTask+0x2ee>
			// clean the graph pixels from the oled
			for(int i = 0; i < 127; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000da4:	e01e      	b.n	8000de4 <StartOledTask+0x220>
				drawline(i, graph[i], i+1 ,graph[i+1], 0);
 8000da6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000dc4:	4403      	add	r3, r0
 8000dc6:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000dd6:	f000 f9f5 	bl	80011c4 <drawline>
			for(int i = 0; i < 127; i++) {
 8000dda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dde:	3301      	adds	r3, #1
 8000de0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000de4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000de8:	2b7e      	cmp	r3, #126	; 0x7e
 8000dea:	dddc      	ble.n	8000da6 <StartOledTask+0x1e2>
				//set_pixel(i, graph[i], 0);
			}

			//move entire graph pixels to left
			for(int i = 0; i < 127; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000df2:	e013      	b.n	8000e1c <StartOledTask+0x258>
				graph[i] = graph[i+1];
 8000df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000dfe:	4413      	add	r3, r2
 8000e00:	f813 1cc4 	ldrb.w	r1, [r3, #-196]
 8000e04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e0c:	4413      	add	r3, r2
 8000e0e:	460a      	mov	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 127; i++) {
 8000e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e16:	3301      	adds	r3, #1
 8000e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e20:	2b7e      	cmp	r3, #126	; 0x7e
 8000e22:	dde7      	ble.n	8000df4 <StartOledTask+0x230>
			}

			// graph variable should have value between 0 to 63 only because it is y value.
			//2048 to 2200 is range
			int adc = data.graph_value/2;
 8000e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e26:	0fda      	lsrs	r2, r3, #31
 8000e28:	4413      	add	r3, r2
 8000e2a:	105b      	asrs	r3, r3, #1
 8000e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			adc -= 2040/2;
 8000e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e34:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000e38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			if(adc < 0) adc = 0;
 8000e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	da02      	bge.n	8000e4a <StartOledTask+0x286>
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			if(adc > 63) adc = 63;
 8000e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e50:	dd02      	ble.n	8000e58 <StartOledTask+0x294>
 8000e52:	233f      	movs	r3, #63	; 0x3f
 8000e54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			graph[127] = (uint8_t) adc;
 8000e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

			// clean the graph pixels from the oled
			for(int i = 0; i < 127; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e68:	e01e      	b.n	8000ea8 <StartOledTask+0x2e4>
				drawline(i, graph[i], i+1 ,graph[i+1], 1);
 8000e6a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e82:	3301      	adds	r3, #1
 8000e84:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000e88:	4403      	add	r3, r0
 8000e8a:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	2301      	movs	r3, #1
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8000e9a:	f000 f993 	bl	80011c4 <drawline>
			for(int i = 0; i < 127; i++) {
 8000e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000eac:	2b7e      	cmp	r3, #126	; 0x7e
 8000eae:	dddc      	ble.n	8000e6a <StartOledTask+0x2a6>
 8000eb0:	e018      	b.n	8000ee4 <StartOledTask+0x320>
//			for(int i = 0; i < 128; i++) {
//				set_pixel(i, graph[i], 1);
//			}
		}

		else if( data.item == SIGNAL ) {
 8000eb2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d114      	bne.n	8000ee4 <StartOledTask+0x320>
			print_string(signal, 128 - 6*2, 1 , 0);
 8000eba:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2174      	movs	r1, #116	; 0x74
 8000ec4:	f000 fa28 	bl	8001318 <print_string>
			sprintf(signal, "%d", data.signal);
 8000ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ece:	490c      	ldr	r1, [pc, #48]	; (8000f00 <StartOledTask+0x33c>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 fe95 	bl	800ac00 <siprintf>
			print_string(signal, 128 - 6*2, 1 , 1);
 8000ed6:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000eda:	2301      	movs	r3, #1
 8000edc:	2201      	movs	r2, #1
 8000ede:	2174      	movs	r1, #116	; 0x74
 8000ee0:	f000 fa1a 	bl	8001318 <print_string>
		}

		ssd1306_UpdateScreen();
 8000ee4:	f000 fe90 	bl	8001c08 <ssd1306_UpdateScreen>
  {
 8000ee8:	e6b8      	b.n	8000c5c <StartOledTask+0x98>
 8000eea:	bf00      	nop
 8000eec:	20004ff4 	.word	0x20004ff4
 8000ef0:	20004e10 	.word	0x20004e10
 8000ef4:	20004f00 	.word	0x20004f00
 8000ef8:	20004ef8 	.word	0x20004ef8
 8000efc:	0800b284 	.word	0x0800b284
 8000f00:	0800b28c 	.word	0x0800b28c

08000f04 <StartUartTask>:
  }
  /* USER CODE END 5 */
}

void StartUartTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  int count = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  int battery, signal;

  battery = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  signal = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
/*	tx_data.item = SIGNAL;
	tx_data.signal = signal++;
    osMessageQueuePut(mid_MsgQueue, &tx_data, 0U, 0U);
    if(signal > 5) signal = 0;   */

    osDelay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f006 fc0c 	bl	8007738 <osDelay>
 8000f20:	e7fa      	b.n	8000f18 <StartUartTask+0x14>
	...

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fec6 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f852 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f7ff fbbc 	bl	80006ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f34:	f7ff fcc4 	bl	80008c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f38:	f7ff fd38 	bl	80009ac <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f3c:	f000 fa4e 	bl	80013dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f40:	f000 fa82 	bl	8001448 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 fcc8 	bl	80018d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f48:	f7ff fb12 	bl	8000570 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000f4c:	f000 fc4c 	bl	80017e8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f006 fae0 	bl	8007514 <osKernelInitialize>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   mid_MsgQueue = osMessageQueueNew(30, sizeof(MSGQUEUE_OBJ_t), NULL);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2130      	movs	r1, #48	; 0x30
 8000f58:	201e      	movs	r0, #30
 8000f5a:	f006 fcf5 	bl	8007948 <osMessageQueueNew>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <main+0x88>)
 8000f62:	601a      	str	r2, [r3, #0]
   if (mid_MsgQueue == NULL) {
     ; // Message Queue object not created, handle failure
   }
   debounce_timer = osTimerNew(debounce_timer_Callback, osTimerOnce, (void *)0, NULL);     // (void*)0 is passed as an argument
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <main+0x8c>)
 8000f6c:	f006 fc28 	bl	80077c0 <osTimerNew>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <main+0x90>)
 8000f74:	601a      	str	r2, [r3, #0]


  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <main+0x94>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <main+0x98>)
 8000f7c:	f006 fb32 	bl	80075e4 <osThreadNew>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <main+0x9c>)
 8000f84:	601a      	str	r2, [r3, #0]
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <main+0xa0>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <main+0xa4>)
 8000f8c:	f006 fb2a 	bl	80075e4 <osThreadNew>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <main+0xa8>)
 8000f94:	601a      	str	r2, [r3, #0]


   ssd1306_Init();	//initialize the oled display for 128 x 64 pixels
 8000f96:	f000 fdab 	bl	8001af0 <ssd1306_Init>

   memset(SSD1306_Buffer, 0x0, 128 * 8);	//clear the display buffer
 8000f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <main+0xac>)
 8000fa2:	f009 fd6d 	bl	800aa80 <memset>


   osKernelStart();
 8000fa6:	f006 fae9 	bl	800757c <osKernelStart>


  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x86>
 8000fac:	20004ef8 	.word	0x20004ef8
 8000fb0:	08000b55 	.word	0x08000b55
 8000fb4:	20004f00 	.word	0x20004f00
 8000fb8:	0800b2a8 	.word	0x0800b2a8
 8000fbc:	08000bc5 	.word	0x08000bc5
 8000fc0:	20004ef4 	.word	0x20004ef4
 8000fc4:	0800b2cc 	.word	0x0800b2cc
 8000fc8:	08000f05 	.word	0x08000f05
 8000fcc:	20004efc 	.word	0x20004efc
 8000fd0:	20005074 	.word	0x20005074

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b098      	sub	sp, #96	; 0x60
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f009 fd4c 	bl	800aa80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <SystemClock_Config+0xfc>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <SystemClock_Config+0xfc>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <SystemClock_Config+0xfc>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <SystemClock_Config+0x100>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <SystemClock_Config+0x100>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <SystemClock_Config+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103e:	2301      	movs	r3, #1
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001052:	2308      	movs	r3, #8
 8001054:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001056:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800105a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001060:	2307      	movs	r3, #7
 8001062:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fd51 	bl	8004b10 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001074:	f000 f842 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2105      	movs	r1, #5
 8001096:	4618      	mov	r0, r3
 8001098:	f003 ffaa 	bl	8004ff0 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010a2:	f000 f82b 	bl	80010fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010a6:	2301      	movs	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010aa:	23c0      	movs	r3, #192	; 0xc0
 80010ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f9be 	bl	8005438 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010c2:	f000 f81b 	bl	80010fc <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3760      	adds	r7, #96	; 0x60
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fe07 	bl	8001cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40002000 	.word	0x40002000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	//  	  }
	//
	//    }

  /* USER CODE END Error_Handler_Debug */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <set_pixel>:
#include "string.h"
#include "ssd1306.h"


void set_pixel(int x, int y, int col)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	if(x >= 128 || y >= 64) return;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b7f      	cmp	r3, #127	; 0x7f
 800111c:	dc47      	bgt.n	80011ae <set_pixel+0xa2>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b3f      	cmp	r3, #63	; 0x3f
 8001122:	dc44      	bgt.n	80011ae <set_pixel+0xa2>
	if(x < 0 || y < 0) return;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db43      	blt.n	80011b2 <set_pixel+0xa6>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db40      	blt.n	80011b2 <set_pixel+0xa6>

	int page = (y/8);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da00      	bge.n	8001138 <set_pixel+0x2c>
 8001136:	3307      	adds	r3, #7
 8001138:	10db      	asrs	r3, r3, #3
 800113a:	61fb      	str	r3, [r7, #28]
	int buffer_index = ( page * 128 ) + x;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
	int bit_position = y % 8;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	425a      	negs	r2, r3
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	f002 0207 	and.w	r2, r2, #7
 8001152:	bf58      	it	pl
 8001154:	4253      	negpl	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

	if(col) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d012      	beq.n	8001184 <set_pixel+0x78>
		SSD1306_Buffer[ buffer_index ] |= ( 1 << bit_position );
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <set_pixel+0xb4>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b25a      	sxtb	r2, r3
 8001168:	2101      	movs	r1, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b25b      	sxtb	r3, r3
 8001176:	b2d9      	uxtb	r1, r3
 8001178:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <set_pixel+0xb4>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4413      	add	r3, r2
 800117e:	460a      	mov	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e017      	b.n	80011b4 <set_pixel+0xa8>
	} else {
		SSD1306_Buffer[ buffer_index ] &= ~( 1 << bit_position );
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <set_pixel+0xb4>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25a      	sxtb	r2, r3
 800118e:	2101      	movs	r1, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4013      	ands	r3, r2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <set_pixel+0xb4>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	4413      	add	r3, r2
 80011a8:	460a      	mov	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e002      	b.n	80011b4 <set_pixel+0xa8>
	if(x >= 128 || y >= 64) return;
 80011ae:	bf00      	nop
 80011b0:	e000      	b.n	80011b4 <set_pixel+0xa8>
	if(x < 0 || y < 0) return;
 80011b2:	bf00      	nop
	}
}
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20005074 	.word	0x20005074

080011c4 <drawline>:

void drawline(int x1, int  y1,int  x2,int  y2, int col)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]

   // if(x1>127)return;//x1=127;
  //  if(y1>63)return;//y1=63;
  //  if(x2>127)return;//x2=127;
  //  if(y2>63)return;//y2=63;
    if(x1>x2)
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dd0b      	ble.n	80011f2 <drawline+0x2e>
    {
    	q=x1;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	75fb      	strb	r3, [r7, #23]
    	x1=x2;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]
    	x2=q;
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	607b      	str	r3, [r7, #4]

    	q=y1;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	75fb      	strb	r3, [r7, #23]
    	y1=y2;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	60bb      	str	r3, [r7, #8]
    	y2=q;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	603b      	str	r3, [r7, #0]
    }

    if(y2>y1)
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dd45      	ble.n	8001286 <drawline+0xc2>
    {
        l=x2-x1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	75bb      	strb	r3, [r7, #22]
        b=y2-y1;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	757b      	strb	r3, [r7, #21]
        if(l>=b)
 8001212:	7dba      	ldrb	r2, [r7, #22]
 8001214:	7d7b      	ldrb	r3, [r7, #21]
 8001216:	429a      	cmp	r2, r3
 8001218:	d31a      	bcc.n	8001250 <drawline+0x8c>
        for(q=0;q<=l;q++)
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
 800121e:	e012      	b.n	8001246 <drawline+0x82>
        	set_pixel(x1 + q, (y1 + ((q*b)/l)), col);
 8001220:	7dfa      	ldrb	r2, [r7, #23]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	18d0      	adds	r0, r2, r3
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	7d7a      	ldrb	r2, [r7, #21]
 800122a:	fb02 f203 	mul.w	r2, r2, r3
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	fb92 f2f3 	sdiv	r2, r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	6a3a      	ldr	r2, [r7, #32]
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff ff66 	bl	800110c <set_pixel>
        for(q=0;q<=l;q++)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	3301      	adds	r3, #1
 8001244:	75fb      	strb	r3, [r7, #23]
 8001246:	7dfa      	ldrb	r2, [r7, #23]
 8001248:	7dbb      	ldrb	r3, [r7, #22]
 800124a:	429a      	cmp	r2, r3
 800124c:	d9e8      	bls.n	8001220 <drawline+0x5c>
        set_pixel(x1 + q, (y1 - ((q*b)/l)), col);
        else
        for(q=0;q<=b;q++)
        set_pixel((x1 + ((q*l)/b)), y1 - q, col);
    }
}
 800124e:	e05f      	b.n	8001310 <drawline+0x14c>
        for(q=0;q<=b;q++)
 8001250:	2300      	movs	r3, #0
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e012      	b.n	800127c <drawline+0xb8>
        	set_pixel((x1 + ((q*l)/b)), y1 + q, col);
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	7dba      	ldrb	r2, [r7, #22]
 800125a:	fb02 f203 	mul.w	r2, r2, r3
 800125e:	7d7b      	ldrb	r3, [r7, #21]
 8001260:	fb92 f2f3 	sdiv	r2, r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	18d0      	adds	r0, r2, r3
 8001268:	7dfa      	ldrb	r2, [r7, #23]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff ff4b 	bl	800110c <set_pixel>
        for(q=0;q<=b;q++)
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	3301      	adds	r3, #1
 800127a:	75fb      	strb	r3, [r7, #23]
 800127c:	7dfa      	ldrb	r2, [r7, #23]
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	429a      	cmp	r2, r3
 8001282:	d9e8      	bls.n	8001256 <drawline+0x92>
}
 8001284:	e044      	b.n	8001310 <drawline+0x14c>
        l=x2-x1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	75bb      	strb	r3, [r7, #22]
        b=y1-y2;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	757b      	strb	r3, [r7, #21]
        if(l>=b)
 800129e:	7dba      	ldrb	r2, [r7, #22]
 80012a0:	7d7b      	ldrb	r3, [r7, #21]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d31a      	bcc.n	80012dc <drawline+0x118>
        for(q=0;q<=l;q++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
 80012aa:	e012      	b.n	80012d2 <drawline+0x10e>
        set_pixel(x1 + q, (y1 - ((q*b)/l)), col);
 80012ac:	7dfa      	ldrb	r2, [r7, #23]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	18d0      	adds	r0, r2, r3
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	7d7a      	ldrb	r2, [r7, #21]
 80012b6:	fb02 f203 	mul.w	r2, r2, r3
 80012ba:	7dbb      	ldrb	r3, [r7, #22]
 80012bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	6a3a      	ldr	r2, [r7, #32]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff ff20 	bl	800110c <set_pixel>
        for(q=0;q<=l;q++)
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	3301      	adds	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	7dfa      	ldrb	r2, [r7, #23]
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d9e8      	bls.n	80012ac <drawline+0xe8>
}
 80012da:	e019      	b.n	8001310 <drawline+0x14c>
        for(q=0;q<=b;q++)
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e012      	b.n	8001308 <drawline+0x144>
        set_pixel((x1 + ((q*l)/b)), y1 - q, col);
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	7dba      	ldrb	r2, [r7, #22]
 80012e6:	fb02 f203 	mul.w	r2, r2, r3
 80012ea:	7d7b      	ldrb	r3, [r7, #21]
 80012ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	18d0      	adds	r0, r2, r3
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff ff05 	bl	800110c <set_pixel>
        for(q=0;q<=b;q++)
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3301      	adds	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
 8001308:	7dfa      	ldrb	r2, [r7, #23]
 800130a:	7d7b      	ldrb	r3, [r7, #21]
 800130c:	429a      	cmp	r2, r3
 800130e:	d9e8      	bls.n	80012e2 <drawline+0x11e>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <print_string>:
	drawline(x1, y2, x2, y2, col);
}


void print_string( char *str, int x1, int y1, int on )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
	int x = x1;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
	int y = y1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	61bb      	str	r3, [r7, #24]

	int mask = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28

	if(on) mask = 1;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d047      	beq.n	80013c8 <print_string+0xb0>
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28

	while(*str)
 800133c:	e044      	b.n	80013c8 <print_string+0xb0>
	{
		uint8_t let = *str++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < 6; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
 800134c:	e039      	b.n	80013c2 <print_string+0xaa>
		{
			y = y1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	61bb      	str	r3, [r7, #24]
			uint8_t row_data = letter[let - ' '][i];
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	f1a3 0220 	sub.w	r2, r3, #32
 8001358:	491f      	ldr	r1, [pc, #124]	; (80013d8 <print_string+0xc0>)
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	18ca      	adds	r2, r1, r3
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	75bb      	strb	r3, [r7, #22]
			for(int j = 0; j < 8; j++)
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	e01f      	b.n	80013b0 <print_string+0x98>
			{
				int col;

				if( i == 5 )
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	2b05      	cmp	r3, #5
 8001374:	d102      	bne.n	800137c <print_string+0x64>
					col = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e00c      	b.n	8001396 <print_string+0x7e>
				else
				{
					if( row_data & 1<<j )
 800137c:	7dba      	ldrb	r2, [r7, #22]
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	fa42 f303 	asr.w	r3, r2, r3
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <print_string+0x7a>
						col = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	e001      	b.n	8001396 <print_string+0x7e>
					else
						col = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
				}
				set_pixel(x, y + j, col & mask);
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	18d1      	adds	r1, r2, r3
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	4013      	ands	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a6:	f7ff feb1 	bl	800110c <set_pixel>
			for(int j = 0; j < 8; j++)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	3301      	adds	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	dddc      	ble.n	8001370 <print_string+0x58>
				//this will refresh the display instantly
			}
			x++;
 80013b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b8:	3301      	adds	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i = 0; i < 6; i++)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	ddc2      	ble.n	800134e <print_string+0x36>
	while(*str)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1b6      	bne.n	800133e <print_string+0x26>
		}

	}
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000

080013dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_SPI1_Init+0x64>)
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <MX_SPI1_Init+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_SPI1_Init+0x64>)
 80013e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_SPI1_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_SPI1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_SPI1_Init+0x64>)
 8001408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_SPI1_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_SPI1_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_SPI1_Init+0x64>)
 8001428:	220a      	movs	r2, #10
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_SPI1_Init+0x64>)
 800142e:	f004 f941 	bl	80056b4 <HAL_SPI_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001438:	f7ff fe60 	bl	80010fc <Error_Handler>
  }

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20004f5c 	.word	0x20004f5c
 8001444:	40013000 	.word	0x40013000

08001448 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_SPI2_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_SPI2_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI2_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI2_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SPI2_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI2_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI2_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI2_Init+0x64>)
 800147c:	2210      	movs	r2, #16
 800147e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SPI2_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI2_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_SPI2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI2_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_SPI2_Init+0x64>)
 800149a:	f004 f90b 	bl	80056b4 <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014a4:	f7ff fe2a 	bl	80010fc <Error_Handler>
  }

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20004f04 	.word	0x20004f04
 80014b0:	40003800 	.word	0x40003800

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <HAL_SPI_MspInit+0xe8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12c      	bne.n	8001530 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800150e:	23e0      	movs	r3, #224	; 0xe0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <HAL_SPI_MspInit+0xf0>)
 800152a:	f001 f9bf 	bl	80028ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800152e:	e031      	b.n	8001594 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_SPI_MspInit+0xf4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_SPI_MspInit+0xec>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001572:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001584:	2305      	movs	r3, #5
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <HAL_SPI_MspInit+0xf8>)
 8001590:	f001 f98c 	bl	80028ac <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40013000 	.word	0x40013000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40003800 	.word	0x40003800
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	202d      	movs	r0, #45	; 0x2d
 8001616:	f001 f8fd 	bl	8002814 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800161a:	202d      	movs	r0, #45	; 0x2d
 800161c:	f001 f916 	bl	800284c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_InitTick+0xa4>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_InitTick+0xa4>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_InitTick+0xa4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163c:	f107 0210 	add.w	r2, r7, #16
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fec4 	bl	80053d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800164c:	f003 fe9a 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_InitTick+0xa8>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0c9b      	lsrs	r3, r3, #18
 8001660:	3b01      	subs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0xac>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_InitTick+0xb0>)
 8001668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_InitTick+0xac>)
 800166c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001670:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_InitTick+0xac>)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_InitTick+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_InitTick+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_InitTick+0xac>)
 8001686:	f004 fa59 	bl	8005b3c <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <HAL_InitTick+0xac>)
 8001692:	f004 faa2 	bl	8005bda <HAL_TIM_Base_Start_IT>
 8001696:	4603      	mov	r3, r0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20004fb4 	.word	0x20004fb4
 80016b0:	40002000 	.word	0x40002000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f001 fa91 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <ADC_IRQHandler+0x10>)
 80016fe:	f000 fc53 	bl	8001fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20004e10 	.word	0x20004e10

0800170c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <USART2_IRQHandler+0x10>)
 8001712:	f004 fe85 	bl	8006420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20005034 	.word	0x20005034

08001720 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001726:	f004 fa7c 	bl	8005c22 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800172c:	f004 fa79 	bl	8005c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20004ff4 	.word	0x20004ff4
 8001738:	20004fb4 	.word	0x20004fb4

0800173c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <OTG_FS_IRQHandler+0x10>)
 8001742:	f001 fa7f 	bl	8002c44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200054b8 	.word	0x200054b8

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f009 f930 	bl	800a9e4 <__errno>
 8001784:	4602      	mov	r2, r0
 8001786:	230c      	movs	r3, #12
 8001788:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020000 	.word	0x20020000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	200004f4 	.word	0x200004f4
 80017b8:	20005780 	.word	0x20005780

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <SystemInit+0x28>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <SystemInit+0x28>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SystemInit+0x28>)
 80017d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d6:	609a      	str	r2, [r3, #8]
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_TIM8_Init+0x98>)
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <MX_TIM8_Init+0x9c>)
 8001808:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM8_Init+0x98>)
 800180c:	22a8      	movs	r2, #168	; 0xa8
 800180e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_TIM8_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM8_Init+0x98>)
 8001818:	f242 7210 	movw	r2, #10000	; 0x2710
 800181c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM8_Init+0x98>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_TIM8_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM8_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_TIM8_Init+0x98>)
 8001832:	f004 f983 	bl	8005b3c <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800183c:	f7ff fc5e 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM8_Init+0x98>)
 800184e:	f004 faf0 	bl	8005e32 <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001858:	f7ff fc50 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800185c:	2320      	movs	r3, #32
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM8_Init+0x98>)
 800186a:	f004 fcfb 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001874:	f7ff fc42 	bl	80010fc <Error_Handler>
  }

}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20004ff4 	.word	0x20004ff4
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_TIM_Base_MspInit+0x48>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d115      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_TIM_Base_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_TIM_Base_MspInit+0x4c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_TIM_Base_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	202d      	movs	r0, #45	; 0x2d
 80018bc:	f000 ffaa 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80018c0:	202d      	movs	r0, #45	; 0x2d
 80018c2:	f000 ffc3 	bl	800284c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010400 	.word	0x40010400
 80018d4:	40023800 	.word	0x40023800

080018d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART2_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART2_UART_Init+0x4c>)
 8001910:	f004 fd38 	bl	8006384 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f7ff fbef 	bl	80010fc <Error_Handler>
  }

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20005034 	.word	0x20005034
 8001928:	40004400 	.word	0x40004400

0800192c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_UART_MspInit+0x94>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d133      	bne.n	80019b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_UART_MspInit+0x98>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_UART_MspInit+0x98>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0x98>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x98>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0x98>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_UART_MspInit+0x98>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001986:	230c      	movs	r3, #12
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <HAL_UART_MspInit+0x9c>)
 80019a2:	f000 ff83 	bl	80028ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2026      	movs	r0, #38	; 0x26
 80019ac:	f000 ff32 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b0:	2026      	movs	r0, #38	; 0x26
 80019b2:	f000 ff4b 	bl	800284c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004400 	.word	0x40004400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019d2:	e003      	b.n	80019dc <LoopCopyDataInit>

080019d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019da:	3104      	adds	r1, #4

080019dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e4:	d3f6      	bcc.n	80019d4 <CopyDataInit>
  ldr  r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019e8:	e002      	b.n	80019f0 <LoopFillZerobss>

080019ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ec:	f842 3b04 	str.w	r3, [r2], #4

080019f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f4:	d3f9      	bcc.n	80019ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019f6:	f7ff fee1 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f008 fff9 	bl	800a9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fa91 	bl	8000f24 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a08:	0800b34c 	.word	0x0800b34c
  ldr  r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a10:	200004d4 	.word	0x200004d4
  ldr  r2, =_sbss
 8001a14:	200004d4 	.word	0x200004d4
  ldr  r3, = _ebss
 8001a18:	20005780 	.word	0x20005780

08001a1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <CAN1_RX0_IRQHandler>
	...

08001a20 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2a:	480a      	ldr	r0, [pc, #40]	; (8001a54 <ssd1306_Reset+0x34>)
 8001a2c:	f001 f8d8 	bl	8002be0 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2110      	movs	r1, #16
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <ssd1306_Reset+0x34>)
 8001a36:	f001 f8d3 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f000 f97e 	bl	8001d3c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2110      	movs	r1, #16
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <ssd1306_Reset+0x34>)
 8001a46:	f001 f8cb 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f000 f976 	bl	8001d3c <HAL_Delay>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000

08001a58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <ssd1306_WriteCommand+0x44>)
 8001a6a:	f001 f8b9 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2120      	movs	r1, #32
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <ssd1306_WriteCommand+0x44>)
 8001a74:	f001 f8b4 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT,  &byte, 1, HAL_MAX_DELAY);
 8001a78:	1df9      	adds	r1, r7, #7
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <ssd1306_WriteCommand+0x48>)
 8001a82:	f003 fe7b 	bl	800577c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <ssd1306_WriteCommand+0x44>)
 8001a8e:	f001 f8a7 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	20004f04 	.word	0x20004f04

08001aa4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <ssd1306_WriteData+0x44>)
 8001ab6:	f001 f893 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001aba:	2201      	movs	r2, #1
 8001abc:	2120      	movs	r1, #32
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <ssd1306_WriteData+0x44>)
 8001ac0:	f001 f88e 	bl	8002be0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <ssd1306_WriteData+0x48>)
 8001ad0:	f003 fe54 	bl	800577c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ada:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <ssd1306_WriteData+0x44>)
 8001adc:	f001 f880 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	20004f04 	.word	0x20004f04

08001af0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001af4:	f7ff ff94 	bl	8001a20 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001af8:	2064      	movs	r0, #100	; 0x64
 8001afa:	f000 f91f 	bl	8001d3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f8bc 	bl	8001c7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b04:	2020      	movs	r0, #32
 8001b06:	f7ff ffa7 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff ffa4 	bl	8001a58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b10:	20b0      	movs	r0, #176	; 0xb0
 8001b12:	f7ff ffa1 	bl	8001a58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b16:	20c8      	movs	r0, #200	; 0xc8
 8001b18:	f7ff ff9e 	bl	8001a58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff ff9b 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b22:	2010      	movs	r0, #16
 8001b24:	f7ff ff98 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b28:	2040      	movs	r0, #64	; 0x40
 8001b2a:	f7ff ff95 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b2e:	20ff      	movs	r0, #255	; 0xff
 8001b30:	f000 f890 	bl	8001c54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b34:	20a1      	movs	r0, #161	; 0xa1
 8001b36:	f7ff ff8f 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b3a:	20a6      	movs	r0, #166	; 0xa6
 8001b3c:	f7ff ff8c 	bl	8001a58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b40:	20a8      	movs	r0, #168	; 0xa8
 8001b42:	f7ff ff89 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b46:	203f      	movs	r0, #63	; 0x3f
 8001b48:	f7ff ff86 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b4c:	20a4      	movs	r0, #164	; 0xa4
 8001b4e:	f7ff ff83 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b52:	20d3      	movs	r0, #211	; 0xd3
 8001b54:	f7ff ff80 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff ff7d 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b5e:	20d5      	movs	r0, #213	; 0xd5
 8001b60:	f7ff ff7a 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b64:	20f0      	movs	r0, #240	; 0xf0
 8001b66:	f7ff ff77 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b6a:	20d9      	movs	r0, #217	; 0xd9
 8001b6c:	f7ff ff74 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b70:	2022      	movs	r0, #34	; 0x22
 8001b72:	f7ff ff71 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b76:	20da      	movs	r0, #218	; 0xda
 8001b78:	f7ff ff6e 	bl	8001a58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b7c:	2012      	movs	r0, #18
 8001b7e:	f7ff ff6b 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b82:	20db      	movs	r0, #219	; 0xdb
 8001b84:	f7ff ff68 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b88:	2020      	movs	r0, #32
 8001b8a:	f7ff ff65 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b8e:	208d      	movs	r0, #141	; 0x8d
 8001b90:	f7ff ff62 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b94:	2014      	movs	r0, #20
 8001b96:	f7ff ff5f 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 f86e 	bl	8001c7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f80f 	bl	8001bc4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ba6:	f000 f82f 	bl	8001c08 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <ssd1306_Init+0xd0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <ssd1306_Init+0xd0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001bb6:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <ssd1306_Init+0xd0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	715a      	strb	r2, [r3, #5]
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200004f8 	.word	0x200004f8

08001bc4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e00d      	b.n	8001bf0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <ssd1306_Fill+0x1a>
 8001bda:	2100      	movs	r1, #0
 8001bdc:	e000      	b.n	8001be0 <ssd1306_Fill+0x1c>
 8001bde:	21ff      	movs	r1, #255	; 0xff
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <ssd1306_Fill+0x40>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	460a      	mov	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d3ed      	bcc.n	8001bd4 <ssd1306_Fill+0x10>
    }
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	20005074 	.word	0x20005074

08001c08 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	e016      	b.n	8001c42 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	3b50      	subs	r3, #80	; 0x50
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff1c 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff19 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001c26:	2010      	movs	r0, #16
 8001c28:	f7ff ff16 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <ssd1306_UpdateScreen+0x48>)
 8001c32:	4413      	add	r3, r2
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff34 	bl	8001aa4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b07      	cmp	r3, #7
 8001c46:	d9e5      	bls.n	8001c14 <ssd1306_UpdateScreen+0xc>
    }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20005074 	.word	0x20005074

08001c54 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c5e:	2381      	movs	r3, #129	; 0x81
 8001c60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fef7 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fef3 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c8c:	23af      	movs	r3, #175	; 0xaf
 8001c8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <ssd1306_SetDisplayOn+0x38>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	719a      	strb	r2, [r3, #6]
 8001c96:	e004      	b.n	8001ca2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c98:	23ae      	movs	r3, #174	; 0xae
 8001c9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <ssd1306_SetDisplayOn+0x38>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fed7 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200004f8 	.word	0x200004f8

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fd8c 	bl	80027fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fc8a 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fc60 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000468 	.word	0x20000468
 8001d20:	20005474 	.word	0x20005474

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20005474 	.word	0x20005474

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_Delay+0x40>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000468 	.word	0x20000468

08001d80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e033      	b.n	8001dfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fc38 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dc6:	f023 0302 	bic.w	r3, r3, #2
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fb60 	bl	8002498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
 8001dee:	e001      	b.n	8001df4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Start_IT+0x1a>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e0b0      	b.n	8001f84 <HAL_ADC_Start_IT+0x17c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d018      	beq.n	8001e6a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e48:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_ADC_Start_IT+0x188>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <HAL_ADC_Start_IT+0x18c>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9a      	lsrs	r2, r3, #18
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f9      	bne.n	8001e5e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8084 	bne.w	8001f82 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f023 0206 	bic.w	r2, r3, #6
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_ADC_Start_IT+0x190>)
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ee2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef2:	f043 0320 	orr.w	r3, r3, #32
 8001ef6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d12a      	bne.n	8001f5a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_ADC_Start_IT+0x194>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d015      	beq.n	8001f3a <HAL_ADC_Start_IT+0x132>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <HAL_ADC_Start_IT+0x198>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_Start_IT+0x11c>
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_ADC_Start_IT+0x190>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_ADC_Start_IT+0x19c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d129      	bne.n	8001f82 <HAL_ADC_Start_IT+0x17a>
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_ADC_Start_IT+0x190>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	d823      	bhi.n	8001f82 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11c      	bne.n	8001f82 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e013      	b.n	8001f82 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_ADC_Start_IT+0x194>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10e      	bne.n	8001f82 <HAL_ADC_Start_IT+0x17a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f80:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20000460 	.word	0x20000460
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	40012100 	.word	0x40012100
 8001fa4:	40012200 	.word	0x40012200

08001fa8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d049      	beq.n	800207e <HAL_ADC_IRQHandler+0xd6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12b      	bne.n	800206e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d127      	bne.n	800206e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0220 	bic.w	r2, r2, #32
 8002048:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd54 	bl	8000b1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0212 	mvn.w	r2, #18
 800207c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d057      	beq.n	8002160 <HAL_ADC_IRQHandler+0x1b8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d054      	beq.n	8002160 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d139      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12b      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d124      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11d      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d119      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800212a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa9d 	bl	8002690 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f06f 020c 	mvn.w	r2, #12
 800215e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d017      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x21a>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d014      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f839 	bl	800222a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_ADC_IRQHandler+0x27a>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f813 	bl	800223e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0220 	mvn.w	r2, #32
 8002220:	601a      	str	r2, [r3, #0]
  }
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1c>
 800226c:	2302      	movs	r3, #2
 800226e:	e105      	b.n	800247c <HAL_ADC_ConfigChannel+0x228>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d925      	bls.n	80022cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	3b1e      	subs	r3, #30
 8002296:	2207      	movs	r2, #7
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43da      	mvns	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	400a      	ands	r2, r1
 80022a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	4603      	mov	r3, r0
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4403      	add	r3, r0
 80022be:	3b1e      	subs	r3, #30
 80022c0:	409a      	lsls	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	e022      	b.n	8002312 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	2207      	movs	r2, #7
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	400a      	ands	r2, r1
 80022ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6919      	ldr	r1, [r3, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	4603      	mov	r3, r0
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4403      	add	r3, r0
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b06      	cmp	r3, #6
 8002318:	d824      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b05      	subs	r3, #5
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b05      	subs	r3, #5
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
 8002362:	e04c      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d824      	bhi.n	80023b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b23      	subs	r3, #35	; 0x23
 800237e:	221f      	movs	r2, #31
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	4618      	mov	r0, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b23      	subs	r3, #35	; 0x23
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
 80023b4:	e023      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b41      	subs	r3, #65	; 0x41
 80023c8:	221f      	movs	r2, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b41      	subs	r3, #65	; 0x41
 80023f2:	fa00 f203 	lsl.w	r2, r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_ADC_ConfigChannel+0x234>)
 8002400:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_ADC_ConfigChannel+0x238>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d109      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1cc>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b12      	cmp	r3, #18
 8002412:	d105      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_ADC_ConfigChannel+0x238>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d123      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x21e>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b10      	cmp	r3, #16
 8002430:	d003      	beq.n	800243a <HAL_ADC_ConfigChannel+0x1e6>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b11      	cmp	r3, #17
 8002438:	d11b      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d111      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_ADC_ConfigChannel+0x23c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_ADC_ConfigChannel+0x240>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	0c9a      	lsrs	r2, r3, #18
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002464:	e002      	b.n	800246c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3b01      	subs	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40012300 	.word	0x40012300
 800248c:	40012000 	.word	0x40012000
 8002490:	20000460 	.word	0x20000460
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <ADC_Init+0x1f0>)
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	021a      	lsls	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <ADC_Init+0x1f4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e00f      	b.n	8002596 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0202 	bic.w	r2, r2, #2
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	3b01      	subs	r3, #1
 80025f0:	035a      	lsls	r2, r3, #13
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	3b01      	subs	r3, #1
 8002628:	051a      	lsls	r2, r3, #20
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	025a      	lsls	r2, r3, #9
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	029a      	lsls	r2, r3, #10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	0f000001 	.word	0x0f000001

08002690 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff4c 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002826:	f7ff ff61 	bl	80026ec <__NVIC_GetPriorityGrouping>
 800282a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff ffb1 	bl	8002798 <NVIC_EncodePriority>
 8002836:	4602      	mov	r2, r0
 8002838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff80 	bl	8002744 <__NVIC_SetPriority>
}
 8002844:	bf00      	nop
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff54 	bl	8002708 <__NVIC_EnableIRQ>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00c      	b.n	80028a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2205      	movs	r2, #5
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e16b      	b.n	8002ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 815a 	bne.w	8002b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d00b      	beq.n	8002906 <HAL_GPIO_Init+0x5a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028fa:	2b11      	cmp	r3, #17
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b12      	cmp	r3, #18
 8002904:	d130      	bne.n	8002968 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0201 	and.w	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0xfc>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b12      	cmp	r3, #18
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b4 	beq.w	8002b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_GPIO_Init+0x308>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	; (8002bb4 <HAL_GPIO_Init+0x308>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_GPIO_Init+0x308>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_GPIO_Init+0x314>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_GPIO_Init+0x318>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_GPIO_Init+0x31c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_GPIO_Init+0x320>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_GPIO_Init+0x324>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <HAL_GPIO_Init+0x328>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x20e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <HAL_GPIO_Init+0x32c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20a>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00e      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae4:	4934      	ldr	r1, [pc, #208]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b16:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f ae90 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3724      	adds	r7, #36	; 0x24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40021400 	.word	0x40021400
 8002bd4:	40021800 	.word	0x40021800
 8002bd8:	40021c00 	.word	0x40021c00
 8002bdc:	40013c00 	.word	0x40013c00

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bfc:	e003      	b.n	8002c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	041a      	lsls	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd ff52 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fa42 	bl	80070e4 <USB_GetMode>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f040 80f1 	bne.w	8002e4a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fa26 	bl	80070be <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80e7 	beq.w	8002e48 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 fa1d 	bl	80070be <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c8e:	d104      	bne.n	8002c9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 fa0d 	bl	80070be <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cae:	d104      	bne.n	8002cba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 f9fd 	bl	80070be <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cce:	d104      	bne.n	8002cda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 f9ed 	bl	80070be <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d103      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 f9df 	bl	80070be <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0a:	d117      	bne.n	8002d3c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f007 fdc0 	bl	800a8a6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f004 f9e7 	bl	8007100 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 f9bc 	bl	80070be <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d102      	bne.n	8002d58 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 f874 	bl	8003e40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 f9ae 	bl	80070be <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d106      	bne.n	8002d7a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f007 fd7e 	bl	800a86e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2208      	movs	r2, #8
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 f99d 	bl	80070be <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8e:	d138      	bne.n	8002e02 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 fa26 	bl	80071e6 <USB_HC_ReadInterrupt>
 8002d9a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e025      	b.n	8002dee <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d018      	beq.n	8002de8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d106      	bne.n	8002ddc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f87b 	bl	8002ed0 <HCD_HC_IN_IRQHandler>
 8002dda:	e005      	b.n	8002de8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fc0b 	bl	80035fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3d4      	bcc.n	8002da2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f004 f959 	bl	80070be <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d101      	bne.n	8002e1a <HAL_HCD_IRQHandler+0x1d6>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_HCD_IRQHandler+0x1d8>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d014      	beq.n	8002e4a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 ff59 	bl	8003ce8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0210 	orr.w	r2, r2, #16
 8002e44:	619a      	str	r2, [r3, #24]
 8002e46:	e000      	b.n	8002e4a <HAL_HCD_IRQHandler+0x206>
      return;
 8002e48:	bf00      	nop
    }
  }
}
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_HCD_Start+0x16>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e013      	b.n	8002e8e <HAL_HCD_Start+0x3e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 f890 	bl	8006f98 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f978 	bl	8007174 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_HCD_Stop+0x16>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e00d      	b.n	8002ec8 <HAL_HCD_Stop+0x32>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 faa4 	bl	8007406 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d119      	bne.n	8002f34 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2304      	movs	r3, #4
 8002f10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	60d3      	str	r3, [r2, #12]
 8002f32:	e095      	b.n	8003060 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d109      	bne.n	8002f5e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2320      	movs	r3, #32
 8002f5a:	6093      	str	r3, [r2, #8]
 8002f5c:	e080      	b.n	8003060 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d134      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	335d      	adds	r3, #93	; 0x5d
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2308      	movs	r3, #8
 8002fca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 f916 	bl	8007208 <USB_HC_Halt>
 8002fdc:	e040      	b.n	8003060 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d134      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	0151      	lsls	r1, r2, #5
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	440a      	add	r2, r1
 800300c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f004 f8f1 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	2310      	movs	r3, #16
 8003036:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	335d      	adds	r3, #93	; 0x5d
 8003048:	2208      	movs	r2, #8
 800304a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003076:	d122      	bne.n	80030be <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	0151      	lsls	r1, r2, #5
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	440a      	add	r2, r1
 800308e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 f8b0 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030bc:	e29b      	b.n	80035f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 80c1 	bne.w	8003258 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01b      	beq.n	8003116 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3348      	adds	r3, #72	; 0x48
 80030ee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	0159      	lsls	r1, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003102:	1ad1      	subs	r1, r2, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4403      	add	r3, r0
 8003112:	334c      	adds	r3, #76	; 0x4c
 8003114:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	335d      	adds	r3, #93	; 0x5d
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3358      	adds	r3, #88	; 0x58
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	461a      	mov	r2, r3
 800314c:	2301      	movs	r3, #1
 800314e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	333f      	adds	r3, #63	; 0x3f
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	333f      	adds	r3, #63	; 0x3f
 8003176:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003178:	2b02      	cmp	r3, #2
 800317a:	d121      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	0151      	lsls	r1, r2, #5
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	440a      	add	r2, r1
 8003192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 f82e 	bl	8007208 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	2310      	movs	r3, #16
 80031bc:	6093      	str	r3, [r2, #8]
 80031be:	e034      	b.n	800322a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	333f      	adds	r3, #63	; 0x3f
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d129      	bne.n	800322a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	0151      	lsls	r1, r2, #5
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	440a      	add	r2, r1
 80031ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	4601      	mov	r1, r0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f007 fb4c 	bl	800a8c2 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3350      	adds	r3, #80	; 0x50
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2d8      	uxtb	r0, r3
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	3350      	adds	r3, #80	; 0x50
 8003252:	4602      	mov	r2, r0
 8003254:	701a      	strb	r2, [r3, #0]
}
 8003256:	e1ce      	b.n	80035f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	f040 80f1 	bne.w	8003452 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	0151      	lsls	r1, r2, #5
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	440a      	add	r2, r1
 8003286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328a:	f023 0302 	bic.w	r3, r3, #2
 800328e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	335d      	adds	r3, #93	; 0x5d
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10a      	bne.n	80032bc <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e0b0      	b.n	800341e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335d      	adds	r3, #93	; 0x5d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10a      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	335c      	adds	r3, #92	; 0x5c
 80032e2:	2205      	movs	r2, #5
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e09a      	b.n	800341e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335d      	adds	r3, #93	; 0x5d
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d00a      	beq.n	8003314 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	335d      	adds	r3, #93	; 0x5d
 800330e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003310:	2b08      	cmp	r3, #8
 8003312:	d156      	bne.n	80033c2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	3358      	adds	r3, #88	; 0x58
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	1c59      	adds	r1, r3, #1
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4403      	add	r3, r0
 8003336:	3358      	adds	r3, #88	; 0x58
 8003338:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	3358      	adds	r3, #88	; 0x58
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d914      	bls.n	800337a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	3358      	adds	r3, #88	; 0x58
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	335c      	adds	r3, #92	; 0x5c
 8003374:	2204      	movs	r2, #4
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e009      	b.n	800338e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	335c      	adds	r3, #92	; 0x5c
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033a4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e02d      	b.n	800341e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	335d      	adds	r3, #93	; 0x5d
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d122      	bne.n	800341e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	335c      	adds	r3, #92	; 0x5c
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003402:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	461a      	mov	r2, r3
 800342c:	2302      	movs	r3, #2
 800342e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	b2d8      	uxtb	r0, r3
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4601      	mov	r1, r0
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f007 fa39 	bl	800a8c2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003450:	e0d1      	b.n	80035f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d13e      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	440a      	add	r2, r1
 800347e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	3358      	adds	r3, #88	; 0x58
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4403      	add	r3, r0
 80034aa:	3358      	adds	r3, #88	; 0x58
 80034ac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	335d      	adds	r3, #93	; 0x5d
 80034be:	2206      	movs	r2, #6
 80034c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fe9b 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	461a      	mov	r2, r3
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	e087      	b.n	80035f6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d17c      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	333f      	adds	r3, #63	; 0x3f
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d122      	bne.n	8003558 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	3358      	adds	r3, #88	; 0x58
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	0151      	lsls	r1, r2, #5
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	440a      	add	r2, r1
 800353c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fe59 	bl	8007208 <USB_HC_Halt>
 8003556:	e045      	b.n	80035e4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	333f      	adds	r3, #63	; 0x3f
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	333f      	adds	r3, #63	; 0x3f
 800357e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003580:	2b02      	cmp	r3, #2
 8003582:	d12f      	bne.n	80035e4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	3358      	adds	r3, #88	; 0x58
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d121      	bne.n	80035e4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	335d      	adds	r3, #93	; 0x5d
 80035b0:	2203      	movs	r2, #3
 80035b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fe12 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	2310      	movs	r3, #16
 80035f4:	6093      	str	r3, [r2, #8]
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d119      	bne.n	8003662 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2304      	movs	r3, #4
 800363e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	440a      	add	r2, r1
 8003656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003660:	e33e      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b20      	cmp	r3, #32
 8003676:	d141      	bne.n	80036fc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2320      	movs	r3, #32
 8003688:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	333d      	adds	r3, #61	; 0x3d
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	f040 831f 	bne.w	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	333d      	adds	r3, #61	; 0x3d
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	335c      	adds	r3, #92	; 0x5c
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fd87 	bl	8007208 <USB_HC_Halt>
}
 80036fa:	e2f1      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d13f      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	335d      	adds	r3, #93	; 0x5d
 8003722:	2204      	movs	r2, #4
 8003724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	333d      	adds	r3, #61	; 0x3d
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3358      	adds	r3, #88	; 0x58
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	440a      	add	r2, r1
 8003764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fd45 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	461a      	mov	r2, r3
 800378c:	2340      	movs	r3, #64	; 0x40
 800378e:	6093      	str	r3, [r2, #8]
}
 8003790:	e2a6      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d122      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fd17 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ec:	6093      	str	r3, [r2, #8]
}
 80037ee:	e277      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d135      	bne.n	8003872 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3358      	adds	r3, #88	; 0x58
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	440a      	add	r2, r1
 8003830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fcdf 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	461a      	mov	r2, r3
 8003858:	2301      	movs	r3, #1
 800385a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	335d      	adds	r3, #93	; 0x5d
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
}
 8003870:	e236      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b08      	cmp	r3, #8
 8003886:	d12b      	bne.n	80038e0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	461a      	mov	r2, r3
 8003896:	2308      	movs	r3, #8
 8003898:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 fc9f 	bl	8007208 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	335d      	adds	r3, #93	; 0x5d
 80038da:	2205      	movs	r2, #5
 80038dc:	701a      	strb	r2, [r3, #0]
}
 80038de:	e1ff      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d155      	bne.n	80039a2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	3358      	adds	r3, #88	; 0x58
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	335d      	adds	r3, #93	; 0x5d
 800391a:	2203      	movs	r2, #3
 800391c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	333d      	adds	r3, #61	; 0x3d
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d114      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	440b      	add	r3, r1
 8003958:	333d      	adds	r3, #61	; 0x3d
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	440a      	add	r2, r1
 8003974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fc3d 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2310      	movs	r3, #16
 800399e:	6093      	str	r3, [r2, #8]
}
 80039a0:	e19e      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d12b      	bne.n	8003a10 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fc10 	bl	8007208 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	335d      	adds	r3, #93	; 0x5d
 80039f8:	2206      	movs	r2, #6
 80039fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	6093      	str	r3, [r2, #8]
}
 8003a0e:	e167      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d135      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fbd8 	bl	8007208 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2310      	movs	r3, #16
 8003a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	335d      	adds	r3, #93	; 0x5d
 8003a8e:	2208      	movs	r2, #8
 8003a90:	701a      	strb	r2, [r3, #0]
}
 8003a92:	e125      	b.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f040 811a 	bne.w	8003ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac6:	f023 0302 	bic.w	r3, r3, #2
 8003aca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	335d      	adds	r3, #93	; 0x5d
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d137      	bne.n	8003b52 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	335c      	adds	r3, #92	; 0x5c
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	333f      	adds	r3, #63	; 0x3f
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d00b      	beq.n	8003b24 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	f040 80c5 	bne.w	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	3351      	adds	r3, #81	; 0x51
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	f083 0301 	eor.w	r3, r3, #1
 8003b3a:	b2d8      	uxtb	r0, r3
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	3351      	adds	r3, #81	; 0x51
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e0ad      	b.n	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	335d      	adds	r3, #93	; 0x5d
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d10a      	bne.n	8003b7e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	335c      	adds	r3, #92	; 0x5c
 8003b78:	2202      	movs	r2, #2
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e097      	b.n	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	335d      	adds	r3, #93	; 0x5d
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d10a      	bne.n	8003baa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	335c      	adds	r3, #92	; 0x5c
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e081      	b.n	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	335d      	adds	r3, #93	; 0x5d
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d10a      	bne.n	8003bd6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e06b      	b.n	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	335d      	adds	r3, #93	; 0x5d
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d00a      	beq.n	8003c02 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	335d      	adds	r3, #93	; 0x5d
 8003bfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d155      	bne.n	8003cae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3358      	adds	r3, #88	; 0x58
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4403      	add	r3, r0
 8003c24:	3358      	adds	r3, #88	; 0x58
 8003c26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	3358      	adds	r3, #88	; 0x58
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d914      	bls.n	8003c68 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	440b      	add	r3, r1
 8003c4c:	3358      	adds	r3, #88	; 0x58
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	440b      	add	r3, r1
 8003c60:	335c      	adds	r3, #92	; 0x5c
 8003c62:	2204      	movs	r2, #4
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e009      	b.n	8003c7c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	335c      	adds	r3, #92	; 0x5c
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	b2d8      	uxtb	r0, r3
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4601      	mov	r1, r0
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f006 fdf1 	bl	800a8c2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ce0:	bf00      	nop
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	0c5b      	lsrs	r3, r3, #17
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d003      	beq.n	8003d2c <HCD_RXQLVL_IRQHandler+0x44>
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	f000 8082 	beq.w	8003e2e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d2a:	e083      	b.n	8003e34 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d07f      	beq.n	8003e32 <HCD_RXQLVL_IRQHandler+0x14a>
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	3344      	adds	r3, #68	; 0x44
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d074      	beq.n	8003e32 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3344      	adds	r3, #68	; 0x44
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	b292      	uxth	r2, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f003 f982 	bl	800706c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	3344      	adds	r3, #68	; 0x44
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	18d1      	adds	r1, r2, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4403      	add	r3, r0
 8003d8c:	3344      	adds	r3, #68	; 0x44
 8003d8e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	334c      	adds	r3, #76	; 0x4c
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	18d1      	adds	r1, r2, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4403      	add	r3, r0
 8003db4:	334c      	adds	r3, #76	; 0x4c
 8003db6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HCD_RXQLVL_IRQHandler+0x154>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d031      	beq.n	8003e32 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3350      	adds	r3, #80	; 0x50
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2d8      	uxtb	r0, r3
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	3350      	adds	r3, #80	; 0x50
 8003e28:	4602      	mov	r2, r0
 8003e2a:	701a      	strb	r2, [r3, #0]
      break;
 8003e2c:	e001      	b.n	8003e32 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003e32:	bf00      	nop
  }
}
 8003e34:	bf00      	nop
 8003e36:	3728      	adds	r7, #40	; 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	1ff80000 	.word	0x1ff80000

08003e40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d113      	bne.n	8003ea0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10a      	bne.n	8003e98 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003e90:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 fcf9 	bl	800a88a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d147      	bne.n	8003f3a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0308 	orr.w	r3, r3, #8
 8003eb0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d129      	bne.n	8003f10 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d113      	bne.n	8003eec <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003eca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ece:	d106      	bne.n	8003ede <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 f912 	bl	8007100 <USB_InitFSLSPClkSel>
 8003edc:	e011      	b.n	8003f02 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 f90b 	bl	8007100 <USB_InitFSLSPClkSel>
 8003eea:	e00a      	b.n	8003f02 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003efa:	461a      	mov	r2, r3
 8003efc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f00:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f006 fcef 	bl	800a8e6 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f006 fcbe 	bl	800a88a <HAL_HCD_Connect_Callback>
 8003f0e:	e014      	b.n	8003f3a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f006 fcf6 	bl	800a902 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f28:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d103      	bne.n	8003f4c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f043 0320 	orr.w	r3, r3, #32
 8003f4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e11f      	b.n	80041b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc fcc8 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f001 f9de 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a7b      	ldr	r2, [pc, #492]	; (80041bc <HAL_I2C_Init+0x25c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d807      	bhi.n	8003fe4 <HAL_I2C_Init+0x84>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_I2C_Init+0x260>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e006      	b.n	8003ff2 <HAL_I2C_Init+0x92>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <HAL_I2C_Init+0x264>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0db      	b.n	80041b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a72      	ldr	r2, [pc, #456]	; (80041c8 <HAL_I2C_Init+0x268>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0c9b      	lsrs	r3, r3, #18
 8004004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a64      	ldr	r2, [pc, #400]	; (80041bc <HAL_I2C_Init+0x25c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d802      	bhi.n	8004034 <HAL_I2C_Init+0xd4>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3301      	adds	r3, #1
 8004032:	e009      	b.n	8004048 <HAL_I2C_Init+0xe8>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	4a63      	ldr	r2, [pc, #396]	; (80041cc <HAL_I2C_Init+0x26c>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	3301      	adds	r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	430b      	orrs	r3, r1
 800404e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800405a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4956      	ldr	r1, [pc, #344]	; (80041bc <HAL_I2C_Init+0x25c>)
 8004064:	428b      	cmp	r3, r1
 8004066:	d80d      	bhi.n	8004084 <HAL_I2C_Init+0x124>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1e59      	subs	r1, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fbb1 f3f3 	udiv	r3, r1, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	2b04      	cmp	r3, #4
 800407e:	bf38      	it	cc
 8004080:	2304      	movcc	r3, #4
 8004082:	e04f      	b.n	8004124 <HAL_I2C_Init+0x1c4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <HAL_I2C_Init+0x150>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1e58      	subs	r0, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e012      	b.n	80040d6 <HAL_I2C_Init+0x176>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1e58      	subs	r0, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	0099      	lsls	r1, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c6:	3301      	adds	r3, #1
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Init+0x17e>
 80040da:	2301      	movs	r3, #1
 80040dc:	e022      	b.n	8004124 <HAL_I2C_Init+0x1c4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10e      	bne.n	8004104 <HAL_I2C_Init+0x1a4>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1e58      	subs	r0, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	440b      	add	r3, r1
 80040f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004102:	e00f      	b.n	8004124 <HAL_I2C_Init+0x1c4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e58      	subs	r0, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	0099      	lsls	r1, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	3301      	adds	r3, #1
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	6809      	ldr	r1, [r1, #0]
 8004128:	4313      	orrs	r3, r2
 800412a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6911      	ldr	r1, [r2, #16]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	430b      	orrs	r3, r1
 8004166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	000186a0 	.word	0x000186a0
 80041c0:	001e847f 	.word	0x001e847f
 80041c4:	003d08ff 	.word	0x003d08ff
 80041c8:	431bde83 	.word	0x431bde83
 80041cc:	10624dd3 	.word	0x10624dd3

080041d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e128      	b.n	8004434 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a90      	ldr	r2, [pc, #576]	; (800443c <HAL_I2S_Init+0x26c>)
 80041fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc fc05 	bl	8000a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2202      	movs	r2, #2
 8004224:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d060      	beq.n	80042f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004236:	2310      	movs	r3, #16
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e001      	b.n	8004240 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b20      	cmp	r3, #32
 8004246:	d802      	bhi.n	800424e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800424e:	2001      	movs	r0, #1
 8004250:	f001 f9d4 	bl	80055fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004254:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425e:	d125      	bne.n	80042ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	3305      	adds	r3, #5
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e01f      	b.n	80042ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	fbb2 f2f3 	udiv	r2, r2, r3
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	3305      	adds	r3, #5
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	e00e      	b.n	80042ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	3305      	adds	r3, #5
 80042c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4a5c      	ldr	r2, [pc, #368]	; (8004440 <HAL_I2S_Init+0x270>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80042f0:	2302      	movs	r3, #2
 80042f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d902      	bls.n	8004304 <HAL_I2S_Init+0x134>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2bff      	cmp	r3, #255	; 0xff
 8004302:	d907      	bls.n	8004314 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f043 0210 	orr.w	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e08f      	b.n	8004434 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	ea42 0103 	orr.w	r1, r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	430a      	orrs	r2, r1
 8004326:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004332:	f023 030f 	bic.w	r3, r3, #15
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6851      	ldr	r1, [r2, #4]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6892      	ldr	r2, [r2, #8]
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68d2      	ldr	r2, [r2, #12]
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6992      	ldr	r2, [r2, #24]
 800434a:	430a      	orrs	r2, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004356:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d161      	bne.n	8004424 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a38      	ldr	r2, [pc, #224]	; (8004444 <HAL_I2S_Init+0x274>)
 8004364:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a37      	ldr	r2, [pc, #220]	; (8004448 <HAL_I2S_Init+0x278>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d101      	bne.n	8004374 <HAL_I2S_Init+0x1a4>
 8004370:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_I2S_Init+0x27c>)
 8004372:	e001      	b.n	8004378 <HAL_I2S_Init+0x1a8>
 8004374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	4932      	ldr	r1, [pc, #200]	; (8004448 <HAL_I2S_Init+0x278>)
 8004380:	428a      	cmp	r2, r1
 8004382:	d101      	bne.n	8004388 <HAL_I2S_Init+0x1b8>
 8004384:	4a31      	ldr	r2, [pc, #196]	; (800444c <HAL_I2S_Init+0x27c>)
 8004386:	e001      	b.n	800438c <HAL_I2S_Init+0x1bc>
 8004388:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800438c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004390:	f023 030f 	bic.w	r3, r3, #15
 8004394:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <HAL_I2S_Init+0x278>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_I2S_Init+0x1d4>
 80043a0:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_I2S_Init+0x27c>)
 80043a2:	e001      	b.n	80043a8 <HAL_I2S_Init+0x1d8>
 80043a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a8:	2202      	movs	r2, #2
 80043aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_I2S_Init+0x278>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_I2S_Init+0x1ea>
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_I2S_Init+0x27c>)
 80043b8:	e001      	b.n	80043be <HAL_I2S_Init+0x1ee>
 80043ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ca:	d003      	beq.n	80043d4 <HAL_I2S_Init+0x204>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e001      	b.n	80043e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	b299      	uxth	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80043f6:	4303      	orrs	r3, r0
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	430b      	orrs	r3, r1
 80043fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80043fe:	4313      	orrs	r3, r2
 8004400:	b29a      	uxth	r2, r3
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	4313      	orrs	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800440c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <HAL_I2S_Init+0x278>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <HAL_I2S_Init+0x24c>
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_I2S_Init+0x27c>)
 800441a:	e001      	b.n	8004420 <HAL_I2S_Init+0x250>
 800441c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004420:	897a      	ldrh	r2, [r7, #10]
 8004422:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08004547 	.word	0x08004547
 8004440:	cccccccd 	.word	0xcccccccd
 8004444:	0800465d 	.word	0x0800465d
 8004448:	40003800 	.word	0x40003800
 800444c:	40003400 	.word	0x40003400

08004450 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffb8 	bl	8004450 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	b292      	uxth	r2, r2
 80044fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10e      	bne.n	800453e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800452e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff93 	bl	8004464 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b04      	cmp	r3, #4
 8004560:	d13a      	bne.n	80045d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d109      	bne.n	8004580 <I2S_IRQHandler+0x3a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d102      	bne.n	8004580 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffb4 	bl	80044e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d126      	bne.n	80045d8 <I2S_IRQHandler+0x92>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b20      	cmp	r3, #32
 8004596:	d11f      	bne.n	80045d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff ff50 	bl	8004478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d136      	bne.n	8004652 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d109      	bne.n	8004602 <I2S_IRQHandler+0xbc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d102      	bne.n	8004602 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff45 	bl	800448c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b08      	cmp	r3, #8
 800460a:	d122      	bne.n	8004652 <I2S_IRQHandler+0x10c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b20      	cmp	r3, #32
 8004618:	d11b      	bne.n	8004652 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004628:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	f043 0204 	orr.w	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff13 	bl	8004478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4aa2      	ldr	r2, [pc, #648]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004676:	4ba2      	ldr	r3, [pc, #648]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004678:	e001      	b.n	800467e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800467a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a9b      	ldr	r2, [pc, #620]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004694:	4b9a      	ldr	r3, [pc, #616]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004696:	e001      	b.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d004      	beq.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 8099 	bne.w	80047e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d107      	bne.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f925 	bl	8004918 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f9c8 	bl	8004a78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d13a      	bne.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d035      	beq.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a7e      	ldr	r2, [pc, #504]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004706:	4b7e      	ldr	r3, [pc, #504]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004708:	e001      	b.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800470a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4979      	ldr	r1, [pc, #484]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004716:	428b      	cmp	r3, r1
 8004718:	d101      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800471a:	4b79      	ldr	r3, [pc, #484]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800471c:	e001      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004726:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004736:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fe88 	bl	8004478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b08      	cmp	r3, #8
 8004770:	f040 80be 	bne.w	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80b8 	beq.w	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800478e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a59      	ldr	r2, [pc, #356]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d101      	bne.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800479a:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800479c:	e001      	b.n	80047a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800479e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4954      	ldr	r1, [pc, #336]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047aa:	428b      	cmp	r3, r1
 80047ac:	d101      	bne.n	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047b0:	e001      	b.n	80047b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fe4a 	bl	8004478 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047e4:	e084      	b.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d107      	bne.n	8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8be 	bl	800497c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8fd 	bl	8004a14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d12f      	bne.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d02a      	beq.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800483c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004848:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800484a:	e001      	b.n	8004850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800484c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4929      	ldr	r1, [pc, #164]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004858:	428b      	cmp	r3, r1
 800485a:	d101      	bne.n	8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800485e:	e001      	b.n	8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004868:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	f043 0202 	orr.w	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fdfa 	bl	8004478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d131      	bne.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02c      	beq.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048a4:	e001      	b.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4912      	ldr	r1, [pc, #72]	; (80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048b2:	428b      	cmp	r3, r1
 80048b4:	d101      	bne.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048b8:	e001      	b.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80048ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fdc5 	bl	8004478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ee:	e000      	b.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048f0:	bf00      	nop
}
 80048f2:	bf00      	nop
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40003800 	.word	0x40003800
 8004900:	40003400 	.word	0x40003400

08004904 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c99      	adds	r1, r3, #2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6251      	str	r1, [r2, #36]	; 0x24
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d113      	bne.n	8004972 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004958:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ffc9 	bl	8004904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c99      	adds	r1, r3, #2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6251      	str	r1, [r2, #36]	; 0x24
 800498e:	8819      	ldrh	r1, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <I2SEx_TxISR_I2SExt+0x90>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <I2SEx_TxISR_I2SExt+0x22>
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <I2SEx_TxISR_I2SExt+0x94>)
 800499c:	e001      	b.n	80049a2 <I2SEx_TxISR_I2SExt+0x26>
 800499e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a2:	460a      	mov	r2, r1
 80049a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d121      	bne.n	8004a02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <I2SEx_TxISR_I2SExt+0x90>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <I2SEx_TxISR_I2SExt+0x50>
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <I2SEx_TxISR_I2SExt+0x94>)
 80049ca:	e001      	b.n	80049d0 <I2SEx_TxISR_I2SExt+0x54>
 80049cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	490d      	ldr	r1, [pc, #52]	; (8004a0c <I2SEx_TxISR_I2SExt+0x90>)
 80049d8:	428b      	cmp	r3, r1
 80049da:	d101      	bne.n	80049e0 <I2SEx_TxISR_I2SExt+0x64>
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <I2SEx_TxISR_I2SExt+0x94>)
 80049de:	e001      	b.n	80049e4 <I2SEx_TxISR_I2SExt+0x68>
 80049e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff81 	bl	8004904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40003800 	.word	0x40003800
 8004a10:	40003400 	.word	0x40003400

08004a14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68d8      	ldr	r0, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	1c99      	adds	r1, r3, #2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a2c:	b282      	uxth	r2, r0
 8004a2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff ff4a 	bl	8004904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <I2SEx_RxISR_I2SExt+0x90>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <I2SEx_RxISR_I2SExt+0x16>
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <I2SEx_RxISR_I2SExt+0x94>)
 8004a8c:	e001      	b.n	8004a92 <I2SEx_RxISR_I2SExt+0x1a>
 8004a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a92:	68d8      	ldr	r0, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	1c99      	adds	r1, r3, #2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a9e:	b282      	uxth	r2, r0
 8004aa0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d121      	bne.n	8004afe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <I2SEx_RxISR_I2SExt+0x90>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <I2SEx_RxISR_I2SExt+0x50>
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <I2SEx_RxISR_I2SExt+0x94>)
 8004ac6:	e001      	b.n	8004acc <I2SEx_RxISR_I2SExt+0x54>
 8004ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	490d      	ldr	r1, [pc, #52]	; (8004b08 <I2SEx_RxISR_I2SExt+0x90>)
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	d101      	bne.n	8004adc <I2SEx_RxISR_I2SExt+0x64>
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <I2SEx_RxISR_I2SExt+0x94>)
 8004ada:	e001      	b.n	8004ae0 <I2SEx_RxISR_I2SExt+0x68>
 8004adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff03 	bl	8004904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40003800 	.word	0x40003800
 8004b0c:	40003400 	.word	0x40003400

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e25b      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d075      	beq.n	8004c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2e:	4ba3      	ldr	r3, [pc, #652]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3a:	4ba0      	ldr	r3, [pc, #640]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d112      	bne.n	8004b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4b9d      	ldr	r3, [pc, #628]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b52:	d10b      	bne.n	8004b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	4b99      	ldr	r3, [pc, #612]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x108>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d157      	bne.n	8004c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e236      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_OscConfig+0x74>
 8004b76:	4b91      	ldr	r3, [pc, #580]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a90      	ldr	r2, [pc, #576]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e01d      	b.n	8004bc0 <HAL_RCC_OscConfig+0xb0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x98>
 8004b8e:	4b8b      	ldr	r3, [pc, #556]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a8a      	ldr	r2, [pc, #552]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a87      	ldr	r2, [pc, #540]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xb0>
 8004ba8:	4b84      	ldr	r3, [pc, #528]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a83      	ldr	r2, [pc, #524]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a80      	ldr	r2, [pc, #512]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f8ac 	bl	8001d24 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd f8a8 	bl	8001d24 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1fb      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xc0>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd f898 	bl	8001d24 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fd f894 	bl	8001d24 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1e7      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xe8>
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c26:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c32:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d11c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	4b5c      	ldr	r3, [pc, #368]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x152>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1bb      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4b56      	ldr	r3, [pc, #344]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4952      	ldr	r1, [pc, #328]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	e03a      	b.n	8004cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <HAL_RCC_OscConfig+0x2b0>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fd f84d 	bl	8001d24 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fd f849 	bl	8001d24 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e19c      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4940      	ldr	r1, [pc, #256]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	e015      	b.n	8004cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc2:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCC_OscConfig+0x2b0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd f82c 	bl	8001d24 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f828 	bl	8001d24 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e17b      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d030      	beq.n	8004d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_RCC_OscConfig+0x2b4>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd f80c 	bl	8001d24 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d10:	f7fd f808 	bl	8001d24 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e15b      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x200>
 8004d2e:	e015      	b.n	8004d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_OscConfig+0x2b4>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d36:	f7fc fff5 	bl	8001d24 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3e:	f7fc fff1 	bl	8001d24 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e144      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f0      	bne.n	8004d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 80a0 	beq.w	8004eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x2b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d121      	bne.n	8004dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RCC_OscConfig+0x2b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a07      	ldr	r2, [pc, #28]	; (8004dc8 <HAL_RCC_OscConfig+0x2b8>)
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db2:	f7fc ffb7 	bl	8001d24 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	e011      	b.n	8004dde <HAL_RCC_OscConfig+0x2ce>
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	42470000 	.word	0x42470000
 8004dc4:	42470e80 	.word	0x42470e80
 8004dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dcc:	f7fc ffaa 	bl	8001d24 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0fd      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x4d4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
 8004df2:	4b7d      	ldr	r3, [pc, #500]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a7c      	ldr	r2, [pc, #496]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfe:	e01c      	b.n	8004e3a <HAL_RCC_OscConfig+0x32a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d10c      	bne.n	8004e22 <HAL_RCC_OscConfig+0x312>
 8004e08:	4b77      	ldr	r3, [pc, #476]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a76      	ldr	r2, [pc, #472]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e0e:	f043 0304 	orr.w	r3, r3, #4
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	4b74      	ldr	r3, [pc, #464]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a73      	ldr	r2, [pc, #460]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	e00b      	b.n	8004e3a <HAL_RCC_OscConfig+0x32a>
 8004e22:	4b71      	ldr	r3, [pc, #452]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a70      	ldr	r2, [pc, #448]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	4b6e      	ldr	r3, [pc, #440]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a6d      	ldr	r2, [pc, #436]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d015      	beq.n	8004e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fc ff6f 	bl	8001d24 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fc ff6b 	bl	8001d24 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e0bc      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e60:	4b61      	ldr	r3, [pc, #388]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ee      	beq.n	8004e4a <HAL_RCC_OscConfig+0x33a>
 8004e6c:	e014      	b.n	8004e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6e:	f7fc ff59 	bl	8001d24 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fc ff55 	bl	8001d24 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0a6      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8c:	4b56      	ldr	r3, [pc, #344]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1ee      	bne.n	8004e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9e:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a51      	ldr	r2, [pc, #324]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8092 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb4:	4b4c      	ldr	r3, [pc, #304]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 030c 	and.w	r3, r3, #12
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d05c      	beq.n	8004f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d141      	bne.n	8004f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <HAL_RCC_OscConfig+0x4dc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fc ff29 	bl	8001d24 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fc ff25 	bl	8001d24 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e078      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	019b      	lsls	r3, r3, #6
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	4933      	ldr	r1, [pc, #204]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1e:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_RCC_OscConfig+0x4dc>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fc fefe 	bl	8001d24 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fc fefa 	bl	8001d24 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04d      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x41c>
 8004f4a:	e045      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_OscConfig+0x4dc>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fc fee7 	bl	8001d24 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fc fee3 	bl	8001d24 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e036      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x44a>
 8004f78:	e02e      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e029      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f86:	4b18      	ldr	r3, [pc, #96]	; (8004fe8 <HAL_RCC_OscConfig+0x4d8>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d11c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d115      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fae:	4013      	ands	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	42470060 	.word	0x42470060

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fc fe20 	bl	8001d24 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fc fe1c 	bl	8001d24 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4601      	mov	r1, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5cd3      	ldrb	r3, [r2, r3]
 800518a:	fa21 f303 	lsr.w	r3, r1, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fc fa32 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800b2f0 	.word	0x0800b2f0
 80051b4:	20000460 	.word	0x20000460
 80051b8:	20000464 	.word	0x20000464

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	2300      	movs	r3, #0
 80051cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d2:	4b63      	ldr	r3, [pc, #396]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d007      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x32>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d008      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x38>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 80b4 	bne.w	8005350 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b5e      	ldr	r3, [pc, #376]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051ea:	60bb      	str	r3, [r7, #8]
       break;
 80051ec:	e0b3      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b5e      	ldr	r3, [pc, #376]	; (8005368 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051f0:	60bb      	str	r3, [r7, #8]
      break;
 80051f2:	e0b0      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fe:	4b58      	ldr	r3, [pc, #352]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04a      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b55      	ldr	r3, [pc, #340]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	ea03 0501 	and.w	r5, r3, r1
 8005220:	ea04 0602 	and.w	r6, r4, r2
 8005224:	4629      	mov	r1, r5
 8005226:	4632      	mov	r2, r6
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	0154      	lsls	r4, r2, #5
 8005232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005236:	014b      	lsls	r3, r1, #5
 8005238:	4619      	mov	r1, r3
 800523a:	4622      	mov	r2, r4
 800523c:	1b49      	subs	r1, r1, r5
 800523e:	eb62 0206 	sbc.w	r2, r2, r6
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	f04f 0400 	mov.w	r4, #0
 800524a:	0194      	lsls	r4, r2, #6
 800524c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005250:	018b      	lsls	r3, r1, #6
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	eb64 0402 	sbc.w	r4, r4, r2
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	00e2      	lsls	r2, r4, #3
 8005262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005266:	00d9      	lsls	r1, r3, #3
 8005268:	460b      	mov	r3, r1
 800526a:	4614      	mov	r4, r2
 800526c:	195b      	adds	r3, r3, r5
 800526e:	eb44 0406 	adc.w	r4, r4, r6
 8005272:	f04f 0100 	mov.w	r1, #0
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	0262      	lsls	r2, r4, #9
 800527c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005280:	0259      	lsls	r1, r3, #9
 8005282:	460b      	mov	r3, r1
 8005284:	4614      	mov	r4, r2
 8005286:	4618      	mov	r0, r3
 8005288:	4621      	mov	r1, r4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f04f 0400 	mov.w	r4, #0
 8005290:	461a      	mov	r2, r3
 8005292:	4623      	mov	r3, r4
 8005294:	f7fa ffec 	bl	8000270 <__aeabi_uldivmod>
 8005298:	4603      	mov	r3, r0
 800529a:	460c      	mov	r4, r1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e049      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a0:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	ea03 0501 	and.w	r5, r3, r1
 80052b6:	ea04 0602 	and.w	r6, r4, r2
 80052ba:	4629      	mov	r1, r5
 80052bc:	4632      	mov	r2, r6
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	0154      	lsls	r4, r2, #5
 80052c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052cc:	014b      	lsls	r3, r1, #5
 80052ce:	4619      	mov	r1, r3
 80052d0:	4622      	mov	r2, r4
 80052d2:	1b49      	subs	r1, r1, r5
 80052d4:	eb62 0206 	sbc.w	r2, r2, r6
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	0194      	lsls	r4, r2, #6
 80052e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052e6:	018b      	lsls	r3, r1, #6
 80052e8:	1a5b      	subs	r3, r3, r1
 80052ea:	eb64 0402 	sbc.w	r4, r4, r2
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052fc:	00d9      	lsls	r1, r3, #3
 80052fe:	460b      	mov	r3, r1
 8005300:	4614      	mov	r4, r2
 8005302:	195b      	adds	r3, r3, r5
 8005304:	eb44 0406 	adc.w	r4, r4, r6
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	02a2      	lsls	r2, r4, #10
 8005312:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005316:	0299      	lsls	r1, r3, #10
 8005318:	460b      	mov	r3, r1
 800531a:	4614      	mov	r4, r2
 800531c:	4618      	mov	r0, r3
 800531e:	4621      	mov	r1, r4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f04f 0400 	mov.w	r4, #0
 8005326:	461a      	mov	r2, r3
 8005328:	4623      	mov	r3, r4
 800532a:	f7fa ffa1 	bl	8000270 <__aeabi_uldivmod>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	60bb      	str	r3, [r7, #8]
      break;
 800534e:	e002      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005352:	60bb      	str	r3, [r7, #8]
      break;
 8005354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005356:	68bb      	ldr	r3, [r7, #8]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	40023800 	.word	0x40023800
 8005364:	00f42400 	.word	0x00f42400
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCC_GetHCLKFreq+0x14>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000460 	.word	0x20000460

08005384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005388:	f7ff fff0 	bl	800536c <HAL_RCC_GetHCLKFreq>
 800538c:	4601      	mov	r1, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539a:	5cd3      	ldrb	r3, [r2, r3]
 800539c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	0800b300 	.word	0x0800b300

080053ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053b0:	f7ff ffdc 	bl	800536c <HAL_RCC_GetHCLKFreq>
 80053b4:	4601      	mov	r1, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0b5b      	lsrs	r3, r3, #13
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4a03      	ldr	r2, [pc, #12]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c2:	5cd3      	ldrb	r3, [r2, r3]
 80053c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	0800b300 	.word	0x0800b300

080053d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	220f      	movs	r2, #15
 80053e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_RCC_GetClockConfig+0x5c>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0203 	and.w	r2, r3, #3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_RCC_GetClockConfig+0x5c>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <HAL_RCC_GetClockConfig+0x5c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_GetClockConfig+0x5c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_RCC_GetClockConfig+0x60>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800
 8005434:	40023c00 	.word	0x40023c00

08005438 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800545c:	2b00      	cmp	r3, #0
 800545e:	d035      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005460:	4b62      	ldr	r3, [pc, #392]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005466:	f7fc fc5d 	bl	8001d24 <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800546e:	f7fc fc59 	bl	8001d24 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e0b0      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005480:	4b5b      	ldr	r3, [pc, #364]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	019a      	lsls	r2, r3, #6
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	071b      	lsls	r3, r3, #28
 8005498:	4955      	ldr	r1, [pc, #340]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054a0:	4b52      	ldr	r3, [pc, #328]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054a6:	f7fc fc3d 	bl	8001d24 <HAL_GetTick>
 80054aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054ae:	f7fc fc39 	bl	8001d24 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e090      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054c0:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8083 	beq.w	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	4b44      	ldr	r3, [pc, #272]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	4a43      	ldr	r2, [pc, #268]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ea:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054f6:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3e      	ldr	r2, [pc, #248]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005502:	f7fc fc0f 	bl	8001d24 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fc fc0b 	bl	8001d24 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e062      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800551c:	4b35      	ldr	r3, [pc, #212]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005530:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d028      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005546:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800555c:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d114      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800556e:	f7fc fbd9 	bl	8001d24 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005574:	e00a      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005576:	f7fc fbd5 	bl	8001d24 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	4293      	cmp	r3, r2
 8005586:	d901      	bls.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e02a      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ee      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a4:	d10d      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ba:	490d      	ldr	r1, [pc, #52]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]
 80055c0:	e005      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055cc:	6093      	str	r3, [r2, #8]
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055da:	4905      	ldr	r1, [pc, #20]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	42470068 	.word	0x42470068
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000
 80055f8:	42470e40 	.word	0x42470e40

080055fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d13d      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005622:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800562a:	2b01      	cmp	r3, #1
 800562c:	d12f      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800562e:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005630:	617b      	str	r3, [r7, #20]
          break;
 8005632:	e02f      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005634:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005640:	d108      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005642:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e007      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005654:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566a:	099b      	lsrs	r3, r3, #6
 800566c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	0f1b      	lsrs	r3, r3, #28
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	617b      	str	r3, [r7, #20]
          break;
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
          break;
 8005692:	bf00      	nop
        }
      }
      break;
 8005694:	bf00      	nop
    }
  }
  return frequency;
 8005696:	697b      	ldr	r3, [r7, #20]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00bb8000 	.word	0x00bb8000
 80056ac:	007a1200 	.word	0x007a1200
 80056b0:	00f42400 	.word	0x00f42400

080056b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e056      	b.n	8005774 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fb fee7 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	ea42 0103 	orr.w	r1, r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 0104 	and.w	r1, r3, #4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005762:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_SPI_Transmit+0x22>
 800579a:	2302      	movs	r3, #2
 800579c:	e11e      	b.n	80059dc <HAL_SPI_Transmit+0x260>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a6:	f7fc fabd 	bl	8001d24 <HAL_GetTick>
 80057aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c0:	e103      	b.n	80059ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x52>
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d2:	e0fa      	b.n	80059ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2203      	movs	r2, #3
 80057d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d107      	bne.n	800582c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d007      	beq.n	800584a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d14b      	bne.n	80058ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_Transmit+0xe6>
 800585c:	8afb      	ldrh	r3, [r7, #22]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d13e      	bne.n	80058e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	881a      	ldrh	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005886:	e02b      	b.n	80058e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d112      	bne.n	80058bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	881a      	ldrh	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80058ba:	e011      	b.n	80058e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058bc:	f7fc fa32 	bl	8001d24 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d803      	bhi.n	80058d4 <HAL_SPI_Transmit+0x158>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d102      	bne.n	80058da <HAL_SPI_Transmit+0x15e>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058de:	e074      	b.n	80059ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ce      	bne.n	8005888 <HAL_SPI_Transmit+0x10c>
 80058ea:	e04c      	b.n	8005986 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_SPI_Transmit+0x17e>
 80058f4:	8afb      	ldrh	r3, [r7, #22]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d140      	bne.n	800597c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005920:	e02c      	b.n	800597c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d113      	bne.n	8005958 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	86da      	strh	r2, [r3, #54]	; 0x36
 8005956:	e011      	b.n	800597c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005958:	f7fc f9e4 	bl	8001d24 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d803      	bhi.n	8005970 <HAL_SPI_Transmit+0x1f4>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d102      	bne.n	8005976 <HAL_SPI_Transmit+0x1fa>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	77fb      	strb	r3, [r7, #31]
          goto error;
 800597a:	e026      	b.n	80059ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1cd      	bne.n	8005922 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f894 	bl	8005ab8 <SPI_EndRxTxTransaction>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e000      	b.n	80059ca <HAL_SPI_Transmit+0x24e>
  }

error:
 80059c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059da:	7ffb      	ldrb	r3, [r7, #31]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f4:	e04c      	b.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d048      	beq.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059fe:	f7fc f991 	bl	8001d24 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d902      	bls.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d13d      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a2c:	d111      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a36:	d004      	beq.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a40:	d107      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	d10f      	bne.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e00f      	b.n	8005ab0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d1a3      	bne.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <SPI_EndRxTxTransaction+0x7c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <SPI_EndRxTxTransaction+0x80>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0d5b      	lsrs	r3, r3, #21
 8005ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae2:	d112      	bne.n	8005b0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff ff78 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00f      	b.n	8005b2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d0f2      	beq.n	8005b0a <SPI_EndRxTxTransaction+0x52>
 8005b24:	e000      	b.n	8005b28 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b26:	bf00      	nop
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000460 	.word	0x20000460
 8005b38:	165e9f81 	.word	0x165e9f81

08005b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e01d      	b.n	8005b8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb fe90 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f000 fa38 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d007      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d122      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d11b      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0202 	mvn.w	r2, #2
 8005c4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9a5 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005c6a:	e005      	b.n	8005c78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f997 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9a8 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d122      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d11b      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0204 	mvn.w	r2, #4
 8005ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f97b 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005cbe:	e005      	b.n	8005ccc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f96d 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f97e 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d122      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0208 	mvn.w	r2, #8
 8005cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f951 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005d12:	e005      	b.n	8005d20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f943 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f954 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d122      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d11b      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0210 	mvn.w	r2, #16
 8005d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f927 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f919 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f92a 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10e      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0201 	mvn.w	r2, #1
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fb f999 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d10e      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d107      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 facf 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f8ef 	bl	8005fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0220 	mvn.w	r2, #32
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa99 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_ConfigClockSource+0x18>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0a6      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x166>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d067      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x120>
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d80b      	bhi.n	8005e9e <HAL_TIM_ConfigClockSource+0x6c>
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d073      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x140>
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d802      	bhi.n	8005e94 <HAL_TIM_ConfigClockSource+0x62>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06f      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e92:	e078      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d06c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x140>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d06a      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e9c:	e073      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9e:	2b70      	cmp	r3, #112	; 0x70
 8005ea0:	d00d      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x8c>
 8005ea2:	2b70      	cmp	r3, #112	; 0x70
 8005ea4:	d804      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x7e>
 8005ea6:	2b50      	cmp	r3, #80	; 0x50
 8005ea8:	d033      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0xe0>
 8005eaa:	2b60      	cmp	r3, #96	; 0x60
 8005eac:	d041      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005eae:	e06a      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb4:	d066      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0x152>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	d017      	beq.n	8005eec <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005ebc:	e063      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6899      	ldr	r1, [r3, #8]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f000 f9a9 	bl	8006224 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	609a      	str	r2, [r3, #8]
      break;
 8005eea:	e04c      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f000 f992 	bl	8006224 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0e:	609a      	str	r2, [r3, #8]
      break;
 8005f10:	e039      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 f906 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2150      	movs	r1, #80	; 0x50
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f95f 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f30:	e029      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 f925 	bl	800618e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2160      	movs	r1, #96	; 0x60
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f94f 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f50:	e019      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 f8e6 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2140      	movs	r1, #64	; 0x40
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f93f 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f70:	e009      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f000 f936 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f82:	e000      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d027      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d023      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <TIM_Base_SetConfig+0x138>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <TIM_Base_SetConfig+0x13c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <TIM_Base_SetConfig+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40010400 	.word	0x40010400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	40001800 	.word	0x40001800
 8006128:	40001c00 	.word	0x40001c00
 800612c:	40002000 	.word	0x40002000

08006130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 030a 	bic.w	r3, r3, #10
 800616c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0210 	bic.w	r2, r3, #16
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	431a      	orrs	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e05a      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d01d      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e03f      	b.n	8006416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fabe 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa69 	bl	80068a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695a      	ldr	r2, [r3, #20]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_UART_IRQHandler+0x52>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f996 	bl	800679c <UART_Receive_IT>
      return;
 8006470:	e0d1      	b.n	8006616 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80b0 	beq.w	80065da <HAL_UART_IRQHandler+0x1ba>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_UART_IRQHandler+0x70>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80a5 	beq.w	80065da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_UART_IRQHandler+0x90>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_UART_IRQHandler+0xb0>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	f043 0202 	orr.w	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_UART_IRQHandler+0xd0>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	f043 0204 	orr.w	r2, r3, #4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00f      	beq.n	800651a <HAL_UART_IRQHandler+0xfa>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <HAL_UART_IRQHandler+0xee>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	f043 0208 	orr.w	r2, r3, #8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d078      	beq.n	8006614 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <HAL_UART_IRQHandler+0x11c>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f930 	bl	800679c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_UART_IRQHandler+0x144>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d031      	beq.n	80065c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f879 	bl	800665c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d123      	bne.n	80065c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006586:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	4a21      	ldr	r2, [pc, #132]	; (800661c <HAL_UART_IRQHandler+0x1fc>)
 8006596:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	4618      	mov	r0, r3
 800659e:	f7fc f963 	bl	8002868 <HAL_DMA_Abort_IT>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065b2:	4610      	mov	r0, r2
 80065b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	e00e      	b.n	80065d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f845 	bl	8006648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	e00a      	b.n	80065d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f841 	bl	8006648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c6:	e006      	b.n	80065d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f83d 	bl	8006648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065d4:	e01e      	b.n	8006614 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d6:	bf00      	nop
    return;
 80065d8:	e01c      	b.n	8006614 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f866 	bl	80066c0 <UART_Transmit_IT>
    return;
 80065f4:	e00f      	b.n	8006616 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_UART_IRQHandler+0x1f6>
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8ae 	bl	800676c <UART_EndTransmit_IT>
    return;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006614:	bf00      	nop
  }
}
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08006699 	.word	0x08006699

08006620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006672:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ffc8 	bl	8006648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b21      	cmp	r3, #33	; 0x21
 80066d2:	d144      	bne.n	800675e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d11a      	bne.n	8006714 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	1c9a      	adds	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]
 8006706:	e00e      	b.n	8006726 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]
 8006712:	e008      	b.n	8006726 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	1c59      	adds	r1, r3, #1
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6211      	str	r1, [r2, #32]
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29b      	uxth	r3, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	4619      	mov	r1, r3
 8006734:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10f      	bne.n	800675a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006748:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006758:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	e000      	b.n	8006760 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800675e:	2302      	movs	r3, #2
  }
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006782:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff ff47 	bl	8006620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b22      	cmp	r3, #34	; 0x22
 80067ae:	d171      	bne.n	8006894 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b8:	d123      	bne.n	8006802 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10e      	bne.n	80067e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	1c9a      	adds	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
 80067e4:	e029      	b.n	800683a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006800:	e01b      	b.n	800683a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6858      	ldr	r0, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6291      	str	r1, [r2, #40]	; 0x28
 800681a:	b2c2      	uxtb	r2, r0
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e00c      	b.n	800683a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	1c58      	adds	r0, r3, #1
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	6288      	str	r0, [r1, #40]	; 0x28
 8006832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4619      	mov	r1, r3
 8006848:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800684a:	2b00      	cmp	r3, #0
 800684c:	d120      	bne.n	8006890 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0220 	bic.w	r2, r2, #32
 800685c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fed4 	bl	8006634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e002      	b.n	8006896 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068e2:	f023 030c 	bic.w	r3, r3, #12
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	430b      	orrs	r3, r1
 80068ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690e:	f040 818b 	bne.w	8006c28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4ac1      	ldr	r2, [pc, #772]	; (8006c1c <UART_SetConfig+0x37c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d005      	beq.n	8006928 <UART_SetConfig+0x88>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4abf      	ldr	r2, [pc, #764]	; (8006c20 <UART_SetConfig+0x380>)
 8006922:	4293      	cmp	r3, r2
 8006924:	f040 80bd 	bne.w	8006aa2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006928:	f7fe fd40 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 800692c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	461d      	mov	r5, r3
 8006932:	f04f 0600 	mov.w	r6, #0
 8006936:	46a8      	mov	r8, r5
 8006938:	46b1      	mov	r9, r6
 800693a:	eb18 0308 	adds.w	r3, r8, r8
 800693e:	eb49 0409 	adc.w	r4, r9, r9
 8006942:	4698      	mov	r8, r3
 8006944:	46a1      	mov	r9, r4
 8006946:	eb18 0805 	adds.w	r8, r8, r5
 800694a:	eb49 0906 	adc.w	r9, r9, r6
 800694e:	f04f 0100 	mov.w	r1, #0
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800695a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800695e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006962:	4688      	mov	r8, r1
 8006964:	4691      	mov	r9, r2
 8006966:	eb18 0005 	adds.w	r0, r8, r5
 800696a:	eb49 0106 	adc.w	r1, r9, r6
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	461d      	mov	r5, r3
 8006974:	f04f 0600 	mov.w	r6, #0
 8006978:	196b      	adds	r3, r5, r5
 800697a:	eb46 0406 	adc.w	r4, r6, r6
 800697e:	461a      	mov	r2, r3
 8006980:	4623      	mov	r3, r4
 8006982:	f7f9 fc75 	bl	8000270 <__aeabi_uldivmod>
 8006986:	4603      	mov	r3, r0
 8006988:	460c      	mov	r4, r1
 800698a:	461a      	mov	r2, r3
 800698c:	4ba5      	ldr	r3, [pc, #660]	; (8006c24 <UART_SetConfig+0x384>)
 800698e:	fba3 2302 	umull	r2, r3, r3, r2
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	461d      	mov	r5, r3
 800699c:	f04f 0600 	mov.w	r6, #0
 80069a0:	46a9      	mov	r9, r5
 80069a2:	46b2      	mov	sl, r6
 80069a4:	eb19 0309 	adds.w	r3, r9, r9
 80069a8:	eb4a 040a 	adc.w	r4, sl, sl
 80069ac:	4699      	mov	r9, r3
 80069ae:	46a2      	mov	sl, r4
 80069b0:	eb19 0905 	adds.w	r9, r9, r5
 80069b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069cc:	4689      	mov	r9, r1
 80069ce:	4692      	mov	sl, r2
 80069d0:	eb19 0005 	adds.w	r0, r9, r5
 80069d4:	eb4a 0106 	adc.w	r1, sl, r6
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	461d      	mov	r5, r3
 80069de:	f04f 0600 	mov.w	r6, #0
 80069e2:	196b      	adds	r3, r5, r5
 80069e4:	eb46 0406 	adc.w	r4, r6, r6
 80069e8:	461a      	mov	r2, r3
 80069ea:	4623      	mov	r3, r4
 80069ec:	f7f9 fc40 	bl	8000270 <__aeabi_uldivmod>
 80069f0:	4603      	mov	r3, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	461a      	mov	r2, r3
 80069f6:	4b8b      	ldr	r3, [pc, #556]	; (8006c24 <UART_SetConfig+0x384>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a86      	ldr	r2, [pc, #536]	; (8006c24 <UART_SetConfig+0x384>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a18:	4498      	add	r8, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	461d      	mov	r5, r3
 8006a1e:	f04f 0600 	mov.w	r6, #0
 8006a22:	46a9      	mov	r9, r5
 8006a24:	46b2      	mov	sl, r6
 8006a26:	eb19 0309 	adds.w	r3, r9, r9
 8006a2a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a2e:	4699      	mov	r9, r3
 8006a30:	46a2      	mov	sl, r4
 8006a32:	eb19 0905 	adds.w	r9, r9, r5
 8006a36:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a3a:	f04f 0100 	mov.w	r1, #0
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a4e:	4689      	mov	r9, r1
 8006a50:	4692      	mov	sl, r2
 8006a52:	eb19 0005 	adds.w	r0, r9, r5
 8006a56:	eb4a 0106 	adc.w	r1, sl, r6
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	461d      	mov	r5, r3
 8006a60:	f04f 0600 	mov.w	r6, #0
 8006a64:	196b      	adds	r3, r5, r5
 8006a66:	eb46 0406 	adc.w	r4, r6, r6
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	4623      	mov	r3, r4
 8006a6e:	f7f9 fbff 	bl	8000270 <__aeabi_uldivmod>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b6a      	ldr	r3, [pc, #424]	; (8006c24 <UART_SetConfig+0x384>)
 8006a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	2164      	movs	r1, #100	; 0x64
 8006a82:	fb01 f303 	mul.w	r3, r1, r3
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	3332      	adds	r3, #50	; 0x32
 8006a8c:	4a65      	ldr	r2, [pc, #404]	; (8006c24 <UART_SetConfig+0x384>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	f003 0207 	and.w	r2, r3, #7
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4442      	add	r2, r8
 8006a9e:	609a      	str	r2, [r3, #8]
 8006aa0:	e26f      	b.n	8006f82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aa2:	f7fe fc6f 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8006aa6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	461d      	mov	r5, r3
 8006aac:	f04f 0600 	mov.w	r6, #0
 8006ab0:	46a8      	mov	r8, r5
 8006ab2:	46b1      	mov	r9, r6
 8006ab4:	eb18 0308 	adds.w	r3, r8, r8
 8006ab8:	eb49 0409 	adc.w	r4, r9, r9
 8006abc:	4698      	mov	r8, r3
 8006abe:	46a1      	mov	r9, r4
 8006ac0:	eb18 0805 	adds.w	r8, r8, r5
 8006ac4:	eb49 0906 	adc.w	r9, r9, r6
 8006ac8:	f04f 0100 	mov.w	r1, #0
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ad4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ad8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006adc:	4688      	mov	r8, r1
 8006ade:	4691      	mov	r9, r2
 8006ae0:	eb18 0005 	adds.w	r0, r8, r5
 8006ae4:	eb49 0106 	adc.w	r1, r9, r6
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	461d      	mov	r5, r3
 8006aee:	f04f 0600 	mov.w	r6, #0
 8006af2:	196b      	adds	r3, r5, r5
 8006af4:	eb46 0406 	adc.w	r4, r6, r6
 8006af8:	461a      	mov	r2, r3
 8006afa:	4623      	mov	r3, r4
 8006afc:	f7f9 fbb8 	bl	8000270 <__aeabi_uldivmod>
 8006b00:	4603      	mov	r3, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b47      	ldr	r3, [pc, #284]	; (8006c24 <UART_SetConfig+0x384>)
 8006b08:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	461d      	mov	r5, r3
 8006b16:	f04f 0600 	mov.w	r6, #0
 8006b1a:	46a9      	mov	r9, r5
 8006b1c:	46b2      	mov	sl, r6
 8006b1e:	eb19 0309 	adds.w	r3, r9, r9
 8006b22:	eb4a 040a 	adc.w	r4, sl, sl
 8006b26:	4699      	mov	r9, r3
 8006b28:	46a2      	mov	sl, r4
 8006b2a:	eb19 0905 	adds.w	r9, r9, r5
 8006b2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b46:	4689      	mov	r9, r1
 8006b48:	4692      	mov	sl, r2
 8006b4a:	eb19 0005 	adds.w	r0, r9, r5
 8006b4e:	eb4a 0106 	adc.w	r1, sl, r6
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	461d      	mov	r5, r3
 8006b58:	f04f 0600 	mov.w	r6, #0
 8006b5c:	196b      	adds	r3, r5, r5
 8006b5e:	eb46 0406 	adc.w	r4, r6, r6
 8006b62:	461a      	mov	r2, r3
 8006b64:	4623      	mov	r3, r4
 8006b66:	f7f9 fb83 	bl	8000270 <__aeabi_uldivmod>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <UART_SetConfig+0x384>)
 8006b72:	fba3 1302 	umull	r1, r3, r3, r2
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2164      	movs	r1, #100	; 0x64
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	3332      	adds	r3, #50	; 0x32
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <UART_SetConfig+0x384>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b92:	4498      	add	r8, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	461d      	mov	r5, r3
 8006b98:	f04f 0600 	mov.w	r6, #0
 8006b9c:	46a9      	mov	r9, r5
 8006b9e:	46b2      	mov	sl, r6
 8006ba0:	eb19 0309 	adds.w	r3, r9, r9
 8006ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ba8:	4699      	mov	r9, r3
 8006baa:	46a2      	mov	sl, r4
 8006bac:	eb19 0905 	adds.w	r9, r9, r5
 8006bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bc8:	4689      	mov	r9, r1
 8006bca:	4692      	mov	sl, r2
 8006bcc:	eb19 0005 	adds.w	r0, r9, r5
 8006bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	461d      	mov	r5, r3
 8006bda:	f04f 0600 	mov.w	r6, #0
 8006bde:	196b      	adds	r3, r5, r5
 8006be0:	eb46 0406 	adc.w	r4, r6, r6
 8006be4:	461a      	mov	r2, r3
 8006be6:	4623      	mov	r3, r4
 8006be8:	f7f9 fb42 	bl	8000270 <__aeabi_uldivmod>
 8006bec:	4603      	mov	r3, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <UART_SetConfig+0x384>)
 8006bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	2164      	movs	r1, #100	; 0x64
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	3332      	adds	r3, #50	; 0x32
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <UART_SetConfig+0x384>)
 8006c08:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	f003 0207 	and.w	r2, r3, #7
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4442      	add	r2, r8
 8006c18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c1a:	e1b2      	b.n	8006f82 <UART_SetConfig+0x6e2>
 8006c1c:	40011000 	.word	0x40011000
 8006c20:	40011400 	.word	0x40011400
 8006c24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4ad7      	ldr	r2, [pc, #860]	; (8006f8c <UART_SetConfig+0x6ec>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d005      	beq.n	8006c3e <UART_SetConfig+0x39e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4ad6      	ldr	r2, [pc, #856]	; (8006f90 <UART_SetConfig+0x6f0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	f040 80d1 	bne.w	8006de0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c3e:	f7fe fbb5 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 8006c42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	469a      	mov	sl, r3
 8006c48:	f04f 0b00 	mov.w	fp, #0
 8006c4c:	46d0      	mov	r8, sl
 8006c4e:	46d9      	mov	r9, fp
 8006c50:	eb18 0308 	adds.w	r3, r8, r8
 8006c54:	eb49 0409 	adc.w	r4, r9, r9
 8006c58:	4698      	mov	r8, r3
 8006c5a:	46a1      	mov	r9, r4
 8006c5c:	eb18 080a 	adds.w	r8, r8, sl
 8006c60:	eb49 090b 	adc.w	r9, r9, fp
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c78:	4688      	mov	r8, r1
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	eb1a 0508 	adds.w	r5, sl, r8
 8006c80:	eb4b 0609 	adc.w	r6, fp, r9
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	f04f 0400 	mov.w	r4, #0
 8006c96:	0094      	lsls	r4, r2, #2
 8006c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	f7f9 fae3 	bl	8000270 <__aeabi_uldivmod>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4bb8      	ldr	r3, [pc, #736]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	469b      	mov	fp, r3
 8006cc0:	f04f 0c00 	mov.w	ip, #0
 8006cc4:	46d9      	mov	r9, fp
 8006cc6:	46e2      	mov	sl, ip
 8006cc8:	eb19 0309 	adds.w	r3, r9, r9
 8006ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd0:	4699      	mov	r9, r3
 8006cd2:	46a2      	mov	sl, r4
 8006cd4:	eb19 090b 	adds.w	r9, r9, fp
 8006cd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	4692      	mov	sl, r2
 8006cf4:	eb1b 0509 	adds.w	r5, fp, r9
 8006cf8:	eb4c 060a 	adc.w	r6, ip, sl
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	f04f 0400 	mov.w	r4, #0
 8006d0e:	0094      	lsls	r4, r2, #2
 8006d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d14:	008b      	lsls	r3, r1, #2
 8006d16:	461a      	mov	r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	f7f9 faa7 	bl	8000270 <__aeabi_uldivmod>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b9a      	ldr	r3, [pc, #616]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	2164      	movs	r1, #100	; 0x64
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	3332      	adds	r3, #50	; 0x32
 8006d3c:	4a95      	ldr	r2, [pc, #596]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d48:	4498      	add	r8, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	f04f 0c00 	mov.w	ip, #0
 8006d52:	46d9      	mov	r9, fp
 8006d54:	46e2      	mov	sl, ip
 8006d56:	eb19 0309 	adds.w	r3, r9, r9
 8006d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d5e:	4699      	mov	r9, r3
 8006d60:	46a2      	mov	sl, r4
 8006d62:	eb19 090b 	adds.w	r9, r9, fp
 8006d66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d7e:	4689      	mov	r9, r1
 8006d80:	4692      	mov	sl, r2
 8006d82:	eb1b 0509 	adds.w	r5, fp, r9
 8006d86:	eb4c 060a 	adc.w	r6, ip, sl
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	f04f 0400 	mov.w	r4, #0
 8006d9c:	0094      	lsls	r4, r2, #2
 8006d9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006da2:	008b      	lsls	r3, r1, #2
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	4631      	mov	r1, r6
 8006dac:	f7f9 fa60 	bl	8000270 <__aeabi_uldivmod>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	461a      	mov	r2, r3
 8006db6:	4b77      	ldr	r3, [pc, #476]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006db8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	2164      	movs	r1, #100	; 0x64
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	3332      	adds	r3, #50	; 0x32
 8006dca:	4a72      	ldr	r2, [pc, #456]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	f003 020f 	and.w	r2, r3, #15
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4442      	add	r2, r8
 8006ddc:	609a      	str	r2, [r3, #8]
 8006dde:	e0d0      	b.n	8006f82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006de0:	f7fe fad0 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8006de4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	469a      	mov	sl, r3
 8006dea:	f04f 0b00 	mov.w	fp, #0
 8006dee:	46d0      	mov	r8, sl
 8006df0:	46d9      	mov	r9, fp
 8006df2:	eb18 0308 	adds.w	r3, r8, r8
 8006df6:	eb49 0409 	adc.w	r4, r9, r9
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	46a1      	mov	r9, r4
 8006dfe:	eb18 080a 	adds.w	r8, r8, sl
 8006e02:	eb49 090b 	adc.w	r9, r9, fp
 8006e06:	f04f 0100 	mov.w	r1, #0
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e1a:	4688      	mov	r8, r1
 8006e1c:	4691      	mov	r9, r2
 8006e1e:	eb1a 0508 	adds.w	r5, sl, r8
 8006e22:	eb4b 0609 	adc.w	r6, fp, r9
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	f04f 0400 	mov.w	r4, #0
 8006e38:	0094      	lsls	r4, r2, #2
 8006e3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e3e:	008b      	lsls	r3, r1, #2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4623      	mov	r3, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	4631      	mov	r1, r6
 8006e48:	f7f9 fa12 	bl	8000270 <__aeabi_uldivmod>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b50      	ldr	r3, [pc, #320]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006e54:	fba3 2302 	umull	r2, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	469b      	mov	fp, r3
 8006e62:	f04f 0c00 	mov.w	ip, #0
 8006e66:	46d9      	mov	r9, fp
 8006e68:	46e2      	mov	sl, ip
 8006e6a:	eb19 0309 	adds.w	r3, r9, r9
 8006e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8006e72:	4699      	mov	r9, r3
 8006e74:	46a2      	mov	sl, r4
 8006e76:	eb19 090b 	adds.w	r9, r9, fp
 8006e7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e7e:	f04f 0100 	mov.w	r1, #0
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e92:	4689      	mov	r9, r1
 8006e94:	4692      	mov	sl, r2
 8006e96:	eb1b 0509 	adds.w	r5, fp, r9
 8006e9a:	eb4c 060a 	adc.w	r6, ip, sl
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	f04f 0400 	mov.w	r4, #0
 8006eb0:	0094      	lsls	r4, r2, #2
 8006eb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eb6:	008b      	lsls	r3, r1, #2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	f7f9 f9d6 	bl	8000270 <__aeabi_uldivmod>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4b32      	ldr	r3, [pc, #200]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	2164      	movs	r1, #100	; 0x64
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	3332      	adds	r3, #50	; 0x32
 8006ede:	4a2d      	ldr	r2, [pc, #180]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eea:	4498      	add	r8, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	469b      	mov	fp, r3
 8006ef0:	f04f 0c00 	mov.w	ip, #0
 8006ef4:	46d9      	mov	r9, fp
 8006ef6:	46e2      	mov	sl, ip
 8006ef8:	eb19 0309 	adds.w	r3, r9, r9
 8006efc:	eb4a 040a 	adc.w	r4, sl, sl
 8006f00:	4699      	mov	r9, r3
 8006f02:	46a2      	mov	sl, r4
 8006f04:	eb19 090b 	adds.w	r9, r9, fp
 8006f08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f0c:	f04f 0100 	mov.w	r1, #0
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f20:	4689      	mov	r9, r1
 8006f22:	4692      	mov	sl, r2
 8006f24:	eb1b 0509 	adds.w	r5, fp, r9
 8006f28:	eb4c 060a 	adc.w	r6, ip, sl
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f04f 0400 	mov.w	r4, #0
 8006f3e:	0094      	lsls	r4, r2, #2
 8006f40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	461a      	mov	r2, r3
 8006f48:	4623      	mov	r3, r4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	f7f9 f98f 	bl	8000270 <__aeabi_uldivmod>
 8006f52:	4603      	mov	r3, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	461a      	mov	r2, r3
 8006f58:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2164      	movs	r1, #100	; 0x64
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	3332      	adds	r3, #50	; 0x32
 8006f6c:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <UART_SetConfig+0x6f4>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4442      	add	r2, r8
 8006f7e:	609a      	str	r2, [r3, #8]
}
 8006f80:	e7ff      	b.n	8006f82 <UART_SetConfig+0x6e2>
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	40011000 	.word	0x40011000
 8006f90:	40011400 	.word	0x40011400
 8006f94:	51eb851f 	.word	0x51eb851f

08006f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f043 0201 	orr.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	019b      	lsls	r3, r3, #6
 8006fee:	f043 0220 	orr.w	r2, r3, #32
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a09      	ldr	r2, [pc, #36]	; (8007024 <USB_FlushTxFifo+0x48>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d901      	bls.n	8007008 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e006      	b.n	8007016 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b20      	cmp	r3, #32
 8007012:	d0f0      	beq.n	8006ff6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	00030d40 	.word	0x00030d40

08007028 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2210      	movs	r2, #16
 8007038:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a09      	ldr	r2, [pc, #36]	; (8007068 <USB_FlushRxFifo+0x40>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b10      	cmp	r3, #16
 8007056:	d0f0      	beq.n	800703a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	00030d40 	.word	0x00030d40

0800706c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	3303      	adds	r3, #3
 8007086:	089b      	lsrs	r3, r3, #2
 8007088:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800708a:	2300      	movs	r3, #0
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e00b      	b.n	80070a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	601a      	str	r2, [r3, #0]
    pDest++;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	3304      	adds	r3, #4
 80070a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	3301      	adds	r3, #1
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d3ef      	bcc.n	8007090 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80070b0:	69fb      	ldr	r3, [r7, #28]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3724      	adds	r7, #36	; 0x24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4013      	ands	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070d6:	68fb      	ldr	r3, [r7, #12]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	f003 0301 	and.w	r3, r3, #1
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	68f9      	ldr	r1, [r7, #12]
 8007134:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007138:	4313      	orrs	r3, r2
 800713a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007148:	461a      	mov	r2, r3
 800714a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800714e:	6053      	str	r3, [r2, #4]
 8007150:	e009      	b.n	8007166 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d106      	bne.n	8007166 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800715e:	461a      	mov	r2, r3
 8007160:	f241 7370 	movw	r3, #6000	; 0x1770
 8007164:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007198:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <USB_DriveVbus+0x44>
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d106      	bne.n	80071b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c2:	d109      	bne.n	80071d8 <USB_DriveVbus+0x64>
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	b29b      	uxth	r3, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	0c9b      	lsrs	r3, r3, #18
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <USB_HC_Halt+0x3a>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d16c      	bne.n	800731c <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4413      	add	r3, r2
 800724a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	440a      	add	r2, r1
 8007258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007260:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d143      	bne.n	80072f6 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	440a      	add	r2, r1
 8007284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800728c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	3301      	adds	r3, #1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072da:	d81d      	bhi.n	8007318 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f2:	d0ec      	beq.n	80072ce <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072f4:	e080      	b.n	80073f8 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	440a      	add	r2, r1
 800730c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007314:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007316:	e06f      	b.n	80073f8 <USB_HC_Halt+0x1f0>
          break;
 8007318:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800731a:	e06d      	b.n	80073f8 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	440a      	add	r2, r1
 8007332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d143      	bne.n	80073d4 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800736a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800738a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3301      	adds	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b8:	d81d      	bhi.n	80073f6 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d0:	d0ec      	beq.n	80073ac <USB_HC_Halt+0x1a4>
 80073d2:	e011      	b.n	80073f8 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e000      	b.n	80073f8 <USB_HC_Halt+0x1f0>
          break;
 80073f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fdcf 	bl	8006fba <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800741c:	2110      	movs	r1, #16
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff fddc 	bl	8006fdc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fdff 	bl	8007028 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800742a:	2300      	movs	r3, #0
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	e01f      	b.n	8007470 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007446:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800744e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007456:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	3301      	adds	r3, #1
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d9dc      	bls.n	8007430 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	e034      	b.n	80074e6 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007492:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800749a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074a2:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b0:	461a      	mov	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c2:	d80c      	bhi.n	80074de <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074da:	d0ec      	beq.n	80074b6 <USB_StopHost+0xb0>
 80074dc:	e000      	b.n	80074e0 <USB_StopHost+0xda>
        break;
 80074de:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	3301      	adds	r3, #1
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b0f      	cmp	r3, #15
 80074ea:	d9c7      	bls.n	800747c <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f2:	461a      	mov	r2, r3
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007500:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff fd48 	bl	8006f98 <USB_EnableGlobalInt>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800751a:	f3ef 8305 	mrs	r3, IPSR
 800751e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007520:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10f      	bne.n	8007546 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007526:	f3ef 8310 	mrs	r3, PRIMASK
 800752a:	607b      	str	r3, [r7, #4]
  return(result);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <osKernelInitialize+0x32>
 8007532:	4b11      	ldr	r3, [pc, #68]	; (8007578 <osKernelInitialize+0x64>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d109      	bne.n	800754e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800753a:	f3ef 8311 	mrs	r3, BASEPRI
 800753e:	603b      	str	r3, [r7, #0]
  return(result);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007546:	f06f 0305 	mvn.w	r3, #5
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e00c      	b.n	8007568 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <osKernelInitialize+0x64>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007556:	4b08      	ldr	r3, [pc, #32]	; (8007578 <osKernelInitialize+0x64>)
 8007558:	2201      	movs	r2, #1
 800755a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e002      	b.n	8007568 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007568:	68fb      	ldr	r3, [r7, #12]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20000500 	.word	0x20000500

0800757c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007582:	f3ef 8305 	mrs	r3, IPSR
 8007586:	60bb      	str	r3, [r7, #8]
  return(result);
 8007588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758e:	f3ef 8310 	mrs	r3, PRIMASK
 8007592:	607b      	str	r3, [r7, #4]
  return(result);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <osKernelStart+0x32>
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <osKernelStart+0x64>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d109      	bne.n	80075b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075a2:	f3ef 8311 	mrs	r3, BASEPRI
 80075a6:	603b      	str	r3, [r7, #0]
  return(result);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80075ae:	f06f 0305 	mvn.w	r3, #5
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e00e      	b.n	80075d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <osKernelStart+0x64>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d107      	bne.n	80075ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <osKernelStart+0x64>)
 80075c0:	2202      	movs	r2, #2
 80075c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80075c4:	f001 ff82 	bl	80094cc <vTaskStartScheduler>
      stat = osOK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e002      	b.n	80075d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80075ce:	f04f 33ff 	mov.w	r3, #4294967295
 80075d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000500 	.word	0x20000500

080075e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b092      	sub	sp, #72	; 0x48
 80075e8:	af04      	add	r7, sp, #16
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f4:	f3ef 8305 	mrs	r3, IPSR
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8094 	bne.w	800772a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007602:	f3ef 8310 	mrs	r3, PRIMASK
 8007606:	623b      	str	r3, [r7, #32]
  return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f040 808d 	bne.w	800772a <osThreadNew+0x146>
 8007610:	4b48      	ldr	r3, [pc, #288]	; (8007734 <osThreadNew+0x150>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d106      	bne.n	8007626 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007618:	f3ef 8311 	mrs	r3, BASEPRI
 800761c:	61fb      	str	r3, [r7, #28]
  return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 8082 	bne.w	800772a <osThreadNew+0x146>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07e      	beq.n	800772a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007630:	2318      	movs	r3, #24
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007634:	2300      	movs	r3, #0
 8007636:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007638:	f107 031b 	add.w	r3, r7, #27
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d045      	beq.n	80076d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <osThreadNew+0x74>
        name = attr->name;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <osThreadNew+0x9a>
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b38      	cmp	r3, #56	; 0x38
 8007670:	d805      	bhi.n	800767e <osThreadNew+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <osThreadNew+0x9e>
        return (NULL);
 800767e:	2300      	movs	r3, #0
 8007680:	e054      	b.n	800772c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <osThreadNew+0xd4>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b5b      	cmp	r3, #91	; 0x5b
 80076a0:	d90a      	bls.n	80076b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d006      	beq.n	80076b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <osThreadNew+0xd4>
        mem = 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b6:	e010      	b.n	80076da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10c      	bne.n	80076da <osThreadNew+0xf6>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <osThreadNew+0xf6>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <osThreadNew+0xf6>
          mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d4:	e001      	b.n	80076da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d110      	bne.n	8007702 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e8:	9202      	str	r2, [sp, #8]
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f001 fd20 	bl	800913c <xTaskCreateStatic>
 80076fc:	4603      	mov	r3, r0
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e013      	b.n	800772a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	d110      	bne.n	800772a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	b29a      	uxth	r2, r3
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 fd67 	bl	80091ee <xTaskCreate>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d001      	beq.n	800772a <osThreadNew+0x146>
          hTask = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800772a:	697b      	ldr	r3, [r7, #20]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3738      	adds	r7, #56	; 0x38
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000500 	.word	0x20000500

08007738 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007740:	f3ef 8305 	mrs	r3, IPSR
 8007744:	613b      	str	r3, [r7, #16]
  return(result);
 8007746:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10f      	bne.n	800776c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774c:	f3ef 8310 	mrs	r3, PRIMASK
 8007750:	60fb      	str	r3, [r7, #12]
  return(result);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <osDelay+0x34>
 8007758:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <osDelay+0x58>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d109      	bne.n	8007774 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007760:	f3ef 8311 	mrs	r3, BASEPRI
 8007764:	60bb      	str	r3, [r7, #8]
  return(result);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <osDelay+0x3c>
    stat = osErrorISR;
 800776c:	f06f 0305 	mvn.w	r3, #5
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e007      	b.n	8007784 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <osDelay+0x4c>
      vTaskDelay(ticks);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fe70 	bl	8009464 <vTaskDelay>
    }
  }

  return (stat);
 8007784:	697b      	ldr	r3, [r7, #20]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000500 	.word	0x20000500

08007794 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f002 ff5f 	bl	800a660 <pvTimerGetTimerID>
 80077a2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	4610      	mov	r0, r2
 80077b4:	4798      	blx	r3
  }
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08e      	sub	sp, #56	; 0x38
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d4:	f3ef 8305 	mrs	r3, IPSR
 80077d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80077da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d16a      	bne.n	80078b6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e0:	f3ef 8310 	mrs	r3, PRIMASK
 80077e4:	617b      	str	r3, [r7, #20]
  return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d164      	bne.n	80078b6 <osTimerNew+0xf6>
 80077ec:	4b34      	ldr	r3, [pc, #208]	; (80078c0 <osTimerNew+0x100>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d105      	bne.n	8007800 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077f4:	f3ef 8311 	mrs	r3, BASEPRI
 80077f8:	613b      	str	r3, [r7, #16]
  return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d15a      	bne.n	80078b6 <osTimerNew+0xf6>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d057      	beq.n	80078b6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007806:	2008      	movs	r0, #8
 8007808:	f000 fa3e 	bl	8007c88 <pvPortMalloc>
 800780c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d050      	beq.n	80078b6 <osTimerNew+0xf6>
      callb->func = func;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <osTimerNew+0x6c>
        reload = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
 800782a:	e001      	b.n	8007830 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007830:	f04f 33ff 	mov.w	r3, #4294967295
 8007834:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01c      	beq.n	800787a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <osTimerNew+0x8e>
          name = attr->name;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d006      	beq.n	8007864 <osTimerNew+0xa4>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b2f      	cmp	r3, #47	; 0x2f
 800785c:	d902      	bls.n	8007864 <osTimerNew+0xa4>
          mem = 1;
 800785e:	2301      	movs	r3, #1
 8007860:	623b      	str	r3, [r7, #32]
 8007862:	e00c      	b.n	800787e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d108      	bne.n	800787e <osTimerNew+0xbe>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <osTimerNew+0xbe>
            mem = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	623b      	str	r3, [r7, #32]
 8007878:	e001      	b.n	800787e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10c      	bne.n	800789e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <osTimerNew+0x104>)
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	2101      	movs	r1, #1
 8007894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007896:	f002 fbb4 	bl	800a002 <xTimerCreateStatic>
 800789a:	62b8      	str	r0, [r7, #40]	; 0x28
 800789c:	e00b      	b.n	80078b6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <osTimerNew+0x104>)
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ac:	2101      	movs	r1, #1
 80078ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b0:	f002 fb86 	bl	8009fc0 <xTimerCreate>
 80078b4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3730      	adds	r7, #48	; 0x30
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000500 	.word	0x20000500
 80078c4:	08007795 	.word	0x08007795

080078c8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d6:	f3ef 8305 	mrs	r3, IPSR
 80078da:	617b      	str	r3, [r7, #20]
  return(result);
 80078dc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10f      	bne.n	8007902 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	613b      	str	r3, [r7, #16]
  return(result);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d109      	bne.n	8007902 <osTimerStart+0x3a>
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <osTimerStart+0x7c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d109      	bne.n	800790a <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f6:	f3ef 8311 	mrs	r3, BASEPRI
 80078fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <osTimerStart+0x42>
    stat = osErrorISR;
 8007902:	f06f 0305 	mvn.w	r3, #5
 8007906:	61fb      	str	r3, [r7, #28]
 8007908:	e017      	b.n	800793a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007910:	f06f 0303 	mvn.w	r3, #3
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e010      	b.n	800793a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	2104      	movs	r1, #4
 8007922:	69b8      	ldr	r0, [r7, #24]
 8007924:	f002 fbda 	bl	800a0dc <xTimerGenericCommand>
 8007928:	4603      	mov	r3, r0
 800792a:	2b01      	cmp	r3, #1
 800792c:	d102      	bne.n	8007934 <osTimerStart+0x6c>
      stat = osOK;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	e002      	b.n	800793a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007934:	f06f 0302 	mvn.w	r3, #2
 8007938:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800793a:	69fb      	ldr	r3, [r7, #28]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000500 	.word	0x20000500

08007948 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007958:	f3ef 8305 	mrs	r3, IPSR
 800795c:	61bb      	str	r3, [r7, #24]
  return(result);
 800795e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007960:	2b00      	cmp	r3, #0
 8007962:	d170      	bne.n	8007a46 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	617b      	str	r3, [r7, #20]
  return(result);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d16a      	bne.n	8007a46 <osMessageQueueNew+0xfe>
 8007970:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <osMessageQueueNew+0x108>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d105      	bne.n	8007984 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007978:	f3ef 8311 	mrs	r3, BASEPRI
 800797c:	613b      	str	r3, [r7, #16]
  return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d160      	bne.n	8007a46 <osMessageQueueNew+0xfe>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d05d      	beq.n	8007a46 <osMessageQueueNew+0xfe>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d05a      	beq.n	8007a46 <osMessageQueueNew+0xfe>
    mem = -1;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d029      	beq.n	80079f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d012      	beq.n	80079ca <osMessageQueueNew+0x82>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	2b4f      	cmp	r3, #79	; 0x4f
 80079aa:	d90e      	bls.n	80079ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <osMessageQueueNew+0x82>
        mem = 1;
 80079c4:	2301      	movs	r3, #1
 80079c6:	623b      	str	r3, [r7, #32]
 80079c8:	e014      	b.n	80079f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d110      	bne.n	80079f4 <osMessageQueueNew+0xac>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10c      	bne.n	80079f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d108      	bne.n	80079f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <osMessageQueueNew+0xac>
          mem = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	e001      	b.n	80079f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d10c      	bne.n	8007a14 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	460b      	mov	r3, r1
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fe70 	bl	80086f0 <xQueueGenericCreateStatic>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24
 8007a12:	e008      	b.n	8007a26 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fed8 	bl	80087d4 <xQueueGenericCreate>
 8007a24:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00c      	beq.n	8007a46 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <osMessageQueueNew+0xf2>
        name = attr->name;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	e001      	b.n	8007a3e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007a3e:	69f9      	ldr	r1, [r7, #28]
 8007a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a42:	f001 fb1f 	bl	8009084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3728      	adds	r7, #40	; 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000500 	.word	0x20000500

08007a54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6c:	f3ef 8305 	mrs	r3, IPSR
 8007a70:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a72:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10f      	bne.n	8007a98 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a78:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <osMessageQueuePut+0x44>
 8007a84:	4b2b      	ldr	r3, [pc, #172]	; (8007b34 <osMessageQueuePut+0xe0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d12e      	bne.n	8007aea <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a90:	617b      	str	r3, [r7, #20]
  return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d028      	beq.n	8007aea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <osMessageQueuePut+0x56>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <osMessageQueuePut+0x56>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007aaa:	f06f 0303 	mvn.w	r3, #3
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ab0:	e039      	b.n	8007b26 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007ab6:	f107 0210 	add.w	r2, r7, #16
 8007aba:	2300      	movs	r3, #0
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	6a38      	ldr	r0, [r7, #32]
 8007ac0:	f000 ffe2 	bl	8008a88 <xQueueGenericSendFromISR>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d003      	beq.n	8007ad2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007aca:	f06f 0302 	mvn.w	r3, #2
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ad0:	e029      	b.n	8007b26 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d026      	beq.n	8007b26 <osMessageQueuePut+0xd2>
 8007ad8:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <osMessageQueuePut+0xe4>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ae8:	e01d      	b.n	8007b26 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <osMessageQueuePut+0xa2>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007af6:	f06f 0303 	mvn.w	r3, #3
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
 8007afc:	e014      	b.n	8007b28 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007afe:	2300      	movs	r3, #0
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	6a38      	ldr	r0, [r7, #32]
 8007b06:	f000 fec5 	bl	8008894 <xQueueGenericSend>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d00b      	beq.n	8007b28 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007b16:	f06f 0301 	mvn.w	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	e004      	b.n	8007b28 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007b1e:	f06f 0302 	mvn.w	r3, #2
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	e000      	b.n	8007b28 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3728      	adds	r7, #40	; 0x28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000500 	.word	0x20000500
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b52:	f3ef 8305 	mrs	r3, IPSR
 8007b56:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b58:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b62:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <osMessageQueueGet+0x42>
 8007b6a:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <osMessageQueueGet+0xdc>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d12e      	bne.n	8007bd0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b72:	f3ef 8311 	mrs	r3, BASEPRI
 8007b76:	617b      	str	r3, [r7, #20]
  return(result);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d028      	beq.n	8007bd0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <osMessageQueueGet+0x54>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <osMessageQueueGet+0x54>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007b90:	f06f 0303 	mvn.w	r3, #3
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b96:	e038      	b.n	8007c0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007b9c:	f107 0310 	add.w	r3, r7, #16
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6a38      	ldr	r0, [r7, #32]
 8007ba6:	f001 f8df 	bl	8008d68 <xQueueReceiveFromISR>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d003      	beq.n	8007bb8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007bb0:	f06f 0302 	mvn.w	r3, #2
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bb6:	e028      	b.n	8007c0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d025      	beq.n	8007c0a <osMessageQueueGet+0xce>
 8007bbe:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <osMessageQueueGet+0xe0>)
 8007bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bce:	e01c      	b.n	8007c0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <osMessageQueueGet+0xa0>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d103      	bne.n	8007be4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007bdc:	f06f 0303 	mvn.w	r3, #3
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
 8007be2:	e013      	b.n	8007c0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	6a38      	ldr	r0, [r7, #32]
 8007bea:	f000 ffe1 	bl	8008bb0 <xQueueReceive>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d00b      	beq.n	8007c0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007bfa:	f06f 0301 	mvn.w	r3, #1
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007c00:	e004      	b.n	8007c0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007c02:	f06f 0302 	mvn.w	r3, #2
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
 8007c08:	e000      	b.n	8007c0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3728      	adds	r7, #40	; 0x28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000500 	.word	0x20000500
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	; (8007c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4a06      	ldr	r2, [pc, #24]	; (8007c50 <vApplicationGetIdleTaskMemory+0x30>)
 8007c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2280      	movs	r2, #128	; 0x80
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000504 	.word	0x20000504
 8007c50:	20000560 	.word	0x20000560

08007c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a07      	ldr	r2, [pc, #28]	; (8007c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <vApplicationGetTimerTaskMemory+0x30>)
 8007c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20000760 	.word	0x20000760
 8007c84:	200007bc 	.word	0x200007bc

08007c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	; 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c94:	f001 fc7e 	bl	8009594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c98:	4b57      	ldr	r3, [pc, #348]	; (8007df8 <pvPortMalloc+0x170>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ca0:	f000 f90c 	bl	8007ebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ca4:	4b55      	ldr	r3, [pc, #340]	; (8007dfc <pvPortMalloc+0x174>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f040 808c 	bne.w	8007dca <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01c      	beq.n	8007cf2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007cb8:	2208      	movs	r2, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f023 0307 	bic.w	r3, r3, #7
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e7fe      	b.n	8007cf0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d068      	beq.n	8007dca <pvPortMalloc+0x142>
 8007cf8:	4b41      	ldr	r3, [pc, #260]	; (8007e00 <pvPortMalloc+0x178>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d863      	bhi.n	8007dca <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d02:	4b40      	ldr	r3, [pc, #256]	; (8007e04 <pvPortMalloc+0x17c>)
 8007d04:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d06:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <pvPortMalloc+0x17c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d0c:	e004      	b.n	8007d18 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d903      	bls.n	8007d2a <pvPortMalloc+0xa2>
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f1      	bne.n	8007d0e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d2a:	4b33      	ldr	r3, [pc, #204]	; (8007df8 <pvPortMalloc+0x170>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d04a      	beq.n	8007dca <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	4413      	add	r3, r2
 8007d3c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	2308      	movs	r3, #8
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d91e      	bls.n	8007d94 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <pvPortMalloc+0xf4>
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	e7fe      	b.n	8007d7a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d8e:	69b8      	ldr	r0, [r7, #24]
 8007d90:	f000 f8f6 	bl	8007f80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <pvPortMalloc+0x178>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <pvPortMalloc+0x178>)
 8007da0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007da2:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <pvPortMalloc+0x178>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <pvPortMalloc+0x180>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d203      	bcs.n	8007db6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dae:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <pvPortMalloc+0x178>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <pvPortMalloc+0x180>)
 8007db4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <pvPortMalloc+0x174>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dca:	f001 fbf1 	bl	80095b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <pvPortMalloc+0x164>
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e7fe      	b.n	8007dea <pvPortMalloc+0x162>
	return pvReturn;
 8007dec:	69fb      	ldr	r3, [r7, #28]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3728      	adds	r7, #40	; 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200047c4 	.word	0x200047c4
 8007dfc:	200047d0 	.word	0x200047d0
 8007e00:	200047c8 	.word	0x200047c8
 8007e04:	200047bc 	.word	0x200047bc
 8007e08:	200047cc 	.word	0x200047cc

08007e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d046      	beq.n	8007eac <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e1e:	2308      	movs	r3, #8
 8007e20:	425b      	negs	r3, r3
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4413      	add	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	4b20      	ldr	r3, [pc, #128]	; (8007eb4 <vPortFree+0xa8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4013      	ands	r3, r2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <vPortFree+0x42>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e7fe      	b.n	8007e4c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <vPortFree+0x5e>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60bb      	str	r3, [r7, #8]
 8007e68:	e7fe      	b.n	8007e68 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <vPortFree+0xa8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d019      	beq.n	8007eac <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d115      	bne.n	8007eac <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <vPortFree+0xa8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	43db      	mvns	r3, r3
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e90:	f001 fb80 	bl	8009594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <vPortFree+0xac>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4a06      	ldr	r2, [pc, #24]	; (8007eb8 <vPortFree+0xac>)
 8007ea0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ea2:	6938      	ldr	r0, [r7, #16]
 8007ea4:	f000 f86c 	bl	8007f80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ea8:	f001 fb82 	bl	80095b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eac:	bf00      	nop
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200047d0 	.word	0x200047d0
 8007eb8:	200047c8 	.word	0x200047c8

08007ebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ec2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ec8:	4b27      	ldr	r3, [pc, #156]	; (8007f68 <prvHeapInit+0xac>)
 8007eca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3307      	adds	r3, #7
 8007eda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <prvHeapInit+0xac>)
 8007eec:	4413      	add	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	; (8007f6c <prvHeapInit+0xb0>)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007efa:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <prvHeapInit+0xb0>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f08:	2208      	movs	r2, #8
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1a9b      	subs	r3, r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0307 	bic.w	r3, r3, #7
 8007f16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <prvHeapInit+0xb4>)
 8007f1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <prvHeapInit+0xb4>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <prvHeapInit+0xb4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <prvHeapInit+0xb4>)
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <prvHeapInit+0xb8>)
 8007f4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <prvHeapInit+0xbc>)
 8007f52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <prvHeapInit+0xc0>)
 8007f56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f5a:	601a      	str	r2, [r3, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000bbc 	.word	0x20000bbc
 8007f6c:	200047bc 	.word	0x200047bc
 8007f70:	200047c4 	.word	0x200047c4
 8007f74:	200047cc 	.word	0x200047cc
 8007f78:	200047c8 	.word	0x200047c8
 8007f7c:	200047d0 	.word	0x200047d0

08007f80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f88:	4b28      	ldr	r3, [pc, #160]	; (800802c <prvInsertBlockIntoFreeList+0xac>)
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	e002      	b.n	8007f94 <prvInsertBlockIntoFreeList+0x14>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d8f7      	bhi.n	8007f8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d108      	bne.n	8007fc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	441a      	add	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d118      	bne.n	8008008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b15      	ldr	r3, [pc, #84]	; (8008030 <prvInsertBlockIntoFreeList+0xb0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d00d      	beq.n	8007ffe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	441a      	add	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e008      	b.n	8008010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <prvInsertBlockIntoFreeList+0xb0>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e003      	b.n	8008010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d002      	beq.n	800801e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	200047bc 	.word	0x200047bc
 8008030:	200047c4 	.word	0x200047c4

08008034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f103 0208 	add.w	r2, r3, #8
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f103 0208 	add.w	r2, r3, #8
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f103 0208 	add.w	r2, r3, #8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d103      	bne.n	80080f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e00c      	b.n	8008110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3308      	adds	r3, #8
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e002      	b.n	8008104 <vListInsert+0x2e>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	d2f6      	bcs.n	80080fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6892      	ldr	r2, [r2, #8]
 800815e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6852      	ldr	r2, [r2, #4]
 8008168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d103      	bne.n	800817c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	1e5a      	subs	r2, r3, #1
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b04      	subs	r3, #4
 80081ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f023 0201 	bic.w	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3b04      	subs	r3, #4
 80081ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081cc:	4a0c      	ldr	r2, [pc, #48]	; (8008200 <pxPortInitialiseStack+0x64>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3b14      	subs	r3, #20
 80081d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3b04      	subs	r3, #4
 80081e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f06f 0202 	mvn.w	r2, #2
 80081ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3b20      	subs	r3, #32
 80081f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	08008205 	.word	0x08008205

08008204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800820e:	4b11      	ldr	r3, [pc, #68]	; (8008254 <prvTaskExitError+0x50>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d009      	beq.n	800822c <prvTaskExitError+0x28>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e7fe      	b.n	800822a <prvTaskExitError+0x26>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800823e:	bf00      	nop
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0fc      	beq.n	8008240 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	2000046c 	.word	0x2000046c
	...

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	200047dc 	.word	0x200047dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008288:	4808      	ldr	r0, [pc, #32]	; (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082aa:	bf00      	nop
 80082ac:	e000ed08 	.word	0xe000ed08

080082b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082b6:	4b44      	ldr	r3, [pc, #272]	; (80083c8 <xPortStartScheduler+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a44      	ldr	r2, [pc, #272]	; (80083cc <xPortStartScheduler+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d109      	bne.n	80082d4 <xPortStartScheduler+0x24>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	e7fe      	b.n	80082d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082d4:	4b3c      	ldr	r3, [pc, #240]	; (80083c8 <xPortStartScheduler+0x118>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a3d      	ldr	r2, [pc, #244]	; (80083d0 <xPortStartScheduler+0x120>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d109      	bne.n	80082f2 <xPortStartScheduler+0x42>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e7fe      	b.n	80082f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082f2:	4b38      	ldr	r3, [pc, #224]	; (80083d4 <xPortStartScheduler+0x124>)
 80082f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <xPortStartScheduler+0x128>)
 8008318:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800831a:	4b30      	ldr	r3, [pc, #192]	; (80083dc <xPortStartScheduler+0x12c>)
 800831c:	2207      	movs	r2, #7
 800831e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008320:	e009      	b.n	8008336 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008322:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <xPortStartScheduler+0x12c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a2c      	ldr	r2, [pc, #176]	; (80083dc <xPortStartScheduler+0x12c>)
 800832a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	b2db      	uxtb	r3, r3
 8008334:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d0ef      	beq.n	8008322 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <xPortStartScheduler+0x12c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f1c3 0307 	rsb	r3, r3, #7
 800834a:	2b04      	cmp	r3, #4
 800834c:	d009      	beq.n	8008362 <xPortStartScheduler+0xb2>
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	e7fe      	b.n	8008360 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008362:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <xPortStartScheduler+0x12c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <xPortStartScheduler+0x12c>)
 800836a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800836c:	4b1b      	ldr	r3, [pc, #108]	; (80083dc <xPortStartScheduler+0x12c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008374:	4a19      	ldr	r2, [pc, #100]	; (80083dc <xPortStartScheduler+0x12c>)
 8008376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	b2da      	uxtb	r2, r3
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <xPortStartScheduler+0x130>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <xPortStartScheduler+0x130>)
 8008386:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800838a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800838c:	4b14      	ldr	r3, [pc, #80]	; (80083e0 <xPortStartScheduler+0x130>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <xPortStartScheduler+0x130>)
 8008392:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008398:	f000 f8d6 	bl	8008548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <xPortStartScheduler+0x134>)
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083a2:	f000 f8f5 	bl	8008590 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <xPortStartScheduler+0x138>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0f      	ldr	r2, [pc, #60]	; (80083e8 <xPortStartScheduler+0x138>)
 80083ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083b2:	f7ff ff69 	bl	8008288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083b6:	f001 fa77 	bl	80098a8 <vTaskSwitchContext>
	prvTaskExitError();
 80083ba:	f7ff ff23 	bl	8008204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed00 	.word	0xe000ed00
 80083cc:	410fc271 	.word	0x410fc271
 80083d0:	410fc270 	.word	0x410fc270
 80083d4:	e000e400 	.word	0xe000e400
 80083d8:	200047d4 	.word	0x200047d4
 80083dc:	200047d8 	.word	0x200047d8
 80083e0:	e000ed20 	.word	0xe000ed20
 80083e4:	2000046c 	.word	0x2000046c
 80083e8:	e000ef34 	.word	0xe000ef34

080083ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <vPortEnterCritical+0x54>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <vPortEnterCritical+0x54>)
 800840c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800840e:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <vPortEnterCritical+0x54>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10e      	bne.n	8008434 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortEnterCritical+0x58>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <vPortEnterCritical+0x48>
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	e7fe      	b.n	8008432 <vPortEnterCritical+0x46>
	}
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	2000046c 	.word	0x2000046c
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800844e:	4b11      	ldr	r3, [pc, #68]	; (8008494 <vPortExitCritical+0x4c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <vPortExitCritical+0x22>
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	e7fe      	b.n	8008468 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <vPortExitCritical+0x4c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3b01      	subs	r3, #1
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <vPortExitCritical+0x4c>)
 8008472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <vPortExitCritical+0x4c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <vPortExitCritical+0x3e>
 800847c:	2300      	movs	r3, #0
 800847e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	2000046c 	.word	0x2000046c
	...

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	f01e 0f10 	tst.w	lr, #16
 80084b0:	bf08      	it	eq
 80084b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	6010      	str	r0, [r2, #0]
 80084bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084c4:	f380 8811 	msr	BASEPRI, r0
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f001 f9ea 	bl	80098a8 <vTaskSwitchContext>
 80084d4:	f04f 0000 	mov.w	r0, #0
 80084d8:	f380 8811 	msr	BASEPRI, r0
 80084dc:	bc09      	pop	{r0, r3}
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	6808      	ldr	r0, [r1, #0]
 80084e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e6:	f01e 0f10 	tst.w	lr, #16
 80084ea:	bf08      	it	eq
 80084ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084f0:	f380 8809 	msr	PSP, r0
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst>:
 8008500:	200047dc 	.word	0x200047dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008520:	f001 f904 	bl	800972c <xTaskIncrementTick>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <SysTick_Handler+0x3c>)
 800852c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <vPortSetupTimerInterrupt+0x34>)
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <vPortSetupTimerInterrupt+0x38>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <vPortSetupTimerInterrupt+0x3c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <vPortSetupTimerInterrupt+0x40>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <vPortSetupTimerInterrupt+0x44>)
 8008566:	3b01      	subs	r3, #1
 8008568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856a:	4b04      	ldr	r3, [pc, #16]	; (800857c <vPortSetupTimerInterrupt+0x34>)
 800856c:	2207      	movs	r2, #7
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e010 	.word	0xe000e010
 8008580:	e000e018 	.word	0xe000e018
 8008584:	20000460 	.word	0x20000460
 8008588:	10624dd3 	.word	0x10624dd3
 800858c:	e000e014 	.word	0xe000e014

08008590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085a0 <vPortEnableVFP+0x10>
 8008594:	6801      	ldr	r1, [r0, #0]
 8008596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800859a:	6001      	str	r1, [r0, #0]
 800859c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800859e:	bf00      	nop
 80085a0:	e000ed88 	.word	0xe000ed88

080085a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085aa:	f3ef 8305 	mrs	r3, IPSR
 80085ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d913      	bls.n	80085de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085b6:	4a16      	ldr	r2, [pc, #88]	; (8008610 <vPortValidateInterruptPriority+0x6c>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085c0:	4b14      	ldr	r3, [pc, #80]	; (8008614 <vPortValidateInterruptPriority+0x70>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	7afa      	ldrb	r2, [r7, #11]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d209      	bcs.n	80085de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	607b      	str	r3, [r7, #4]
 80085dc:	e7fe      	b.n	80085dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <vPortValidateInterruptPriority+0x74>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085e6:	4b0d      	ldr	r3, [pc, #52]	; (800861c <vPortValidateInterruptPriority+0x78>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d909      	bls.n	8008602 <vPortValidateInterruptPriority+0x5e>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	e7fe      	b.n	8008600 <vPortValidateInterruptPriority+0x5c>
	}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	e000e3f0 	.word	0xe000e3f0
 8008614:	200047d4 	.word	0x200047d4
 8008618:	e000ed0c 	.word	0xe000ed0c
 800861c:	200047d8 	.word	0x200047d8

08008620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <xQueueGenericReset+0x28>
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60bb      	str	r3, [r7, #8]
 8008646:	e7fe      	b.n	8008646 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008648:	f7ff fed0 	bl	80083ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008654:	68f9      	ldr	r1, [r7, #12]
 8008656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008658:	fb01 f303 	mul.w	r3, r1, r3
 800865c:	441a      	add	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008678:	3b01      	subs	r3, #1
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	441a      	add	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22ff      	movs	r2, #255	; 0xff
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	22ff      	movs	r2, #255	; 0xff
 8008694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d114      	bne.n	80086c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01a      	beq.n	80086dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3310      	adds	r3, #16
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f9a6 	bl	80099fc <xTaskRemoveFromEventList>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d012      	beq.n	80086dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <xQueueGenericReset+0xcc>)
 80086b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	e009      	b.n	80086dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3310      	adds	r3, #16
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff fcb1 	bl	8008034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3324      	adds	r3, #36	; 0x24
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff fcac 	bl	8008034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086dc:	f7ff feb4 	bl	8008448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086e0:	2301      	movs	r3, #1
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <xQueueGenericCreateStatic+0x28>
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
 8008716:	e7fe      	b.n	8008716 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <xQueueGenericCreateStatic+0x42>
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
 8008730:	e7fe      	b.n	8008730 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <xQueueGenericCreateStatic+0x4e>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <xQueueGenericCreateStatic+0x52>
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <xQueueGenericCreateStatic+0x54>
 8008742:	2300      	movs	r3, #0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <xQueueGenericCreateStatic+0x6c>
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	623b      	str	r3, [r7, #32]
 800875a:	e7fe      	b.n	800875a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <xQueueGenericCreateStatic+0x78>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <xQueueGenericCreateStatic+0x7c>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <xQueueGenericCreateStatic+0x7e>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <xQueueGenericCreateStatic+0x96>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	e7fe      	b.n	8008784 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008786:	2350      	movs	r3, #80	; 0x50
 8008788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b50      	cmp	r3, #80	; 0x50
 800878e:	d009      	beq.n	80087a4 <xQueueGenericCreateStatic+0xb4>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	e7fe      	b.n	80087a2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f842 	bl	800884e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3730      	adds	r7, #48	; 0x30
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af02      	add	r7, sp, #8
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <xQueueGenericCreate+0x28>
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	613b      	str	r3, [r7, #16]
 80087fa:	e7fe      	b.n	80087fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e004      	b.n	8008812 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3350      	adds	r3, #80	; 0x50
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fa36 	bl	8007c88 <pvPortMalloc>
 800881c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00f      	beq.n	8008844 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	3350      	adds	r3, #80	; 0x50
 8008828:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008832:	79fa      	ldrb	r2, [r7, #7]
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f805 	bl	800884e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008844:	69bb      	ldr	r3, [r7, #24]
	}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e002      	b.n	8008870 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800887c:	2101      	movs	r1, #1
 800887e:	69b8      	ldr	r0, [r7, #24]
 8008880:	f7ff fece 	bl	8008620 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	; 0x38
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <xQueueGenericSend+0x30>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c2:	e7fe      	b.n	80088c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <xQueueGenericSend+0x3e>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <xQueueGenericSend+0x42>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <xQueueGenericSend+0x44>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <xQueueGenericSend+0x5c>
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
 80088ee:	e7fe      	b.n	80088ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d103      	bne.n	80088fe <xQueueGenericSend+0x6a>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <xQueueGenericSend+0x6e>
 80088fe:	2301      	movs	r3, #1
 8008900:	e000      	b.n	8008904 <xQueueGenericSend+0x70>
 8008902:	2300      	movs	r3, #0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <xQueueGenericSend+0x88>
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	e7fe      	b.n	800891a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800891c:	f001 fa2a 	bl	8009d74 <xTaskGetSchedulerState>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <xQueueGenericSend+0x98>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <xQueueGenericSend+0x9c>
 800892c:	2301      	movs	r3, #1
 800892e:	e000      	b.n	8008932 <xQueueGenericSend+0x9e>
 8008930:	2300      	movs	r3, #0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <xQueueGenericSend+0xb6>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	e7fe      	b.n	8008948 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800894a:	f7ff fd4f 	bl	80083ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	429a      	cmp	r2, r3
 8008958:	d302      	bcc.n	8008960 <xQueueGenericSend+0xcc>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d129      	bne.n	80089b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008966:	f000 fa7c 	bl	8008e62 <prvCopyDataToQueue>
 800896a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d010      	beq.n	8008996 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	3324      	adds	r3, #36	; 0x24
 8008978:	4618      	mov	r0, r3
 800897a:	f001 f83f 	bl	80099fc <xTaskRemoveFromEventList>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008984:	4b3f      	ldr	r3, [pc, #252]	; (8008a84 <xQueueGenericSend+0x1f0>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	e00a      	b.n	80089ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800899c:	4b39      	ldr	r3, [pc, #228]	; (8008a84 <xQueueGenericSend+0x1f0>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089ac:	f7ff fd4c 	bl	8008448 <vPortExitCritical>
				return pdPASS;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e063      	b.n	8008a7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ba:	f7ff fd45 	bl	8008448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	e05c      	b.n	8008a7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f877 	bl	8009ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089d2:	2301      	movs	r3, #1
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089d6:	f7ff fd37 	bl	8008448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089da:	f000 fddb 	bl	8009594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089de:	f7ff fd05 	bl	80083ec <vPortEnterCritical>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d103      	bne.n	80089f8 <xQueueGenericSend+0x164>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d103      	bne.n	8008a0e <xQueueGenericSend+0x17a>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0e:	f7ff fd1b 	bl	8008448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a12:	1d3a      	adds	r2, r7, #4
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 f866 	bl	8009aec <xTaskCheckForTimeOut>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d124      	bne.n	8008a70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a28:	f000 fb13 	bl	8009052 <prvIsQueueFull>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d018      	beq.n	8008a64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	3310      	adds	r3, #16
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 ff90 	bl	8009960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a42:	f000 fa9e 	bl	8008f82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a46:	f000 fdb3 	bl	80095b0 <xTaskResumeAll>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f47f af7c 	bne.w	800894a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <xQueueGenericSend+0x1f0>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	e772      	b.n	800894a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a66:	f000 fa8c 	bl	8008f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a6a:	f000 fda1 	bl	80095b0 <xTaskResumeAll>
 8008a6e:	e76c      	b.n	800894a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a72:	f000 fa86 	bl	8008f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a76:	f000 fd9b 	bl	80095b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a7a:	2300      	movs	r3, #0
		}
	}
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3738      	adds	r7, #56	; 0x38
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08e      	sub	sp, #56	; 0x38
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <xQueueGenericSendFromISR+0x2c>
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <xQueueGenericSendFromISR+0x3a>
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <xQueueGenericSendFromISR+0x3e>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueGenericSendFromISR+0x40>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x58>
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	623b      	str	r3, [r7, #32]
 8008ade:	e7fe      	b.n	8008ade <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSendFromISR+0x66>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <xQueueGenericSendFromISR+0x6a>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueGenericSendFromISR+0x6c>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d109      	bne.n	8008b0c <xQueueGenericSendFromISR+0x84>
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	e7fe      	b.n	8008b0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b0c:	f7ff fd4a 	bl	80085a4 <vPortValidateInterruptPriority>
	__asm volatile
 8008b10:	f3ef 8211 	mrs	r2, BASEPRI
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	61ba      	str	r2, [r7, #24]
 8008b26:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d302      	bcc.n	8008b3e <xQueueGenericSendFromISR+0xb6>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d12c      	bne.n	8008b98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4e:	f000 f988 	bl	8008e62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d112      	bne.n	8008b82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d016      	beq.n	8008b92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	3324      	adds	r3, #36	; 0x24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 ff47 	bl	80099fc <xTaskRemoveFromEventList>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e007      	b.n	8008b92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b86:	3301      	adds	r3, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	b25a      	sxtb	r2, r3
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b92:	2301      	movs	r3, #1
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b96:	e001      	b.n	8008b9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3738      	adds	r7, #56	; 0x38
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08c      	sub	sp, #48	; 0x30
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <xQueueReceive+0x2e>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	623b      	str	r3, [r7, #32]
 8008bdc:	e7fe      	b.n	8008bdc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <xQueueReceive+0x3c>
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <xQueueReceive+0x40>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <xQueueReceive+0x42>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <xQueueReceive+0x5a>
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	61fb      	str	r3, [r7, #28]
 8008c08:	e7fe      	b.n	8008c08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c0a:	f001 f8b3 	bl	8009d74 <xTaskGetSchedulerState>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <xQueueReceive+0x6a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <xQueueReceive+0x6e>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <xQueueReceive+0x70>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d109      	bne.n	8008c38 <xQueueReceive+0x88>
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	e7fe      	b.n	8008c36 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c38:	f7ff fbd8 	bl	80083ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01f      	beq.n	8008c88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f000 f973 	bl	8008f36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	1e5a      	subs	r2, r3, #1
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	3310      	adds	r3, #16
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fec9 	bl	80099fc <xTaskRemoveFromEventList>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c70:	4b3c      	ldr	r3, [pc, #240]	; (8008d64 <xQueueReceive+0x1b4>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c80:	f7ff fbe2 	bl	8008448 <vPortExitCritical>
				return pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e069      	b.n	8008d5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c8e:	f7ff fbdb 	bl	8008448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c92:	2300      	movs	r3, #0
 8008c94:	e062      	b.n	8008d5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d106      	bne.n	8008caa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c9c:	f107 0310 	add.w	r3, r7, #16
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 ff0d 	bl	8009ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008caa:	f7ff fbcd 	bl	8008448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cae:	f000 fc71 	bl	8009594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cb2:	f7ff fb9b 	bl	80083ec <vPortEnterCritical>
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d103      	bne.n	8008ccc <xQueueReceive+0x11c>
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <xQueueReceive+0x132>
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce2:	f7ff fbb1 	bl	8008448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ce6:	1d3a      	adds	r2, r7, #4
 8008ce8:	f107 0310 	add.w	r3, r7, #16
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fefc 	bl	8009aec <xTaskCheckForTimeOut>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d123      	bne.n	8008d42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfc:	f000 f993 	bl	8009026 <prvIsQueueEmpty>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d017      	beq.n	8008d36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	3324      	adds	r3, #36	; 0x24
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fe26 	bl	8009960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d16:	f000 f934 	bl	8008f82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d1a:	f000 fc49 	bl	80095b0 <xTaskResumeAll>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d189      	bne.n	8008c38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008d24:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <xQueueReceive+0x1b4>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	e780      	b.n	8008c38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	f000 f923 	bl	8008f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d3c:	f000 fc38 	bl	80095b0 <xTaskResumeAll>
 8008d40:	e77a      	b.n	8008c38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d44:	f000 f91d 	bl	8008f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d48:	f000 fc32 	bl	80095b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4e:	f000 f96a 	bl	8009026 <prvIsQueueEmpty>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f43f af6f 	beq.w	8008c38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3730      	adds	r7, #48	; 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08e      	sub	sp, #56	; 0x38
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <xQueueReceiveFromISR+0x2a>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	623b      	str	r3, [r7, #32]
 8008d90:	e7fe      	b.n	8008d90 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <xQueueReceiveFromISR+0x38>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <xQueueReceiveFromISR+0x3c>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <xQueueReceiveFromISR+0x3e>
 8008da4:	2300      	movs	r3, #0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <xQueueReceiveFromISR+0x56>
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	e7fe      	b.n	8008dbc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dbe:	f7ff fbf1 	bl	80085a4 <vPortValidateInterruptPriority>
	__asm volatile
 8008dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	61ba      	str	r2, [r7, #24]
 8008dd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008dda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d02f      	beq.n	8008e4a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df8:	f000 f89d 	bl	8008f36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d112      	bne.n	8008e34 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	3310      	adds	r3, #16
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fdee 	bl	80099fc <xTaskRemoveFromEventList>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e007      	b.n	8008e44 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e38:	3301      	adds	r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	b25a      	sxtb	r2, r3
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e44:	2301      	movs	r3, #1
 8008e46:	637b      	str	r3, [r7, #52]	; 0x34
 8008e48:	e001      	b.n	8008e4e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3738      	adds	r7, #56	; 0x38
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d14d      	bne.n	8008f24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 ff8f 	bl	8009db0 <xTaskPriorityDisinherit>
 8008e92:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	e043      	b.n	8008f24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d119      	bne.n	8008ed6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6898      	ldr	r0, [r3, #8]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	461a      	mov	r2, r3
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	f001 fdc3 	bl	800aa38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	441a      	add	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d32b      	bcc.n	8008f24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	609a      	str	r2, [r3, #8]
 8008ed4:	e026      	b.n	8008f24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68d8      	ldr	r0, [r3, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	461a      	mov	r2, r3
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	f001 fda9 	bl	800aa38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	425b      	negs	r3, r3
 8008ef0:	441a      	add	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d207      	bcs.n	8008f12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	425b      	negs	r3, r3
 8008f0c:	441a      	add	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d105      	bne.n	8008f24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f2c:	697b      	ldr	r3, [r7, #20]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d018      	beq.n	8008f7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	441a      	add	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d303      	bcc.n	8008f6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68d9      	ldr	r1, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	461a      	mov	r2, r3
 8008f74:	6838      	ldr	r0, [r7, #0]
 8008f76:	f001 fd5f 	bl	800aa38 <memcpy>
	}
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f8a:	f7ff fa2f 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f96:	e011      	b.n	8008fbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d012      	beq.n	8008fc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3324      	adds	r3, #36	; 0x24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fd29 	bl	80099fc <xTaskRemoveFromEventList>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fb0:	f000 fdfc 	bl	8009bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dce9      	bgt.n	8008f98 <prvUnlockQueue+0x16>
 8008fc4:	e000      	b.n	8008fc8 <prvUnlockQueue+0x46>
					break;
 8008fc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	22ff      	movs	r2, #255	; 0xff
 8008fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fd0:	f7ff fa3a 	bl	8008448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fd4:	f7ff fa0a 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fe0:	e011      	b.n	8009006 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d012      	beq.n	8009010 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3310      	adds	r3, #16
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd04 	bl	80099fc <xTaskRemoveFromEventList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ffa:	f000 fdd7 	bl	8009bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	3b01      	subs	r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800900a:	2b00      	cmp	r3, #0
 800900c:	dce9      	bgt.n	8008fe2 <prvUnlockQueue+0x60>
 800900e:	e000      	b.n	8009012 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009010:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	22ff      	movs	r2, #255	; 0xff
 8009016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800901a:	f7ff fa15 	bl	8008448 <vPortExitCritical>
}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800902e:	f7ff f9dd 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d102      	bne.n	8009040 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800903a:	2301      	movs	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e001      	b.n	8009044 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009044:	f7ff fa00 	bl	8008448 <vPortExitCritical>

	return xReturn;
 8009048:	68fb      	ldr	r3, [r7, #12]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800905a:	f7ff f9c7 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	429a      	cmp	r2, r3
 8009068:	d102      	bne.n	8009070 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800906a:	2301      	movs	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e001      	b.n	8009074 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009074:	f7ff f9e8 	bl	8008448 <vPortExitCritical>

	return xReturn;
 8009078:	68fb      	ldr	r3, [r7, #12]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e014      	b.n	80090be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009094:	4a0e      	ldr	r2, [pc, #56]	; (80090d0 <vQueueAddToRegistry+0x4c>)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10b      	bne.n	80090b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090a0:	490b      	ldr	r1, [pc, #44]	; (80090d0 <vQueueAddToRegistry+0x4c>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090aa:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <vQueueAddToRegistry+0x4c>)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090b6:	e005      	b.n	80090c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b07      	cmp	r3, #7
 80090c2:	d9e7      	bls.n	8009094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20005478 	.word	0x20005478

080090d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090e4:	f7ff f982 	bl	80083ec <vPortEnterCritical>
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ee:	b25b      	sxtb	r3, r3
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f4:	d103      	bne.n	80090fe <vQueueWaitForMessageRestricted+0x2a>
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009104:	b25b      	sxtb	r3, r3
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d103      	bne.n	8009114 <vQueueWaitForMessageRestricted+0x40>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009114:	f7ff f998 	bl	8008448 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fc3d 	bl	80099a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800912e:	6978      	ldr	r0, [r7, #20]
 8009130:	f7ff ff27 	bl	8008f82 <prvUnlockQueue>
	}
 8009134:	bf00      	nop
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08e      	sub	sp, #56	; 0x38
 8009140:	af04      	add	r7, sp, #16
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <xTaskCreateStatic+0x28>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	623b      	str	r3, [r7, #32]
 8009162:	e7fe      	b.n	8009162 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <xTaskCreateStatic+0x42>
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	e7fe      	b.n	800917c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800917e:	235c      	movs	r3, #92	; 0x5c
 8009180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b5c      	cmp	r3, #92	; 0x5c
 8009186:	d009      	beq.n	800919c <xTaskCreateStatic+0x60>
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	e7fe      	b.n	800919a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01e      	beq.n	80091e0 <xTaskCreateStatic+0xa4>
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091ba:	2300      	movs	r3, #0
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	f107 0314 	add.w	r3, r7, #20
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f850 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091da:	f000 f8d3 	bl	8009384 <prvAddNewTaskToReadyList>
 80091de:	e001      	b.n	80091e4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091e4:	697b      	ldr	r3, [r7, #20]
	}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b08c      	sub	sp, #48	; 0x30
 80091f2:	af04      	add	r7, sp, #16
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd40 	bl	8007c88 <pvPortMalloc>
 8009208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009210:	205c      	movs	r0, #92	; 0x5c
 8009212:	f7fe fd39 	bl	8007c88 <pvPortMalloc>
 8009216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
 8009224:	e005      	b.n	8009232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f7fe fdf0 	bl	8007e0c <vPortFree>
 800922c:	e001      	b.n	8009232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d017      	beq.n	8009268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f80e 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800925c:	69f8      	ldr	r0, [r7, #28]
 800925e:	f000 f891 	bl	8009384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e002      	b.n	800926e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800926e:	69bb      	ldr	r3, [r7, #24]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	461a      	mov	r2, r3
 8009290:	21a5      	movs	r1, #165	; 0xa5
 8009292:	f001 fbf5 	bl	800aa80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092a0:	3b01      	subs	r3, #1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f023 0307 	bic.w	r3, r3, #7
 80092ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <prvInitialiseNewTask+0x56>
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	e7fe      	b.n	80092cc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e012      	b.n	80092fa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	7819      	ldrb	r1, [r3, #0]
 80092dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	3334      	adds	r3, #52	; 0x34
 80092e4:	460a      	mov	r2, r1
 80092e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b0f      	cmp	r3, #15
 80092fe:	d9e9      	bls.n	80092d4 <prvInitialiseNewTask+0x5c>
 8009300:	e000      	b.n	8009304 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009302:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	2b37      	cmp	r3, #55	; 0x37
 8009310:	d901      	bls.n	8009316 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009312:	2337      	movs	r3, #55	; 0x37
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009320:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2200      	movs	r2, #0
 8009326:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	3304      	adds	r3, #4
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fea1 	bl	8008074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	3318      	adds	r3, #24
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fe9c 	bl	8008074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009350:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2200      	movs	r2, #0
 8009356:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	68f9      	ldr	r1, [r7, #12]
 8009364:	69b8      	ldr	r0, [r7, #24]
 8009366:	f7fe ff19 	bl	800819c <pxPortInitialiseStack>
 800936a:	4602      	mov	r2, r0
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800937c:	bf00      	nop
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800938c:	f7ff f82e 	bl	80083ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009390:	4b2d      	ldr	r3, [pc, #180]	; (8009448 <prvAddNewTaskToReadyList+0xc4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a2c      	ldr	r2, [pc, #176]	; (8009448 <prvAddNewTaskToReadyList+0xc4>)
 8009398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800939a:	4b2c      	ldr	r3, [pc, #176]	; (800944c <prvAddNewTaskToReadyList+0xc8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093a2:	4a2a      	ldr	r2, [pc, #168]	; (800944c <prvAddNewTaskToReadyList+0xc8>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093a8:	4b27      	ldr	r3, [pc, #156]	; (8009448 <prvAddNewTaskToReadyList+0xc4>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d110      	bne.n	80093d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093b0:	f000 fc20 	bl	8009bf4 <prvInitialiseTaskLists>
 80093b4:	e00d      	b.n	80093d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093b6:	4b26      	ldr	r3, [pc, #152]	; (8009450 <prvAddNewTaskToReadyList+0xcc>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093be:	4b23      	ldr	r3, [pc, #140]	; (800944c <prvAddNewTaskToReadyList+0xc8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d802      	bhi.n	80093d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093cc:	4a1f      	ldr	r2, [pc, #124]	; (800944c <prvAddNewTaskToReadyList+0xc8>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093d2:	4b20      	ldr	r3, [pc, #128]	; (8009454 <prvAddNewTaskToReadyList+0xd0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	4a1e      	ldr	r2, [pc, #120]	; (8009454 <prvAddNewTaskToReadyList+0xd0>)
 80093da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093dc:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <prvAddNewTaskToReadyList+0xd0>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <prvAddNewTaskToReadyList+0xd4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d903      	bls.n	80093f8 <prvAddNewTaskToReadyList+0x74>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	4a18      	ldr	r2, [pc, #96]	; (8009458 <prvAddNewTaskToReadyList+0xd4>)
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4a15      	ldr	r2, [pc, #84]	; (800945c <prvAddNewTaskToReadyList+0xd8>)
 8009406:	441a      	add	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7fe fe3d 	bl	800808e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009414:	f7ff f818 	bl	8008448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009418:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <prvAddNewTaskToReadyList+0xcc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00e      	beq.n	800943e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <prvAddNewTaskToReadyList+0xc8>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	429a      	cmp	r2, r3
 800942c:	d207      	bcs.n	800943e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <prvAddNewTaskToReadyList+0xdc>)
 8009430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20004cb0 	.word	0x20004cb0
 800944c:	200047dc 	.word	0x200047dc
 8009450:	20004cbc 	.word	0x20004cbc
 8009454:	20004ccc 	.word	0x20004ccc
 8009458:	20004cb8 	.word	0x20004cb8
 800945c:	200047e0 	.word	0x200047e0
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d016      	beq.n	80094a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009476:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <vTaskDelay+0x60>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <vTaskDelay+0x2e>
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60bb      	str	r3, [r7, #8]
 8009490:	e7fe      	b.n	8009490 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009492:	f000 f87f 	bl	8009594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009496:	2100      	movs	r1, #0
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fcf5 	bl	8009e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800949e:	f000 f887 	bl	80095b0 <xTaskResumeAll>
 80094a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d107      	bne.n	80094ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <vTaskDelay+0x64>)
 80094ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20004cd8 	.word	0x20004cd8
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	; 0x28
 80094d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094da:	463a      	mov	r2, r7
 80094dc:	1d39      	adds	r1, r7, #4
 80094de:	f107 0308 	add.w	r3, r7, #8
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fb9c 	bl	8007c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	9202      	str	r2, [sp, #8]
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	2300      	movs	r3, #0
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	2300      	movs	r3, #0
 80094f8:	460a      	mov	r2, r1
 80094fa:	4920      	ldr	r1, [pc, #128]	; (800957c <vTaskStartScheduler+0xb0>)
 80094fc:	4820      	ldr	r0, [pc, #128]	; (8009580 <vTaskStartScheduler+0xb4>)
 80094fe:	f7ff fe1d 	bl	800913c <xTaskCreateStatic>
 8009502:	4602      	mov	r2, r0
 8009504:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <vTaskStartScheduler+0xb8>)
 8009506:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009508:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <vTaskStartScheduler+0xb8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e001      	b.n	800951a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d102      	bne.n	8009526 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009520:	f000 fd06 	bl	8009f30 <xTimerCreateTimerTask>
 8009524:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d115      	bne.n	8009558 <vTaskStartScheduler+0x8c>
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <vTaskStartScheduler+0xbc>)
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <vTaskStartScheduler+0xc0>)
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800954c:	4b10      	ldr	r3, [pc, #64]	; (8009590 <vTaskStartScheduler+0xc4>)
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009552:	f7fe fead 	bl	80082b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009556:	e00d      	b.n	8009574 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955e:	d109      	bne.n	8009574 <vTaskStartScheduler+0xa8>
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e7fe      	b.n	8009572 <vTaskStartScheduler+0xa6>
}
 8009574:	bf00      	nop
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	0800b290 	.word	0x0800b290
 8009580:	08009bc5 	.word	0x08009bc5
 8009584:	20004cd4 	.word	0x20004cd4
 8009588:	20004cd0 	.word	0x20004cd0
 800958c:	20004cbc 	.word	0x20004cbc
 8009590:	20004cb4 	.word	0x20004cb4

08009594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009598:	4b04      	ldr	r3, [pc, #16]	; (80095ac <vTaskSuspendAll+0x18>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	4a03      	ldr	r2, [pc, #12]	; (80095ac <vTaskSuspendAll+0x18>)
 80095a0:	6013      	str	r3, [r2, #0]
}
 80095a2:	bf00      	nop
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20004cd8 	.word	0x20004cd8

080095b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095be:	4b41      	ldr	r3, [pc, #260]	; (80096c4 <xTaskResumeAll+0x114>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <xTaskResumeAll+0x2a>
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	e7fe      	b.n	80095d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095da:	f7fe ff07 	bl	80083ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095de:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <xTaskResumeAll+0x114>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	4a37      	ldr	r2, [pc, #220]	; (80096c4 <xTaskResumeAll+0x114>)
 80095e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095e8:	4b36      	ldr	r3, [pc, #216]	; (80096c4 <xTaskResumeAll+0x114>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d162      	bne.n	80096b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095f0:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <xTaskResumeAll+0x118>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d05e      	beq.n	80096b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095f8:	e02f      	b.n	800965a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80095fa:	4b34      	ldr	r3, [pc, #208]	; (80096cc <xTaskResumeAll+0x11c>)
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3318      	adds	r3, #24
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fd9e 	bl	8008148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3304      	adds	r3, #4
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fd99 	bl	8008148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <xTaskResumeAll+0x120>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d903      	bls.n	800962a <xTaskResumeAll+0x7a>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <xTaskResumeAll+0x120>)
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4a27      	ldr	r2, [pc, #156]	; (80096d4 <xTaskResumeAll+0x124>)
 8009638:	441a      	add	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3304      	adds	r3, #4
 800963e:	4619      	mov	r1, r3
 8009640:	4610      	mov	r0, r2
 8009642:	f7fe fd24 	bl	800808e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964a:	4b23      	ldr	r3, [pc, #140]	; (80096d8 <xTaskResumeAll+0x128>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	429a      	cmp	r2, r3
 8009652:	d302      	bcc.n	800965a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009654:	4b21      	ldr	r3, [pc, #132]	; (80096dc <xTaskResumeAll+0x12c>)
 8009656:	2201      	movs	r2, #1
 8009658:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800965a:	4b1c      	ldr	r3, [pc, #112]	; (80096cc <xTaskResumeAll+0x11c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1cb      	bne.n	80095fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009668:	f000 fb5e 	bl	8009d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800966c:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <xTaskResumeAll+0x130>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d010      	beq.n	800969a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009678:	f000 f858 	bl	800972c <xTaskIncrementTick>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009682:	4b16      	ldr	r3, [pc, #88]	; (80096dc <xTaskResumeAll+0x12c>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3b01      	subs	r3, #1
 800968c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1f1      	bne.n	8009678 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009694:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <xTaskResumeAll+0x130>)
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <xTaskResumeAll+0x12c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <xTaskResumeAll+0x134>)
 80096a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096b6:	f7fe fec7 	bl	8008448 <vPortExitCritical>

	return xAlreadyYielded;
 80096ba:	68bb      	ldr	r3, [r7, #8]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20004cd8 	.word	0x20004cd8
 80096c8:	20004cb0 	.word	0x20004cb0
 80096cc:	20004c70 	.word	0x20004c70
 80096d0:	20004cb8 	.word	0x20004cb8
 80096d4:	200047e0 	.word	0x200047e0
 80096d8:	200047dc 	.word	0x200047dc
 80096dc:	20004cc4 	.word	0x20004cc4
 80096e0:	20004cc0 	.word	0x20004cc0
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <xTaskGetTickCount+0x1c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096f4:	687b      	ldr	r3, [r7, #4]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20004cb4 	.word	0x20004cb4

08009708 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970e:	f7fe ff49 	bl	80085a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009716:	4b04      	ldr	r3, [pc, #16]	; (8009728 <xTaskGetTickCountFromISR+0x20>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800971c:	683b      	ldr	r3, [r7, #0]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20004cb4 	.word	0x20004cb4

0800972c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009736:	4b51      	ldr	r3, [pc, #324]	; (800987c <xTaskIncrementTick+0x150>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 808d 	bne.w	800985a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009740:	4b4f      	ldr	r3, [pc, #316]	; (8009880 <xTaskIncrementTick+0x154>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009748:	4a4d      	ldr	r2, [pc, #308]	; (8009880 <xTaskIncrementTick+0x154>)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11f      	bne.n	8009794 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009754:	4b4b      	ldr	r3, [pc, #300]	; (8009884 <xTaskIncrementTick+0x158>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <xTaskIncrementTick+0x46>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	e7fe      	b.n	8009770 <xTaskIncrementTick+0x44>
 8009772:	4b44      	ldr	r3, [pc, #272]	; (8009884 <xTaskIncrementTick+0x158>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	4b43      	ldr	r3, [pc, #268]	; (8009888 <xTaskIncrementTick+0x15c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a41      	ldr	r2, [pc, #260]	; (8009884 <xTaskIncrementTick+0x158>)
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	4a41      	ldr	r2, [pc, #260]	; (8009888 <xTaskIncrementTick+0x15c>)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	4b41      	ldr	r3, [pc, #260]	; (800988c <xTaskIncrementTick+0x160>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	4a3f      	ldr	r2, [pc, #252]	; (800988c <xTaskIncrementTick+0x160>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	f000 faca 	bl	8009d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009794:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xTaskIncrementTick+0x164>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	429a      	cmp	r2, r3
 800979c:	d34e      	bcc.n	800983c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800979e:	4b39      	ldr	r3, [pc, #228]	; (8009884 <xTaskIncrementTick+0x158>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <xTaskIncrementTick+0x80>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <xTaskIncrementTick+0x82>
 80097ac:	2300      	movs	r3, #0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b2:	4b37      	ldr	r3, [pc, #220]	; (8009890 <xTaskIncrementTick+0x164>)
 80097b4:	f04f 32ff 	mov.w	r2, #4294967295
 80097b8:	601a      	str	r2, [r3, #0]
					break;
 80097ba:	e03f      	b.n	800983c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097bc:	4b31      	ldr	r3, [pc, #196]	; (8009884 <xTaskIncrementTick+0x158>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d203      	bcs.n	80097dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097d4:	4a2e      	ldr	r2, [pc, #184]	; (8009890 <xTaskIncrementTick+0x164>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6013      	str	r3, [r2, #0]
						break;
 80097da:	e02f      	b.n	800983c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fcb1 	bl	8008148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	3318      	adds	r3, #24
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe fca8 	bl	8008148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fc:	4b25      	ldr	r3, [pc, #148]	; (8009894 <xTaskIncrementTick+0x168>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d903      	bls.n	800980c <xTaskIncrementTick+0xe0>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a22      	ldr	r2, [pc, #136]	; (8009894 <xTaskIncrementTick+0x168>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4a1f      	ldr	r2, [pc, #124]	; (8009898 <xTaskIncrementTick+0x16c>)
 800981a:	441a      	add	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fe fc33 	bl	800808e <vListInsertEnd>
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */

						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <xTaskIncrementTick+0x170>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	429a      	cmp	r2, r3
 8009834:	d3b3      	bcc.n	800979e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009836:	2301      	movs	r3, #1
 8009838:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800983a:	e7b0      	b.n	800979e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800983c:	4b17      	ldr	r3, [pc, #92]	; (800989c <xTaskIncrementTick+0x170>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009842:	4915      	ldr	r1, [pc, #84]	; (8009898 <xTaskIncrementTick+0x16c>)
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d907      	bls.n	8009864 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e004      	b.n	8009864 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800985a:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <xTaskIncrementTick+0x174>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3301      	adds	r3, #1
 8009860:	4a0f      	ldr	r2, [pc, #60]	; (80098a0 <xTaskIncrementTick+0x174>)
 8009862:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009864:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <xTaskIncrementTick+0x178>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009870:	697b      	ldr	r3, [r7, #20]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20004cd8 	.word	0x20004cd8
 8009880:	20004cb4 	.word	0x20004cb4
 8009884:	20004c68 	.word	0x20004c68
 8009888:	20004c6c 	.word	0x20004c6c
 800988c:	20004cc8 	.word	0x20004cc8
 8009890:	20004cd0 	.word	0x20004cd0
 8009894:	20004cb8 	.word	0x20004cb8
 8009898:	200047e0 	.word	0x200047e0
 800989c:	200047dc 	.word	0x200047dc
 80098a0:	20004cc0 	.word	0x20004cc0
 80098a4:	20004cc4 	.word	0x20004cc4

080098a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098ae:	4b27      	ldr	r3, [pc, #156]	; (800994c <vTaskSwitchContext+0xa4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098b6:	4b26      	ldr	r3, [pc, #152]	; (8009950 <vTaskSwitchContext+0xa8>)
 80098b8:	2201      	movs	r2, #1
 80098ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098bc:	e040      	b.n	8009940 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80098be:	4b24      	ldr	r3, [pc, #144]	; (8009950 <vTaskSwitchContext+0xa8>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80098c4:	4b23      	ldr	r3, [pc, #140]	; (8009954 <vTaskSwitchContext+0xac>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	e00f      	b.n	80098ec <vTaskSwitchContext+0x44>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <vTaskSwitchContext+0x3e>
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	607b      	str	r3, [r7, #4]
 80098e4:	e7fe      	b.n	80098e4 <vTaskSwitchContext+0x3c>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	491a      	ldr	r1, [pc, #104]	; (8009958 <vTaskSwitchContext+0xb0>)
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0e5      	beq.n	80098cc <vTaskSwitchContext+0x24>
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4a13      	ldr	r2, [pc, #76]	; (8009958 <vTaskSwitchContext+0xb0>)
 800990c:	4413      	add	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	605a      	str	r2, [r3, #4]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	3308      	adds	r3, #8
 8009922:	429a      	cmp	r2, r3
 8009924:	d104      	bne.n	8009930 <vTaskSwitchContext+0x88>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	4a09      	ldr	r2, [pc, #36]	; (800995c <vTaskSwitchContext+0xb4>)
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	4a06      	ldr	r2, [pc, #24]	; (8009954 <vTaskSwitchContext+0xac>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6013      	str	r3, [r2, #0]
}
 8009940:	bf00      	nop
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	20004cd8 	.word	0x20004cd8
 8009950:	20004cc4 	.word	0x20004cc4
 8009954:	20004cb8 	.word	0x20004cb8
 8009958:	200047e0 	.word	0x200047e0
 800995c:	200047dc 	.word	0x200047dc

08009960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <vTaskPlaceOnEventList+0x24>
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e7fe      	b.n	8009982 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <vTaskPlaceOnEventList+0x44>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3318      	adds	r3, #24
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7fe fba2 	bl	80080d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009992:	2101      	movs	r1, #1
 8009994:	6838      	ldr	r0, [r7, #0]
 8009996:	f000 fa77 	bl	8009e88 <prvAddCurrentTaskToDelayedList>
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200047dc 	.word	0x200047dc

080099a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <vTaskPlaceOnEventListRestricted+0x26>
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e7fe      	b.n	80099cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ce:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3318      	adds	r3, #24
 80099d4:	4619      	mov	r1, r3
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7fe fb59 	bl	800808e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80099e2:	f04f 33ff 	mov.w	r3, #4294967295
 80099e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	68b8      	ldr	r0, [r7, #8]
 80099ec:	f000 fa4c 	bl	8009e88 <prvAddCurrentTaskToDelayedList>
	}
 80099f0:	bf00      	nop
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200047dc 	.word	0x200047dc

080099fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d109      	bne.n	8009a26 <xTaskRemoveFromEventList+0x2a>
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e7fe      	b.n	8009a24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3318      	adds	r3, #24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fb8c 	bl	8008148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a30:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <xTaskRemoveFromEventList+0xac>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d11d      	bne.n	8009a74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fb83 	bl	8008148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <xTaskRemoveFromEventList+0xb0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d903      	bls.n	8009a56 <xTaskRemoveFromEventList+0x5a>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	4a16      	ldr	r2, [pc, #88]	; (8009aac <xTaskRemoveFromEventList+0xb0>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4a13      	ldr	r2, [pc, #76]	; (8009ab0 <xTaskRemoveFromEventList+0xb4>)
 8009a64:	441a      	add	r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fe fb0e 	bl	800808e <vListInsertEnd>
 8009a72:	e005      	b.n	8009a80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	3318      	adds	r3, #24
 8009a78:	4619      	mov	r1, r3
 8009a7a:	480e      	ldr	r0, [pc, #56]	; (8009ab4 <xTaskRemoveFromEventList+0xb8>)
 8009a7c:	f7fe fb07 	bl	800808e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <xTaskRemoveFromEventList+0xbc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d905      	bls.n	8009a9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a92:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <xTaskRemoveFromEventList+0xc0>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e001      	b.n	8009a9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009a9e:	697b      	ldr	r3, [r7, #20]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20004cd8 	.word	0x20004cd8
 8009aac:	20004cb8 	.word	0x20004cb8
 8009ab0:	200047e0 	.word	0x200047e0
 8009ab4:	20004c70 	.word	0x20004c70
 8009ab8:	200047dc 	.word	0x200047dc
 8009abc:	20004cc4 	.word	0x20004cc4

08009ac0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <vTaskInternalSetTimeOutState+0x24>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <vTaskInternalSetTimeOutState+0x28>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	20004cc8 	.word	0x20004cc8
 8009ae8:	20004cb4 	.word	0x20004cb4

08009aec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <xTaskCheckForTimeOut+0x24>
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	e7fe      	b.n	8009b0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d109      	bne.n	8009b2a <xTaskCheckForTimeOut+0x3e>
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e7fe      	b.n	8009b28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009b2a:	f7fe fc5f 	bl	80083ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <xTaskCheckForTimeOut+0xb8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b46:	d102      	bne.n	8009b4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61fb      	str	r3, [r7, #28]
 8009b4c:	e023      	b.n	8009b96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b15      	ldr	r3, [pc, #84]	; (8009ba8 <xTaskCheckForTimeOut+0xbc>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d007      	beq.n	8009b6a <xTaskCheckForTimeOut+0x7e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d302      	bcc.n	8009b6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	61fb      	str	r3, [r7, #28]
 8009b68:	e015      	b.n	8009b96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d20b      	bcs.n	8009b8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff9d 	bl	8009ac0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b86:	2300      	movs	r3, #0
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	e004      	b.n	8009b96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b92:	2301      	movs	r3, #1
 8009b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b96:	f7fe fc57 	bl	8008448 <vPortExitCritical>

	return xReturn;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20004cb4 	.word	0x20004cb4
 8009ba8:	20004cc8 	.word	0x20004cc8

08009bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <vTaskMissedYield+0x14>)
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	20004cc4 	.word	0x20004cc4

08009bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bcc:	f000 f852 	bl	8009c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <prvIdleTask+0x28>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d9f9      	bls.n	8009bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <prvIdleTask+0x2c>)
 8009bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009be8:	e7f0      	b.n	8009bcc <prvIdleTask+0x8>
 8009bea:	bf00      	nop
 8009bec:	200047e0 	.word	0x200047e0
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	e00c      	b.n	8009c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4a12      	ldr	r2, [pc, #72]	; (8009c54 <prvInitialiseTaskLists+0x60>)
 8009c0c:	4413      	add	r3, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fa10 	bl	8008034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b37      	cmp	r3, #55	; 0x37
 8009c1e:	d9ef      	bls.n	8009c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c20:	480d      	ldr	r0, [pc, #52]	; (8009c58 <prvInitialiseTaskLists+0x64>)
 8009c22:	f7fe fa07 	bl	8008034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c26:	480d      	ldr	r0, [pc, #52]	; (8009c5c <prvInitialiseTaskLists+0x68>)
 8009c28:	f7fe fa04 	bl	8008034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c2c:	480c      	ldr	r0, [pc, #48]	; (8009c60 <prvInitialiseTaskLists+0x6c>)
 8009c2e:	f7fe fa01 	bl	8008034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c32:	480c      	ldr	r0, [pc, #48]	; (8009c64 <prvInitialiseTaskLists+0x70>)
 8009c34:	f7fe f9fe 	bl	8008034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c38:	480b      	ldr	r0, [pc, #44]	; (8009c68 <prvInitialiseTaskLists+0x74>)
 8009c3a:	f7fe f9fb 	bl	8008034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <prvInitialiseTaskLists+0x78>)
 8009c40:	4a05      	ldr	r2, [pc, #20]	; (8009c58 <prvInitialiseTaskLists+0x64>)
 8009c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <prvInitialiseTaskLists+0x7c>)
 8009c46:	4a05      	ldr	r2, [pc, #20]	; (8009c5c <prvInitialiseTaskLists+0x68>)
 8009c48:	601a      	str	r2, [r3, #0]
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	200047e0 	.word	0x200047e0
 8009c58:	20004c40 	.word	0x20004c40
 8009c5c:	20004c54 	.word	0x20004c54
 8009c60:	20004c70 	.word	0x20004c70
 8009c64:	20004c84 	.word	0x20004c84
 8009c68:	20004c9c 	.word	0x20004c9c
 8009c6c:	20004c68 	.word	0x20004c68
 8009c70:	20004c6c 	.word	0x20004c6c

08009c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c7a:	e019      	b.n	8009cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c7c:	f7fe fbb6 	bl	80083ec <vPortEnterCritical>
			{
 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009c80:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <prvCheckTasksWaitingTermination+0x4c>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fa5b 	bl	8008148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <prvCheckTasksWaitingTermination+0x50>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4a0a      	ldr	r2, [pc, #40]	; (8009cc4 <prvCheckTasksWaitingTermination+0x50>)
 8009c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <prvCheckTasksWaitingTermination+0x54>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4a09      	ldr	r2, [pc, #36]	; (8009cc8 <prvCheckTasksWaitingTermination+0x54>)
 8009ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ca6:	f7fe fbcf 	bl	8008448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f80e 	bl	8009ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <prvCheckTasksWaitingTermination+0x54>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e1      	bne.n	8009c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20004c84 	.word	0x20004c84
 8009cc4:	20004cb0 	.word	0x20004cb0
 8009cc8:	20004c98 	.word	0x20004c98

08009ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d108      	bne.n	8009cf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe f892 	bl	8007e0c <vPortFree>
				vPortFree( pxTCB );
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7fe f88f 	bl	8007e0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cee:	e017      	b.n	8009d20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d103      	bne.n	8009d02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7fe f886 	bl	8007e0c <vPortFree>
	}
 8009d00:	e00e      	b.n	8009d20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d009      	beq.n	8009d20 <prvDeleteTCB+0x54>
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	e7fe      	b.n	8009d1e <prvDeleteTCB+0x52>
	}
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <prvResetNextTaskUnblockTime+0x44>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <prvResetNextTaskUnblockTime+0x14>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e000      	b.n	8009d3e <prvResetNextTaskUnblockTime+0x16>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <prvResetNextTaskUnblockTime+0x48>)
 8009d44:	f04f 32ff 	mov.w	r2, #4294967295
 8009d48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d4a:	e008      	b.n	8009d5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d4c:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <prvResetNextTaskUnblockTime+0x44>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4a05      	ldr	r2, [pc, #20]	; (8009d70 <prvResetNextTaskUnblockTime+0x48>)
 8009d5c:	6013      	str	r3, [r2, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20004c68 	.word	0x20004c68
 8009d70:	20004cd0 	.word	0x20004cd0

08009d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <xTaskGetSchedulerState+0x34>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d82:	2301      	movs	r3, #1
 8009d84:	607b      	str	r3, [r7, #4]
 8009d86:	e008      	b.n	8009d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d88:	4b08      	ldr	r3, [pc, #32]	; (8009dac <xTaskGetSchedulerState+0x38>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d90:	2302      	movs	r3, #2
 8009d92:	607b      	str	r3, [r7, #4]
 8009d94:	e001      	b.n	8009d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d96:	2300      	movs	r3, #0
 8009d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d9a:	687b      	ldr	r3, [r7, #4]
	}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	20004cbc 	.word	0x20004cbc
 8009dac:	20004cd8 	.word	0x20004cd8

08009db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d054      	beq.n	8009e70 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dc6:	4b2d      	ldr	r3, [pc, #180]	; (8009e7c <xTaskPriorityDisinherit+0xcc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d009      	beq.n	8009de4 <xTaskPriorityDisinherit+0x34>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	e7fe      	b.n	8009de2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <xTaskPriorityDisinherit+0x50>
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	e7fe      	b.n	8009dfe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e04:	1e5a      	subs	r2, r3, #1
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d02c      	beq.n	8009e70 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d128      	bne.n	8009e70 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe f990 	bl	8008148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <xTaskPriorityDisinherit+0xd0>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d903      	bls.n	8009e50 <xTaskPriorityDisinherit+0xa0>
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <xTaskPriorityDisinherit+0xd0>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <xTaskPriorityDisinherit+0xd4>)
 8009e5e:	441a      	add	r2, r3
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe f911 	bl	800808e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	200047dc 	.word	0x200047dc
 8009e80:	20004cb8 	.word	0x20004cb8
 8009e84:	200047e0 	.word	0x200047e0

08009e88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e98:	4b20      	ldr	r3, [pc, #128]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe f952 	bl	8008148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eaa:	d10a      	bne.n	8009ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eb2:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4819      	ldr	r0, [pc, #100]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ebc:	f7fe f8e7 	bl	800808e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ec0:	e026      	b.n	8009f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009eca:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d209      	bcs.n	8009eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eda:	4b12      	ldr	r3, [pc, #72]	; (8009f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7fe f8f5 	bl	80080d6 <vListInsert>
}
 8009eec:	e010      	b.n	8009f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eee:	4b0e      	ldr	r3, [pc, #56]	; (8009f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f7fe f8eb 	bl	80080d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f00:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d202      	bcs.n	8009f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f0a:	4a08      	ldr	r2, [pc, #32]	; (8009f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6013      	str	r3, [r2, #0]
}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20004cb4 	.word	0x20004cb4
 8009f1c:	200047dc 	.word	0x200047dc
 8009f20:	20004c9c 	.word	0x20004c9c
 8009f24:	20004c6c 	.word	0x20004c6c
 8009f28:	20004c68 	.word	0x20004c68
 8009f2c:	20004cd0 	.word	0x20004cd0

08009f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f3a:	f000 fb51 	bl	800a5e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f3e:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <xTimerCreateTimerTask+0x80>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d021      	beq.n	8009f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f4e:	1d3a      	adds	r2, r7, #4
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fd fe7b 	bl	8007c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	9202      	str	r2, [sp, #8]
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	460a      	mov	r2, r1
 8009f70:	4910      	ldr	r1, [pc, #64]	; (8009fb4 <xTimerCreateTimerTask+0x84>)
 8009f72:	4811      	ldr	r0, [pc, #68]	; (8009fb8 <xTimerCreateTimerTask+0x88>)
 8009f74:	f7ff f8e2 	bl	800913c <xTaskCreateStatic>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <xTimerCreateTimerTask+0x8c>)
 8009f7c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f7e:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <xTimerCreateTimerTask+0x8c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f86:	2301      	movs	r3, #1
 8009f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <xTimerCreateTimerTask+0x74>
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	e7fe      	b.n	8009fa2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009fa4:	697b      	ldr	r3, [r7, #20]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20004d0c 	.word	0x20004d0c
 8009fb4:	0800b298 	.word	0x0800b298
 8009fb8:	0800a1f5 	.word	0x0800a1f5
 8009fbc:	20004d10 	.word	0x20004d10

08009fc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009fce:	2030      	movs	r0, #48	; 0x30
 8009fd0:	f7fd fe5a 	bl	8007c88 <pvPortMalloc>
 8009fd4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f844 	bl	800a078 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009ff8:	697b      	ldr	r3, [r7, #20]
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a002:	b580      	push	{r7, lr}
 800a004:	b08a      	sub	sp, #40	; 0x28
 800a006:	af02      	add	r7, sp, #8
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a010:	2330      	movs	r3, #48	; 0x30
 800a012:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b30      	cmp	r3, #48	; 0x30
 800a018:	d009      	beq.n	800a02e <xTimerCreateStatic+0x2c>
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	e7fe      	b.n	800a02c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d109      	bne.n	800a048 <xTimerCreateStatic+0x46>
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e7fe      	b.n	800a046 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	68b9      	ldr	r1, [r7, #8]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f809 	bl	800a078 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800a06e:	69fb      	ldr	r3, [r7, #28]
	}
 800a070:	4618      	mov	r0, r3
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <prvInitialiseNewTimer+0x28>
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	e7fe      	b.n	800a09e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d015      	beq.n	800a0d2 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a0a6:	f000 fa9b 	bl	800a5e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	6a3a      	ldr	r2, [r7, #32]
 800a0c6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd ffd1 	bl	8008074 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08a      	sub	sp, #40	; 0x28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <xTimerGenericCommand+0x2c>
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	623b      	str	r3, [r7, #32]
 800a106:	e7fe      	b.n	800a106 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a108:	4b19      	ldr	r3, [pc, #100]	; (800a170 <xTimerGenericCommand+0x94>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d02a      	beq.n	800a166 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b05      	cmp	r3, #5
 800a120:	dc18      	bgt.n	800a154 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a122:	f7ff fe27 	bl	8009d74 <xTaskGetSchedulerState>
 800a126:	4603      	mov	r3, r0
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d109      	bne.n	800a140 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a12c:	4b10      	ldr	r3, [pc, #64]	; (800a170 <xTimerGenericCommand+0x94>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	f107 0110 	add.w	r1, r7, #16
 800a134:	2300      	movs	r3, #0
 800a136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a138:	f7fe fbac 	bl	8008894 <xQueueGenericSend>
 800a13c:	6278      	str	r0, [r7, #36]	; 0x24
 800a13e:	e012      	b.n	800a166 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a140:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <xTimerGenericCommand+0x94>)
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	f107 0110 	add.w	r1, r7, #16
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	f7fe fba2 	bl	8008894 <xQueueGenericSend>
 800a150:	6278      	str	r0, [r7, #36]	; 0x24
 800a152:	e008      	b.n	800a166 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <xTimerGenericCommand+0x94>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	f107 0110 	add.w	r1, r7, #16
 800a15c:	2300      	movs	r3, #0
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	f7fe fc92 	bl	8008a88 <xQueueGenericSendFromISR>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3728      	adds	r7, #40	; 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20004d0c 	.word	0x20004d0c

0800a174 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a17e:	4b1c      	ldr	r3, [pc, #112]	; (800a1f0 <prvProcessExpiredTimer+0x7c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fd ffdb 	bl	8008148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d121      	bne.n	800a1de <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	18d1      	adds	r1, r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	6978      	ldr	r0, [r7, #20]
 800a1a8:	f000 f8c8 	bl	800a33c <prvInsertTimerInActiveList>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d015      	beq.n	800a1de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	6978      	ldr	r0, [r7, #20]
 800a1be:	f7ff ff8d 	bl	800a0dc <xTimerGenericCommand>
 800a1c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <prvProcessExpiredTimer+0x6a>
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e7fe      	b.n	800a1dc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	6978      	ldr	r0, [r7, #20]
 800a1e4:	4798      	blx	r3
}
 800a1e6:	bf00      	nop
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20004d04 	.word	0x20004d04

0800a1f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	4618      	mov	r0, r3
 800a202:	f000 f857 	bl	800a2b4 <prvGetNextExpireTime>
 800a206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f803 	bl	800a218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a212:	f000 f8d5 	bl	800a3c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a216:	e7f1      	b.n	800a1fc <prvTimerTask+0x8>

0800a218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a222:	f7ff f9b7 	bl	8009594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f866 	bl	800a2fc <prvSampleTimeNow>
 800a230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d130      	bne.n	800a29a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d806      	bhi.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a246:	f7ff f9b3 	bl	80095b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ff91 	bl	800a174 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a252:	e024      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d008      	beq.n	800a26c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a25a:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <prvProcessTimerOrBlockTask+0x90>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf0c      	ite	eq
 800a264:	2301      	moveq	r3, #1
 800a266:	2300      	movne	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <prvProcessTimerOrBlockTask+0x94>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe ff2b 	bl	80090d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f7ff f997 	bl	80095b0 <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a288:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <prvProcessTimerOrBlockTask+0x98>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
}
 800a298:	e001      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a29a:	f7ff f989 	bl	80095b0 <xTaskResumeAll>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20004d08 	.word	0x20004d08
 800a2ac:	20004d0c 	.word	0x20004d0c
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf0c      	ite	eq
 800a2c6:	2301      	moveq	r3, #1
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e001      	b.n	800a2ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20004d04 	.word	0x20004d04

0800a2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a304:	f7ff f9f0 	bl	80096e8 <xTaskGetTickCount>
 800a308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a30a:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <prvSampleTimeNow+0x3c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	429a      	cmp	r2, r3
 800a312:	d205      	bcs.n	800a320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a314:	f000 f904 	bl	800a520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e002      	b.n	800a326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <prvSampleTimeNow+0x3c>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20004d14 	.word	0x20004d14

0800a33c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d812      	bhi.n	800a388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e01b      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <prvInsertTimerInActiveList+0x7c>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fd fea8 	bl	80080d6 <vListInsert>
 800a386:	e012      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d206      	bcs.n	800a39e <prvInsertTimerInActiveList+0x62>
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e007      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39e:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <prvInsertTimerInActiveList+0x80>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fd fe94 	bl	80080d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20004d08 	.word	0x20004d08
 800a3bc:	20004d04 	.word	0x20004d04

0800a3c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c6:	e099      	b.n	800a4fc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da17      	bge.n	800a3fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <prvProcessReceivedCommands+0x2e>
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	61fb      	str	r3, [r7, #28]
 800a3ec:	e7fe      	b.n	800a3ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f4:	6850      	ldr	r0, [r2, #4]
 800a3f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f8:	6892      	ldr	r2, [r2, #8]
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	db7a      	blt.n	800a4fa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	3304      	adds	r3, #4
 800a414:	4618      	mov	r0, r3
 800a416:	f7fd fe97 	bl	8008148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a41a:	463b      	mov	r3, r7
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff ff6d 	bl	800a2fc <prvSampleTimeNow>
 800a422:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b09      	cmp	r3, #9
 800a428:	d868      	bhi.n	800a4fc <prvProcessReceivedCommands+0x13c>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <prvProcessReceivedCommands+0x70>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a459 	.word	0x0800a459
 800a43c:	0800a4fd 	.word	0x0800a4fd
 800a440:	0800a4b3 	.word	0x0800a4b3
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a459 	.word	0x0800a459
 800a450:	0800a4fd 	.word	0x0800a4fd
 800a454:	0800a4b3 	.word	0x0800a4b3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	18d1      	adds	r1, r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a466:	f7ff ff69 	bl	800a33c <prvInsertTimerInActiveList>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d045      	beq.n	800a4fc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a476:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	69db      	ldr	r3, [r3, #28]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d13d      	bne.n	800a4fc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	441a      	add	r2, r3
 800a488:	2300      	movs	r3, #0
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	2300      	movs	r3, #0
 800a48e:	2100      	movs	r1, #0
 800a490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a492:	f7ff fe23 	bl	800a0dc <xTimerGenericCommand>
 800a496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d12e      	bne.n	800a4fc <prvProcessReceivedCommands+0x13c>
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	e7fe      	b.n	800a4b0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <prvProcessReceivedCommands+0x114>
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	e7fe      	b.n	800a4d2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	699a      	ldr	r2, [r3, #24]
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	18d1      	adds	r1, r2, r3
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e2:	f7ff ff2b 	bl	800a33c <prvInsertTimerInActiveList>
					break;
 800a4e6:	e009      	b.n	800a4fc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d104      	bne.n	800a4fc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f4:	f7fd fc8a 	bl	8007e0c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4f8:	e000      	b.n	800a4fc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <prvProcessReceivedCommands+0x15c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	1d39      	adds	r1, r7, #4
 800a502:	2200      	movs	r2, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fb53 	bl	8008bb0 <xQueueReceive>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f47f af5b 	bne.w	800a3c8 <prvProcessReceivedCommands+0x8>
	}
}
 800a512:	bf00      	nop
 800a514:	3730      	adds	r7, #48	; 0x30
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20004d0c 	.word	0x20004d0c

0800a520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a526:	e044      	b.n	800a5b2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a528:	4b2b      	ldr	r3, [pc, #172]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a532:	4b29      	ldr	r3, [pc, #164]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd fe01 	bl	8008148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d12d      	bne.n	800a5b2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4413      	add	r3, r2
 800a55e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	d90e      	bls.n	800a586 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a574:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fd fda9 	bl	80080d6 <vListInsert>
 800a584:	e015      	b.n	800a5b2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a586:	2300      	movs	r3, #0
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	2300      	movs	r3, #0
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	2100      	movs	r1, #0
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fda3 	bl	800a0dc <xTimerGenericCommand>
 800a596:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <prvSwitchTimerLists+0x92>
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	e7fe      	b.n	800a5b0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1b5      	bne.n	800a528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5bc:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <prvSwitchTimerLists+0xbc>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a04      	ldr	r2, [pc, #16]	; (800a5d8 <prvSwitchTimerLists+0xb8>)
 800a5c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5ca:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <prvSwitchTimerLists+0xbc>)
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6013      	str	r3, [r2, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20004d04 	.word	0x20004d04
 800a5dc:	20004d08 	.word	0x20004d08

0800a5e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5e6:	f7fd ff01 	bl	80083ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d120      	bne.n	800a634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5f2:	4814      	ldr	r0, [pc, #80]	; (800a644 <prvCheckForValidListAndQueue+0x64>)
 800a5f4:	f7fd fd1e 	bl	8008034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5f8:	4813      	ldr	r0, [pc, #76]	; (800a648 <prvCheckForValidListAndQueue+0x68>)
 800a5fa:	f7fd fd1b 	bl	8008034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <prvCheckForValidListAndQueue+0x6c>)
 800a600:	4a10      	ldr	r2, [pc, #64]	; (800a644 <prvCheckForValidListAndQueue+0x64>)
 800a602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a604:	4b12      	ldr	r3, [pc, #72]	; (800a650 <prvCheckForValidListAndQueue+0x70>)
 800a606:	4a10      	ldr	r2, [pc, #64]	; (800a648 <prvCheckForValidListAndQueue+0x68>)
 800a608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a60a:	2300      	movs	r3, #0
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	4b11      	ldr	r3, [pc, #68]	; (800a654 <prvCheckForValidListAndQueue+0x74>)
 800a610:	4a11      	ldr	r2, [pc, #68]	; (800a658 <prvCheckForValidListAndQueue+0x78>)
 800a612:	2110      	movs	r1, #16
 800a614:	200a      	movs	r0, #10
 800a616:	f7fe f86b 	bl	80086f0 <xQueueGenericCreateStatic>
 800a61a:	4602      	mov	r2, r0
 800a61c:	4b08      	ldr	r3, [pc, #32]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a61e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d005      	beq.n	800a634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <prvCheckForValidListAndQueue+0x60>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	490b      	ldr	r1, [pc, #44]	; (800a65c <prvCheckForValidListAndQueue+0x7c>)
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fd28 	bl	8009084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a634:	f7fd ff08 	bl	8008448 <vPortExitCritical>
}
 800a638:	bf00      	nop
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20004d0c 	.word	0x20004d0c
 800a644:	20004cdc 	.word	0x20004cdc
 800a648:	20004cf0 	.word	0x20004cf0
 800a64c:	20004d04 	.word	0x20004d04
 800a650:	20004d08 	.word	0x20004d08
 800a654:	20004db8 	.word	0x20004db8
 800a658:	20004d18 	.word	0x20004d18
 800a65c:	0800b2a0 	.word	0x0800b2a0

0800a660 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d109      	bne.n	800a686 <pvTimerGetTimerID+0x26>
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e7fe      	b.n	800a684 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800a686:	f7fd feb1 	bl	80083ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a690:	f7fd feda 	bl	8008448 <vPortExitCritical>

	return pvReturn;
 800a694:	693b      	ldr	r3, [r7, #16]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f804 	bl	800a6c2 <USBH_HandleSof>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b0b      	cmp	r3, #11
 800a6d2:	d10a      	bne.n	800a6ea <USBH_HandleSof+0x28>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d005      	beq.n	800a6ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	4798      	blx	r3
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a702:	bf00      	nop
}
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a71e:	bf00      	nop
}
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10f      	bne.n	800a75c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a754:	2104      	movs	r1, #4
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
 800a75a:	e007      	b.n	800a76c <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a762:	2b01      	cmp	r3, #1
 800a764:	d102      	bne.n	800a76c <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2202      	movs	r2, #2
 800a76a:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800a780:	2300      	movs	r3, #0
 800a782:	2200      	movs	r2, #0
 800a784:	f7fd f966 	bl	8007a54 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f8da 	bl	800a954 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	791b      	ldrb	r3, [r3, #4]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f845 	bl	800a836 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	795b      	ldrb	r3, [r3, #5]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f83f 	bl	800a836 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7d0:	2105      	movs	r1, #5
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f8a1 	bl	800a91e <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7fd f92b 	bl	8007a54 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 800a824:	2300      	movs	r3, #0
 800a826:	2200      	movs	r2, #0
 800a828:	f7fd f914 	bl	8007a54 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	2b0a      	cmp	r3, #10
 800a846:	d80b      	bhi.n	800a860 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32e0      	adds	r2, #224	; 0xe0
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	78fa      	ldrb	r2, [r7, #3]
 800a854:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	32e0      	adds	r2, #224	; 0xe0
 800a85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff ff0e 	bl	800a69e <USBH_LL_IncTimer>
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff ff46 	bl	800a72a <USBH_LL_Connect>
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff ff6c 	bl	800a792 <USBH_LL_Disconnect>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff ff95 	bl	800a808 <USBH_LL_NotifyURBChange>
#endif
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fefc 	bl	800a6f2 <USBH_LL_PortEnabled>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fefc 	bl	800a70e <USBH_LL_PortDisabled>
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a934:	4618      	mov	r0, r3
 800a936:	f7f8 fa8b 	bl	8002e50 <HAL_HCD_Start>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	4618      	mov	r0, r3
 800a942:	f000 f823 	bl	800a98c <USBH_Get_USB_Status>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f8 fa93 	bl	8002e96 <HAL_HCD_Stop>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f808 	bl	800a98c <USBH_Get_USB_Status>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a980:	7bbb      	ldrb	r3, [r7, #14]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d817      	bhi.n	800a9d0 <USBH_Get_USB_Status+0x44>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <USBH_Get_USB_Status+0x1c>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9bf 	.word	0x0800a9bf
 800a9b0:	0800a9c5 	.word	0x0800a9c5
 800a9b4:	0800a9cb 	.word	0x0800a9cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a9bc:	e00b      	b.n	800a9d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c2:	e008      	b.n	800a9d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e005      	b.n	800a9d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e002      	b.n	800a9d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	bf00      	nop
  }
  return usb_status;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <__errno>:
 800a9e4:	4b01      	ldr	r3, [pc, #4]	; (800a9ec <__errno+0x8>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000470 	.word	0x20000470

0800a9f0 <__libc_init_array>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	4e0d      	ldr	r6, [pc, #52]	; (800aa28 <__libc_init_array+0x38>)
 800a9f4:	4c0d      	ldr	r4, [pc, #52]	; (800aa2c <__libc_init_array+0x3c>)
 800a9f6:	1ba4      	subs	r4, r4, r6
 800a9f8:	10a4      	asrs	r4, r4, #2
 800a9fa:	2500      	movs	r5, #0
 800a9fc:	42a5      	cmp	r5, r4
 800a9fe:	d109      	bne.n	800aa14 <__libc_init_array+0x24>
 800aa00:	4e0b      	ldr	r6, [pc, #44]	; (800aa30 <__libc_init_array+0x40>)
 800aa02:	4c0c      	ldr	r4, [pc, #48]	; (800aa34 <__libc_init_array+0x44>)
 800aa04:	f000 fc26 	bl	800b254 <_init>
 800aa08:	1ba4      	subs	r4, r4, r6
 800aa0a:	10a4      	asrs	r4, r4, #2
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	42a5      	cmp	r5, r4
 800aa10:	d105      	bne.n	800aa1e <__libc_init_array+0x2e>
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa18:	4798      	blx	r3
 800aa1a:	3501      	adds	r5, #1
 800aa1c:	e7ee      	b.n	800a9fc <__libc_init_array+0xc>
 800aa1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa22:	4798      	blx	r3
 800aa24:	3501      	adds	r5, #1
 800aa26:	e7f2      	b.n	800aa0e <__libc_init_array+0x1e>
 800aa28:	0800b344 	.word	0x0800b344
 800aa2c:	0800b344 	.word	0x0800b344
 800aa30:	0800b344 	.word	0x0800b344
 800aa34:	0800b348 	.word	0x0800b348

0800aa38 <memcpy>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	1e43      	subs	r3, r0, #1
 800aa3c:	440a      	add	r2, r1
 800aa3e:	4291      	cmp	r1, r2
 800aa40:	d100      	bne.n	800aa44 <memcpy+0xc>
 800aa42:	bd10      	pop	{r4, pc}
 800aa44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa4c:	e7f7      	b.n	800aa3e <memcpy+0x6>

0800aa4e <memmove>:
 800aa4e:	4288      	cmp	r0, r1
 800aa50:	b510      	push	{r4, lr}
 800aa52:	eb01 0302 	add.w	r3, r1, r2
 800aa56:	d807      	bhi.n	800aa68 <memmove+0x1a>
 800aa58:	1e42      	subs	r2, r0, #1
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d00a      	beq.n	800aa74 <memmove+0x26>
 800aa5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa62:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa66:	e7f8      	b.n	800aa5a <memmove+0xc>
 800aa68:	4283      	cmp	r3, r0
 800aa6a:	d9f5      	bls.n	800aa58 <memmove+0xa>
 800aa6c:	1881      	adds	r1, r0, r2
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	42d3      	cmn	r3, r2
 800aa72:	d100      	bne.n	800aa76 <memmove+0x28>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa7e:	e7f7      	b.n	800aa70 <memmove+0x22>

0800aa80 <memset>:
 800aa80:	4402      	add	r2, r0
 800aa82:	4603      	mov	r3, r0
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d100      	bne.n	800aa8a <memset+0xa>
 800aa88:	4770      	bx	lr
 800aa8a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa8e:	e7f9      	b.n	800aa84 <memset+0x4>

0800aa90 <_free_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4605      	mov	r5, r0
 800aa94:	2900      	cmp	r1, #0
 800aa96:	d045      	beq.n	800ab24 <_free_r+0x94>
 800aa98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa9c:	1f0c      	subs	r4, r1, #4
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bfb8      	it	lt
 800aaa2:	18e4      	addlt	r4, r4, r3
 800aaa4:	f000 f8cc 	bl	800ac40 <__malloc_lock>
 800aaa8:	4a1f      	ldr	r2, [pc, #124]	; (800ab28 <_free_r+0x98>)
 800aaaa:	6813      	ldr	r3, [r2, #0]
 800aaac:	4610      	mov	r0, r2
 800aaae:	b933      	cbnz	r3, 800aabe <_free_r+0x2e>
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	6014      	str	r4, [r2, #0]
 800aab4:	4628      	mov	r0, r5
 800aab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaba:	f000 b8c2 	b.w	800ac42 <__malloc_unlock>
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	d90c      	bls.n	800aadc <_free_r+0x4c>
 800aac2:	6821      	ldr	r1, [r4, #0]
 800aac4:	1862      	adds	r2, r4, r1
 800aac6:	4293      	cmp	r3, r2
 800aac8:	bf04      	itt	eq
 800aaca:	681a      	ldreq	r2, [r3, #0]
 800aacc:	685b      	ldreq	r3, [r3, #4]
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	bf04      	itt	eq
 800aad2:	1852      	addeq	r2, r2, r1
 800aad4:	6022      	streq	r2, [r4, #0]
 800aad6:	6004      	str	r4, [r0, #0]
 800aad8:	e7ec      	b.n	800aab4 <_free_r+0x24>
 800aada:	4613      	mov	r3, r2
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	b10a      	cbz	r2, 800aae4 <_free_r+0x54>
 800aae0:	42a2      	cmp	r2, r4
 800aae2:	d9fa      	bls.n	800aada <_free_r+0x4a>
 800aae4:	6819      	ldr	r1, [r3, #0]
 800aae6:	1858      	adds	r0, r3, r1
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d10b      	bne.n	800ab04 <_free_r+0x74>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	4401      	add	r1, r0
 800aaf0:	1858      	adds	r0, r3, r1
 800aaf2:	4282      	cmp	r2, r0
 800aaf4:	6019      	str	r1, [r3, #0]
 800aaf6:	d1dd      	bne.n	800aab4 <_free_r+0x24>
 800aaf8:	6810      	ldr	r0, [r2, #0]
 800aafa:	6852      	ldr	r2, [r2, #4]
 800aafc:	605a      	str	r2, [r3, #4]
 800aafe:	4401      	add	r1, r0
 800ab00:	6019      	str	r1, [r3, #0]
 800ab02:	e7d7      	b.n	800aab4 <_free_r+0x24>
 800ab04:	d902      	bls.n	800ab0c <_free_r+0x7c>
 800ab06:	230c      	movs	r3, #12
 800ab08:	602b      	str	r3, [r5, #0]
 800ab0a:	e7d3      	b.n	800aab4 <_free_r+0x24>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	1821      	adds	r1, r4, r0
 800ab10:	428a      	cmp	r2, r1
 800ab12:	bf04      	itt	eq
 800ab14:	6811      	ldreq	r1, [r2, #0]
 800ab16:	6852      	ldreq	r2, [r2, #4]
 800ab18:	6062      	str	r2, [r4, #4]
 800ab1a:	bf04      	itt	eq
 800ab1c:	1809      	addeq	r1, r1, r0
 800ab1e:	6021      	streq	r1, [r4, #0]
 800ab20:	605c      	str	r4, [r3, #4]
 800ab22:	e7c7      	b.n	800aab4 <_free_r+0x24>
 800ab24:	bd38      	pop	{r3, r4, r5, pc}
 800ab26:	bf00      	nop
 800ab28:	20004e08 	.word	0x20004e08

0800ab2c <_malloc_r>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	1ccd      	adds	r5, r1, #3
 800ab30:	f025 0503 	bic.w	r5, r5, #3
 800ab34:	3508      	adds	r5, #8
 800ab36:	2d0c      	cmp	r5, #12
 800ab38:	bf38      	it	cc
 800ab3a:	250c      	movcc	r5, #12
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	4606      	mov	r6, r0
 800ab40:	db01      	blt.n	800ab46 <_malloc_r+0x1a>
 800ab42:	42a9      	cmp	r1, r5
 800ab44:	d903      	bls.n	800ab4e <_malloc_r+0x22>
 800ab46:	230c      	movs	r3, #12
 800ab48:	6033      	str	r3, [r6, #0]
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	bd70      	pop	{r4, r5, r6, pc}
 800ab4e:	f000 f877 	bl	800ac40 <__malloc_lock>
 800ab52:	4a21      	ldr	r2, [pc, #132]	; (800abd8 <_malloc_r+0xac>)
 800ab54:	6814      	ldr	r4, [r2, #0]
 800ab56:	4621      	mov	r1, r4
 800ab58:	b991      	cbnz	r1, 800ab80 <_malloc_r+0x54>
 800ab5a:	4c20      	ldr	r4, [pc, #128]	; (800abdc <_malloc_r+0xb0>)
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	b91b      	cbnz	r3, 800ab68 <_malloc_r+0x3c>
 800ab60:	4630      	mov	r0, r6
 800ab62:	f000 f83d 	bl	800abe0 <_sbrk_r>
 800ab66:	6020      	str	r0, [r4, #0]
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f000 f838 	bl	800abe0 <_sbrk_r>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d124      	bne.n	800abbe <_malloc_r+0x92>
 800ab74:	230c      	movs	r3, #12
 800ab76:	6033      	str	r3, [r6, #0]
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f000 f862 	bl	800ac42 <__malloc_unlock>
 800ab7e:	e7e4      	b.n	800ab4a <_malloc_r+0x1e>
 800ab80:	680b      	ldr	r3, [r1, #0]
 800ab82:	1b5b      	subs	r3, r3, r5
 800ab84:	d418      	bmi.n	800abb8 <_malloc_r+0x8c>
 800ab86:	2b0b      	cmp	r3, #11
 800ab88:	d90f      	bls.n	800abaa <_malloc_r+0x7e>
 800ab8a:	600b      	str	r3, [r1, #0]
 800ab8c:	50cd      	str	r5, [r1, r3]
 800ab8e:	18cc      	adds	r4, r1, r3
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f856 	bl	800ac42 <__malloc_unlock>
 800ab96:	f104 000b 	add.w	r0, r4, #11
 800ab9a:	1d23      	adds	r3, r4, #4
 800ab9c:	f020 0007 	bic.w	r0, r0, #7
 800aba0:	1ac3      	subs	r3, r0, r3
 800aba2:	d0d3      	beq.n	800ab4c <_malloc_r+0x20>
 800aba4:	425a      	negs	r2, r3
 800aba6:	50e2      	str	r2, [r4, r3]
 800aba8:	e7d0      	b.n	800ab4c <_malloc_r+0x20>
 800abaa:	428c      	cmp	r4, r1
 800abac:	684b      	ldr	r3, [r1, #4]
 800abae:	bf16      	itet	ne
 800abb0:	6063      	strne	r3, [r4, #4]
 800abb2:	6013      	streq	r3, [r2, #0]
 800abb4:	460c      	movne	r4, r1
 800abb6:	e7eb      	b.n	800ab90 <_malloc_r+0x64>
 800abb8:	460c      	mov	r4, r1
 800abba:	6849      	ldr	r1, [r1, #4]
 800abbc:	e7cc      	b.n	800ab58 <_malloc_r+0x2c>
 800abbe:	1cc4      	adds	r4, r0, #3
 800abc0:	f024 0403 	bic.w	r4, r4, #3
 800abc4:	42a0      	cmp	r0, r4
 800abc6:	d005      	beq.n	800abd4 <_malloc_r+0xa8>
 800abc8:	1a21      	subs	r1, r4, r0
 800abca:	4630      	mov	r0, r6
 800abcc:	f000 f808 	bl	800abe0 <_sbrk_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d0cf      	beq.n	800ab74 <_malloc_r+0x48>
 800abd4:	6025      	str	r5, [r4, #0]
 800abd6:	e7db      	b.n	800ab90 <_malloc_r+0x64>
 800abd8:	20004e08 	.word	0x20004e08
 800abdc:	20004e0c 	.word	0x20004e0c

0800abe0 <_sbrk_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4c06      	ldr	r4, [pc, #24]	; (800abfc <_sbrk_r+0x1c>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4605      	mov	r5, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	f7f6 fdb0 	bl	8001750 <_sbrk>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_sbrk_r+0x1a>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_sbrk_r+0x1a>
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	2000577c 	.word	0x2000577c

0800ac00 <siprintf>:
 800ac00:	b40e      	push	{r1, r2, r3}
 800ac02:	b500      	push	{lr}
 800ac04:	b09c      	sub	sp, #112	; 0x70
 800ac06:	ab1d      	add	r3, sp, #116	; 0x74
 800ac08:	9002      	str	r0, [sp, #8]
 800ac0a:	9006      	str	r0, [sp, #24]
 800ac0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac10:	4809      	ldr	r0, [pc, #36]	; (800ac38 <siprintf+0x38>)
 800ac12:	9107      	str	r1, [sp, #28]
 800ac14:	9104      	str	r1, [sp, #16]
 800ac16:	4909      	ldr	r1, [pc, #36]	; (800ac3c <siprintf+0x3c>)
 800ac18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1c:	9105      	str	r1, [sp, #20]
 800ac1e:	6800      	ldr	r0, [r0, #0]
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	a902      	add	r1, sp, #8
 800ac24:	f000 f868 	bl	800acf8 <_svfiprintf_r>
 800ac28:	9b02      	ldr	r3, [sp, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	b01c      	add	sp, #112	; 0x70
 800ac30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac34:	b003      	add	sp, #12
 800ac36:	4770      	bx	lr
 800ac38:	20000470 	.word	0x20000470
 800ac3c:	ffff0208 	.word	0xffff0208

0800ac40 <__malloc_lock>:
 800ac40:	4770      	bx	lr

0800ac42 <__malloc_unlock>:
 800ac42:	4770      	bx	lr

0800ac44 <__ssputs_r>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	688e      	ldr	r6, [r1, #8]
 800ac4a:	429e      	cmp	r6, r3
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	4690      	mov	r8, r2
 800ac52:	4699      	mov	r9, r3
 800ac54:	d837      	bhi.n	800acc6 <__ssputs_r+0x82>
 800ac56:	898a      	ldrh	r2, [r1, #12]
 800ac58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac5c:	d031      	beq.n	800acc2 <__ssputs_r+0x7e>
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	6909      	ldr	r1, [r1, #16]
 800ac62:	1a6f      	subs	r7, r5, r1
 800ac64:	6965      	ldr	r5, [r4, #20]
 800ac66:	2302      	movs	r3, #2
 800ac68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac6c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac70:	f109 0301 	add.w	r3, r9, #1
 800ac74:	443b      	add	r3, r7
 800ac76:	429d      	cmp	r5, r3
 800ac78:	bf38      	it	cc
 800ac7a:	461d      	movcc	r5, r3
 800ac7c:	0553      	lsls	r3, r2, #21
 800ac7e:	d530      	bpl.n	800ace2 <__ssputs_r+0x9e>
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7ff ff53 	bl	800ab2c <_malloc_r>
 800ac86:	4606      	mov	r6, r0
 800ac88:	b950      	cbnz	r0, 800aca0 <__ssputs_r+0x5c>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	f8ca 3000 	str.w	r3, [sl]
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca0:	463a      	mov	r2, r7
 800aca2:	6921      	ldr	r1, [r4, #16]
 800aca4:	f7ff fec8 	bl	800aa38 <memcpy>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	6126      	str	r6, [r4, #16]
 800acb6:	6165      	str	r5, [r4, #20]
 800acb8:	443e      	add	r6, r7
 800acba:	1bed      	subs	r5, r5, r7
 800acbc:	6026      	str	r6, [r4, #0]
 800acbe:	60a5      	str	r5, [r4, #8]
 800acc0:	464e      	mov	r6, r9
 800acc2:	454e      	cmp	r6, r9
 800acc4:	d900      	bls.n	800acc8 <__ssputs_r+0x84>
 800acc6:	464e      	mov	r6, r9
 800acc8:	4632      	mov	r2, r6
 800acca:	4641      	mov	r1, r8
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	f7ff febe 	bl	800aa4e <memmove>
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	441e      	add	r6, r3
 800acdc:	6026      	str	r6, [r4, #0]
 800acde:	2000      	movs	r0, #0
 800ace0:	e7dc      	b.n	800ac9c <__ssputs_r+0x58>
 800ace2:	462a      	mov	r2, r5
 800ace4:	f000 fa88 	bl	800b1f8 <_realloc_r>
 800ace8:	4606      	mov	r6, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	d1e2      	bne.n	800acb4 <__ssputs_r+0x70>
 800acee:	6921      	ldr	r1, [r4, #16]
 800acf0:	4650      	mov	r0, sl
 800acf2:	f7ff fecd 	bl	800aa90 <_free_r>
 800acf6:	e7c8      	b.n	800ac8a <__ssputs_r+0x46>

0800acf8 <_svfiprintf_r>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	461d      	mov	r5, r3
 800acfe:	898b      	ldrh	r3, [r1, #12]
 800ad00:	061f      	lsls	r7, r3, #24
 800ad02:	b09d      	sub	sp, #116	; 0x74
 800ad04:	4680      	mov	r8, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	4616      	mov	r6, r2
 800ad0a:	d50f      	bpl.n	800ad2c <_svfiprintf_r+0x34>
 800ad0c:	690b      	ldr	r3, [r1, #16]
 800ad0e:	b96b      	cbnz	r3, 800ad2c <_svfiprintf_r+0x34>
 800ad10:	2140      	movs	r1, #64	; 0x40
 800ad12:	f7ff ff0b 	bl	800ab2c <_malloc_r>
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	6120      	str	r0, [r4, #16]
 800ad1a:	b928      	cbnz	r0, 800ad28 <_svfiprintf_r+0x30>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	f8c8 3000 	str.w	r3, [r8]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	e0c8      	b.n	800aeba <_svfiprintf_r+0x1c2>
 800ad28:	2340      	movs	r3, #64	; 0x40
 800ad2a:	6163      	str	r3, [r4, #20]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad30:	2320      	movs	r3, #32
 800ad32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad36:	2330      	movs	r3, #48	; 0x30
 800ad38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad3c:	9503      	str	r5, [sp, #12]
 800ad3e:	f04f 0b01 	mov.w	fp, #1
 800ad42:	4637      	mov	r7, r6
 800ad44:	463d      	mov	r5, r7
 800ad46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad4a:	b10b      	cbz	r3, 800ad50 <_svfiprintf_r+0x58>
 800ad4c:	2b25      	cmp	r3, #37	; 0x25
 800ad4e:	d13e      	bne.n	800adce <_svfiprintf_r+0xd6>
 800ad50:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad54:	d00b      	beq.n	800ad6e <_svfiprintf_r+0x76>
 800ad56:	4653      	mov	r3, sl
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f7ff ff71 	bl	800ac44 <__ssputs_r>
 800ad62:	3001      	adds	r0, #1
 800ad64:	f000 80a4 	beq.w	800aeb0 <_svfiprintf_r+0x1b8>
 800ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6a:	4453      	add	r3, sl
 800ad6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6e:	783b      	ldrb	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 809d 	beq.w	800aeb0 <_svfiprintf_r+0x1b8>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	9307      	str	r3, [sp, #28]
 800ad84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad88:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8a:	462f      	mov	r7, r5
 800ad8c:	2205      	movs	r2, #5
 800ad8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ad92:	4850      	ldr	r0, [pc, #320]	; (800aed4 <_svfiprintf_r+0x1dc>)
 800ad94:	f7f5 fa1c 	bl	80001d0 <memchr>
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	b9d0      	cbnz	r0, 800add2 <_svfiprintf_r+0xda>
 800ad9c:	06d9      	lsls	r1, r3, #27
 800ad9e:	bf44      	itt	mi
 800ada0:	2220      	movmi	r2, #32
 800ada2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ada6:	071a      	lsls	r2, r3, #28
 800ada8:	bf44      	itt	mi
 800adaa:	222b      	movmi	r2, #43	; 0x2b
 800adac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adb0:	782a      	ldrb	r2, [r5, #0]
 800adb2:	2a2a      	cmp	r2, #42	; 0x2a
 800adb4:	d015      	beq.n	800ade2 <_svfiprintf_r+0xea>
 800adb6:	9a07      	ldr	r2, [sp, #28]
 800adb8:	462f      	mov	r7, r5
 800adba:	2000      	movs	r0, #0
 800adbc:	250a      	movs	r5, #10
 800adbe:	4639      	mov	r1, r7
 800adc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc4:	3b30      	subs	r3, #48	; 0x30
 800adc6:	2b09      	cmp	r3, #9
 800adc8:	d94d      	bls.n	800ae66 <_svfiprintf_r+0x16e>
 800adca:	b1b8      	cbz	r0, 800adfc <_svfiprintf_r+0x104>
 800adcc:	e00f      	b.n	800adee <_svfiprintf_r+0xf6>
 800adce:	462f      	mov	r7, r5
 800add0:	e7b8      	b.n	800ad44 <_svfiprintf_r+0x4c>
 800add2:	4a40      	ldr	r2, [pc, #256]	; (800aed4 <_svfiprintf_r+0x1dc>)
 800add4:	1a80      	subs	r0, r0, r2
 800add6:	fa0b f000 	lsl.w	r0, fp, r0
 800adda:	4318      	orrs	r0, r3
 800addc:	9004      	str	r0, [sp, #16]
 800adde:	463d      	mov	r5, r7
 800ade0:	e7d3      	b.n	800ad8a <_svfiprintf_r+0x92>
 800ade2:	9a03      	ldr	r2, [sp, #12]
 800ade4:	1d11      	adds	r1, r2, #4
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	9103      	str	r1, [sp, #12]
 800adea:	2a00      	cmp	r2, #0
 800adec:	db01      	blt.n	800adf2 <_svfiprintf_r+0xfa>
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	e004      	b.n	800adfc <_svfiprintf_r+0x104>
 800adf2:	4252      	negs	r2, r2
 800adf4:	f043 0302 	orr.w	r3, r3, #2
 800adf8:	9207      	str	r2, [sp, #28]
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	783b      	ldrb	r3, [r7, #0]
 800adfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ae00:	d10c      	bne.n	800ae1c <_svfiprintf_r+0x124>
 800ae02:	787b      	ldrb	r3, [r7, #1]
 800ae04:	2b2a      	cmp	r3, #42	; 0x2a
 800ae06:	d133      	bne.n	800ae70 <_svfiprintf_r+0x178>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	1d1a      	adds	r2, r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	9203      	str	r2, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfb8      	it	lt
 800ae14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae18:	3702      	adds	r7, #2
 800ae1a:	9305      	str	r3, [sp, #20]
 800ae1c:	4d2e      	ldr	r5, [pc, #184]	; (800aed8 <_svfiprintf_r+0x1e0>)
 800ae1e:	7839      	ldrb	r1, [r7, #0]
 800ae20:	2203      	movs	r2, #3
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7f5 f9d4 	bl	80001d0 <memchr>
 800ae28:	b138      	cbz	r0, 800ae3a <_svfiprintf_r+0x142>
 800ae2a:	2340      	movs	r3, #64	; 0x40
 800ae2c:	1b40      	subs	r0, r0, r5
 800ae2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	4303      	orrs	r3, r0
 800ae36:	3701      	adds	r7, #1
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	7839      	ldrb	r1, [r7, #0]
 800ae3c:	4827      	ldr	r0, [pc, #156]	; (800aedc <_svfiprintf_r+0x1e4>)
 800ae3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae42:	2206      	movs	r2, #6
 800ae44:	1c7e      	adds	r6, r7, #1
 800ae46:	f7f5 f9c3 	bl	80001d0 <memchr>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d038      	beq.n	800aec0 <_svfiprintf_r+0x1c8>
 800ae4e:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <_svfiprintf_r+0x1e8>)
 800ae50:	bb13      	cbnz	r3, 800ae98 <_svfiprintf_r+0x1a0>
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	3307      	adds	r3, #7
 800ae56:	f023 0307 	bic.w	r3, r3, #7
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae60:	444b      	add	r3, r9
 800ae62:	9309      	str	r3, [sp, #36]	; 0x24
 800ae64:	e76d      	b.n	800ad42 <_svfiprintf_r+0x4a>
 800ae66:	fb05 3202 	mla	r2, r5, r2, r3
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	e7a6      	b.n	800adbe <_svfiprintf_r+0xc6>
 800ae70:	2300      	movs	r3, #0
 800ae72:	3701      	adds	r7, #1
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	4619      	mov	r1, r3
 800ae78:	250a      	movs	r5, #10
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae80:	3a30      	subs	r2, #48	; 0x30
 800ae82:	2a09      	cmp	r2, #9
 800ae84:	d903      	bls.n	800ae8e <_svfiprintf_r+0x196>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0c8      	beq.n	800ae1c <_svfiprintf_r+0x124>
 800ae8a:	9105      	str	r1, [sp, #20]
 800ae8c:	e7c6      	b.n	800ae1c <_svfiprintf_r+0x124>
 800ae8e:	fb05 2101 	mla	r1, r5, r1, r2
 800ae92:	2301      	movs	r3, #1
 800ae94:	4607      	mov	r7, r0
 800ae96:	e7f0      	b.n	800ae7a <_svfiprintf_r+0x182>
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <_svfiprintf_r+0x1ec>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	4640      	mov	r0, r8
 800aea4:	f3af 8000 	nop.w
 800aea8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aeac:	4681      	mov	r9, r0
 800aeae:	d1d6      	bne.n	800ae5e <_svfiprintf_r+0x166>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	065b      	lsls	r3, r3, #25
 800aeb4:	f53f af35 	bmi.w	800ad22 <_svfiprintf_r+0x2a>
 800aeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeba:	b01d      	add	sp, #116	; 0x74
 800aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	4622      	mov	r2, r4
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <_svfiprintf_r+0x1ec>)
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	4640      	mov	r0, r8
 800aecc:	f000 f882 	bl	800afd4 <_printf_i>
 800aed0:	e7ea      	b.n	800aea8 <_svfiprintf_r+0x1b0>
 800aed2:	bf00      	nop
 800aed4:	0800b308 	.word	0x0800b308
 800aed8:	0800b30e 	.word	0x0800b30e
 800aedc:	0800b312 	.word	0x0800b312
 800aee0:	00000000 	.word	0x00000000
 800aee4:	0800ac45 	.word	0x0800ac45

0800aee8 <_printf_common>:
 800aee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeec:	4691      	mov	r9, r2
 800aeee:	461f      	mov	r7, r3
 800aef0:	688a      	ldr	r2, [r1, #8]
 800aef2:	690b      	ldr	r3, [r1, #16]
 800aef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aef8:	4293      	cmp	r3, r2
 800aefa:	bfb8      	it	lt
 800aefc:	4613      	movlt	r3, r2
 800aefe:	f8c9 3000 	str.w	r3, [r9]
 800af02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af06:	4606      	mov	r6, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	b112      	cbz	r2, 800af12 <_printf_common+0x2a>
 800af0c:	3301      	adds	r3, #1
 800af0e:	f8c9 3000 	str.w	r3, [r9]
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	0699      	lsls	r1, r3, #26
 800af16:	bf42      	ittt	mi
 800af18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af1c:	3302      	addmi	r3, #2
 800af1e:	f8c9 3000 	strmi.w	r3, [r9]
 800af22:	6825      	ldr	r5, [r4, #0]
 800af24:	f015 0506 	ands.w	r5, r5, #6
 800af28:	d107      	bne.n	800af3a <_printf_common+0x52>
 800af2a:	f104 0a19 	add.w	sl, r4, #25
 800af2e:	68e3      	ldr	r3, [r4, #12]
 800af30:	f8d9 2000 	ldr.w	r2, [r9]
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	42ab      	cmp	r3, r5
 800af38:	dc28      	bgt.n	800af8c <_printf_common+0xa4>
 800af3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	3300      	adds	r3, #0
 800af42:	bf18      	it	ne
 800af44:	2301      	movne	r3, #1
 800af46:	0692      	lsls	r2, r2, #26
 800af48:	d42d      	bmi.n	800afa6 <_printf_common+0xbe>
 800af4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af4e:	4639      	mov	r1, r7
 800af50:	4630      	mov	r0, r6
 800af52:	47c0      	blx	r8
 800af54:	3001      	adds	r0, #1
 800af56:	d020      	beq.n	800af9a <_printf_common+0xb2>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	68e5      	ldr	r5, [r4, #12]
 800af5c:	f8d9 2000 	ldr.w	r2, [r9]
 800af60:	f003 0306 	and.w	r3, r3, #6
 800af64:	2b04      	cmp	r3, #4
 800af66:	bf08      	it	eq
 800af68:	1aad      	subeq	r5, r5, r2
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	6922      	ldr	r2, [r4, #16]
 800af6e:	bf0c      	ite	eq
 800af70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af74:	2500      	movne	r5, #0
 800af76:	4293      	cmp	r3, r2
 800af78:	bfc4      	itt	gt
 800af7a:	1a9b      	subgt	r3, r3, r2
 800af7c:	18ed      	addgt	r5, r5, r3
 800af7e:	f04f 0900 	mov.w	r9, #0
 800af82:	341a      	adds	r4, #26
 800af84:	454d      	cmp	r5, r9
 800af86:	d11a      	bne.n	800afbe <_printf_common+0xd6>
 800af88:	2000      	movs	r0, #0
 800af8a:	e008      	b.n	800af9e <_printf_common+0xb6>
 800af8c:	2301      	movs	r3, #1
 800af8e:	4652      	mov	r2, sl
 800af90:	4639      	mov	r1, r7
 800af92:	4630      	mov	r0, r6
 800af94:	47c0      	blx	r8
 800af96:	3001      	adds	r0, #1
 800af98:	d103      	bne.n	800afa2 <_printf_common+0xba>
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa2:	3501      	adds	r5, #1
 800afa4:	e7c3      	b.n	800af2e <_printf_common+0x46>
 800afa6:	18e1      	adds	r1, r4, r3
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	2030      	movs	r0, #48	; 0x30
 800afac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afb0:	4422      	add	r2, r4
 800afb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afba:	3302      	adds	r3, #2
 800afbc:	e7c5      	b.n	800af4a <_printf_common+0x62>
 800afbe:	2301      	movs	r3, #1
 800afc0:	4622      	mov	r2, r4
 800afc2:	4639      	mov	r1, r7
 800afc4:	4630      	mov	r0, r6
 800afc6:	47c0      	blx	r8
 800afc8:	3001      	adds	r0, #1
 800afca:	d0e6      	beq.n	800af9a <_printf_common+0xb2>
 800afcc:	f109 0901 	add.w	r9, r9, #1
 800afd0:	e7d8      	b.n	800af84 <_printf_common+0x9c>
	...

0800afd4 <_printf_i>:
 800afd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800afdc:	460c      	mov	r4, r1
 800afde:	7e09      	ldrb	r1, [r1, #24]
 800afe0:	b085      	sub	sp, #20
 800afe2:	296e      	cmp	r1, #110	; 0x6e
 800afe4:	4617      	mov	r7, r2
 800afe6:	4606      	mov	r6, r0
 800afe8:	4698      	mov	r8, r3
 800afea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afec:	f000 80b3 	beq.w	800b156 <_printf_i+0x182>
 800aff0:	d822      	bhi.n	800b038 <_printf_i+0x64>
 800aff2:	2963      	cmp	r1, #99	; 0x63
 800aff4:	d036      	beq.n	800b064 <_printf_i+0x90>
 800aff6:	d80a      	bhi.n	800b00e <_printf_i+0x3a>
 800aff8:	2900      	cmp	r1, #0
 800affa:	f000 80b9 	beq.w	800b170 <_printf_i+0x19c>
 800affe:	2958      	cmp	r1, #88	; 0x58
 800b000:	f000 8083 	beq.w	800b10a <_printf_i+0x136>
 800b004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b00c:	e032      	b.n	800b074 <_printf_i+0xa0>
 800b00e:	2964      	cmp	r1, #100	; 0x64
 800b010:	d001      	beq.n	800b016 <_printf_i+0x42>
 800b012:	2969      	cmp	r1, #105	; 0x69
 800b014:	d1f6      	bne.n	800b004 <_printf_i+0x30>
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	6813      	ldr	r3, [r2, #0]
 800b01a:	0605      	lsls	r5, r0, #24
 800b01c:	f103 0104 	add.w	r1, r3, #4
 800b020:	d52a      	bpl.n	800b078 <_printf_i+0xa4>
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6011      	str	r1, [r2, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	da03      	bge.n	800b032 <_printf_i+0x5e>
 800b02a:	222d      	movs	r2, #45	; 0x2d
 800b02c:	425b      	negs	r3, r3
 800b02e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b032:	486f      	ldr	r0, [pc, #444]	; (800b1f0 <_printf_i+0x21c>)
 800b034:	220a      	movs	r2, #10
 800b036:	e039      	b.n	800b0ac <_printf_i+0xd8>
 800b038:	2973      	cmp	r1, #115	; 0x73
 800b03a:	f000 809d 	beq.w	800b178 <_printf_i+0x1a4>
 800b03e:	d808      	bhi.n	800b052 <_printf_i+0x7e>
 800b040:	296f      	cmp	r1, #111	; 0x6f
 800b042:	d020      	beq.n	800b086 <_printf_i+0xb2>
 800b044:	2970      	cmp	r1, #112	; 0x70
 800b046:	d1dd      	bne.n	800b004 <_printf_i+0x30>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	f043 0320 	orr.w	r3, r3, #32
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	e003      	b.n	800b05a <_printf_i+0x86>
 800b052:	2975      	cmp	r1, #117	; 0x75
 800b054:	d017      	beq.n	800b086 <_printf_i+0xb2>
 800b056:	2978      	cmp	r1, #120	; 0x78
 800b058:	d1d4      	bne.n	800b004 <_printf_i+0x30>
 800b05a:	2378      	movs	r3, #120	; 0x78
 800b05c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b060:	4864      	ldr	r0, [pc, #400]	; (800b1f4 <_printf_i+0x220>)
 800b062:	e055      	b.n	800b110 <_printf_i+0x13c>
 800b064:	6813      	ldr	r3, [r2, #0]
 800b066:	1d19      	adds	r1, r3, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6011      	str	r1, [r2, #0]
 800b06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b074:	2301      	movs	r3, #1
 800b076:	e08c      	b.n	800b192 <_printf_i+0x1be>
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	6011      	str	r1, [r2, #0]
 800b07c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b080:	bf18      	it	ne
 800b082:	b21b      	sxthne	r3, r3
 800b084:	e7cf      	b.n	800b026 <_printf_i+0x52>
 800b086:	6813      	ldr	r3, [r2, #0]
 800b088:	6825      	ldr	r5, [r4, #0]
 800b08a:	1d18      	adds	r0, r3, #4
 800b08c:	6010      	str	r0, [r2, #0]
 800b08e:	0628      	lsls	r0, r5, #24
 800b090:	d501      	bpl.n	800b096 <_printf_i+0xc2>
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	e002      	b.n	800b09c <_printf_i+0xc8>
 800b096:	0668      	lsls	r0, r5, #25
 800b098:	d5fb      	bpl.n	800b092 <_printf_i+0xbe>
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	4854      	ldr	r0, [pc, #336]	; (800b1f0 <_printf_i+0x21c>)
 800b09e:	296f      	cmp	r1, #111	; 0x6f
 800b0a0:	bf14      	ite	ne
 800b0a2:	220a      	movne	r2, #10
 800b0a4:	2208      	moveq	r2, #8
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ac:	6865      	ldr	r5, [r4, #4]
 800b0ae:	60a5      	str	r5, [r4, #8]
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	f2c0 8095 	blt.w	800b1e0 <_printf_i+0x20c>
 800b0b6:	6821      	ldr	r1, [r4, #0]
 800b0b8:	f021 0104 	bic.w	r1, r1, #4
 800b0bc:	6021      	str	r1, [r4, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d13d      	bne.n	800b13e <_printf_i+0x16a>
 800b0c2:	2d00      	cmp	r5, #0
 800b0c4:	f040 808e 	bne.w	800b1e4 <_printf_i+0x210>
 800b0c8:	4665      	mov	r5, ip
 800b0ca:	2a08      	cmp	r2, #8
 800b0cc:	d10b      	bne.n	800b0e6 <_printf_i+0x112>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	07db      	lsls	r3, r3, #31
 800b0d2:	d508      	bpl.n	800b0e6 <_printf_i+0x112>
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	6862      	ldr	r2, [r4, #4]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bfde      	ittt	le
 800b0dc:	2330      	movle	r3, #48	; 0x30
 800b0de:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0e6:	ebac 0305 	sub.w	r3, ip, r5
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	f8cd 8000 	str.w	r8, [sp]
 800b0f0:	463b      	mov	r3, r7
 800b0f2:	aa03      	add	r2, sp, #12
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff fef6 	bl	800aee8 <_printf_common>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d14d      	bne.n	800b19c <_printf_i+0x1c8>
 800b100:	f04f 30ff 	mov.w	r0, #4294967295
 800b104:	b005      	add	sp, #20
 800b106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10a:	4839      	ldr	r0, [pc, #228]	; (800b1f0 <_printf_i+0x21c>)
 800b10c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	6821      	ldr	r1, [r4, #0]
 800b114:	1d1d      	adds	r5, r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6015      	str	r5, [r2, #0]
 800b11a:	060a      	lsls	r2, r1, #24
 800b11c:	d50b      	bpl.n	800b136 <_printf_i+0x162>
 800b11e:	07ca      	lsls	r2, r1, #31
 800b120:	bf44      	itt	mi
 800b122:	f041 0120 	orrmi.w	r1, r1, #32
 800b126:	6021      	strmi	r1, [r4, #0]
 800b128:	b91b      	cbnz	r3, 800b132 <_printf_i+0x15e>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	f022 0220 	bic.w	r2, r2, #32
 800b130:	6022      	str	r2, [r4, #0]
 800b132:	2210      	movs	r2, #16
 800b134:	e7b7      	b.n	800b0a6 <_printf_i+0xd2>
 800b136:	064d      	lsls	r5, r1, #25
 800b138:	bf48      	it	mi
 800b13a:	b29b      	uxthmi	r3, r3
 800b13c:	e7ef      	b.n	800b11e <_printf_i+0x14a>
 800b13e:	4665      	mov	r5, ip
 800b140:	fbb3 f1f2 	udiv	r1, r3, r2
 800b144:	fb02 3311 	mls	r3, r2, r1, r3
 800b148:	5cc3      	ldrb	r3, [r0, r3]
 800b14a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b14e:	460b      	mov	r3, r1
 800b150:	2900      	cmp	r1, #0
 800b152:	d1f5      	bne.n	800b140 <_printf_i+0x16c>
 800b154:	e7b9      	b.n	800b0ca <_printf_i+0xf6>
 800b156:	6813      	ldr	r3, [r2, #0]
 800b158:	6825      	ldr	r5, [r4, #0]
 800b15a:	6961      	ldr	r1, [r4, #20]
 800b15c:	1d18      	adds	r0, r3, #4
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	0628      	lsls	r0, r5, #24
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	d501      	bpl.n	800b16a <_printf_i+0x196>
 800b166:	6019      	str	r1, [r3, #0]
 800b168:	e002      	b.n	800b170 <_printf_i+0x19c>
 800b16a:	066a      	lsls	r2, r5, #25
 800b16c:	d5fb      	bpl.n	800b166 <_printf_i+0x192>
 800b16e:	8019      	strh	r1, [r3, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	6123      	str	r3, [r4, #16]
 800b174:	4665      	mov	r5, ip
 800b176:	e7b9      	b.n	800b0ec <_printf_i+0x118>
 800b178:	6813      	ldr	r3, [r2, #0]
 800b17a:	1d19      	adds	r1, r3, #4
 800b17c:	6011      	str	r1, [r2, #0]
 800b17e:	681d      	ldr	r5, [r3, #0]
 800b180:	6862      	ldr	r2, [r4, #4]
 800b182:	2100      	movs	r1, #0
 800b184:	4628      	mov	r0, r5
 800b186:	f7f5 f823 	bl	80001d0 <memchr>
 800b18a:	b108      	cbz	r0, 800b190 <_printf_i+0x1bc>
 800b18c:	1b40      	subs	r0, r0, r5
 800b18e:	6060      	str	r0, [r4, #4]
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	2300      	movs	r3, #0
 800b196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19a:	e7a7      	b.n	800b0ec <_printf_i+0x118>
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	47c0      	blx	r8
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d0aa      	beq.n	800b100 <_printf_i+0x12c>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	079b      	lsls	r3, r3, #30
 800b1ae:	d413      	bmi.n	800b1d8 <_printf_i+0x204>
 800b1b0:	68e0      	ldr	r0, [r4, #12]
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	bfb8      	it	lt
 800b1b8:	4618      	movlt	r0, r3
 800b1ba:	e7a3      	b.n	800b104 <_printf_i+0x130>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	464a      	mov	r2, r9
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	47c0      	blx	r8
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d09a      	beq.n	800b100 <_printf_i+0x12c>
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	68e3      	ldr	r3, [r4, #12]
 800b1ce:	9a03      	ldr	r2, [sp, #12]
 800b1d0:	1a9b      	subs	r3, r3, r2
 800b1d2:	42ab      	cmp	r3, r5
 800b1d4:	dcf2      	bgt.n	800b1bc <_printf_i+0x1e8>
 800b1d6:	e7eb      	b.n	800b1b0 <_printf_i+0x1dc>
 800b1d8:	2500      	movs	r5, #0
 800b1da:	f104 0919 	add.w	r9, r4, #25
 800b1de:	e7f5      	b.n	800b1cc <_printf_i+0x1f8>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1ac      	bne.n	800b13e <_printf_i+0x16a>
 800b1e4:	7803      	ldrb	r3, [r0, #0]
 800b1e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ee:	e76c      	b.n	800b0ca <_printf_i+0xf6>
 800b1f0:	0800b319 	.word	0x0800b319
 800b1f4:	0800b32a 	.word	0x0800b32a

0800b1f8 <_realloc_r>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	460e      	mov	r6, r1
 800b200:	b921      	cbnz	r1, 800b20c <_realloc_r+0x14>
 800b202:	4611      	mov	r1, r2
 800b204:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b208:	f7ff bc90 	b.w	800ab2c <_malloc_r>
 800b20c:	b922      	cbnz	r2, 800b218 <_realloc_r+0x20>
 800b20e:	f7ff fc3f 	bl	800aa90 <_free_r>
 800b212:	4625      	mov	r5, r4
 800b214:	4628      	mov	r0, r5
 800b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b218:	f000 f814 	bl	800b244 <_malloc_usable_size_r>
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	d20f      	bcs.n	800b240 <_realloc_r+0x48>
 800b220:	4621      	mov	r1, r4
 800b222:	4638      	mov	r0, r7
 800b224:	f7ff fc82 	bl	800ab2c <_malloc_r>
 800b228:	4605      	mov	r5, r0
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d0f2      	beq.n	800b214 <_realloc_r+0x1c>
 800b22e:	4631      	mov	r1, r6
 800b230:	4622      	mov	r2, r4
 800b232:	f7ff fc01 	bl	800aa38 <memcpy>
 800b236:	4631      	mov	r1, r6
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff fc29 	bl	800aa90 <_free_r>
 800b23e:	e7e9      	b.n	800b214 <_realloc_r+0x1c>
 800b240:	4635      	mov	r5, r6
 800b242:	e7e7      	b.n	800b214 <_realloc_r+0x1c>

0800b244 <_malloc_usable_size_r>:
 800b244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b248:	1f18      	subs	r0, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfbc      	itt	lt
 800b24e:	580b      	ldrlt	r3, [r1, r0]
 800b250:	18c0      	addlt	r0, r0, r3
 800b252:	4770      	bx	lr

0800b254 <_init>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr

0800b260 <_fini>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr
